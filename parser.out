Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> insert_statement
Rule 2     statement -> select_statement
Rule 3     statement -> delete_statement
Rule 4     insert_statement -> INSERT into_kw TABLE_NAME VALUES OPENPAR value_list CLOSEPAR SEMICOLON
Rule 5     insert_statement -> INSERT into_kw TABLE_NAME OPENPAR column_name CLOSEPAR VALUES OPENPAR value_list CLOSEPAR SEMICOLON
Rule 6     insert_statement -> INSERT into_kw TABLE_NAME SET assignment_list SEMICOLON
Rule 7     select_statement -> SELECT columns FROM TABLE_NAME SEMICOLON
Rule 8     select_statement -> SELECT columns FROM TABLE_NAME WHERE condition SEMICOLON
Rule 9     delete_statement -> DELETE FROM TABLE_NAME SEMICOLON
Rule 10    delete_statement -> DELETE FROM TABLE_NAME WHERE condition SEMICOLON
Rule 11    into_kw -> INTO
Rule 12    into_kw -> empty
Rule 13    columns -> ASTERISK
Rule 14    columns -> column_name
Rule 15    column_name -> COLUMN_NAME
Rule 16    column_name -> column_name COMMA COLUMN_NAME
Rule 17    assignment_list -> COLUMN_NAME EQUAL literals
Rule 18    assignment_list -> assignment_list COMMA COLUMN_NAME EQUAL literals
Rule 19    value_list -> literals
Rule 20    value_list -> value_list COMMA literals
Rule 21    literals -> STRING_LIT
Rule 22    literals -> INT_LIT
Rule 23    literals -> DOUBLE_LIT
Rule 24    condition -> string_cond
Rule 25    condition -> num_cond
Rule 26    condition -> NOT OPENPAR string_cond CLOSEPAR
Rule 27    condition -> NOT OPENPAR num_cond CLOSEPAR
Rule 28    string_cond -> string_exp LIKE string_exp
Rule 29    string_cond -> string_exp NOT LIKE string_exp
Rule 30    string_cond -> STRCMP OPENPAR string_exp COMMA string_exp CLOSEPAR
Rule 31    string_exp -> STRING_LIT
Rule 32    num_cond -> num_exp comparison_op num_exp
Rule 33    num_cond -> num_exp BETWEEN num_exp AND num_exp
Rule 34    num_cond -> num_exp NOT NULL
Rule 35    num_cond -> num_exp IS NULL
Rule 36    num_exp -> num_exp ADD num_factor
Rule 37    num_exp -> num_factor SUBTRACT num_exp
Rule 38    num_exp -> num_factor
Rule 39    num_factor -> num_factor ASTERISK num_term
Rule 40    num_factor -> num_factor DIVIDE num_term
Rule 41    num_factor -> num_factor DIVIDE_INT num_term
Rule 42    num_factor -> num_factor MODULO num_term
Rule 43    num_factor -> num_term
Rule 44    num_term -> OPENPAR num_exp CLOSEPAR
Rule 45    num_term -> num_val
Rule 46    num_val -> INT_LIT
Rule 47    num_val -> DOUBLE_LIT
Rule 48    num_val -> COLUMN_NAME
Rule 49    comparison_op -> GE
Rule 50    comparison_op -> GT
Rule 51    comparison_op -> LE
Rule 52    comparison_op -> LT
Rule 53    comparison_op -> NE
Rule 54    comparison_op -> EQUAL
Rule 55    comparison_op -> EQUAL_NULL
Rule 56    empty -> <empty>

Terminals, with rules where they appear

ADD                  : 36
AND                  : 33
ASTERISK             : 13 39
BETWEEN              : 33
CLOSEPAR             : 4 5 5 26 27 30 44
COLUMN_NAME          : 15 16 17 18 48
COMMA                : 16 18 20 30
DELETE               : 9 10
DIVIDE               : 40
DIVIDE_INT           : 41
DOUBLE_LIT           : 23 47
EQUAL                : 17 18 54
EQUAL_NULL           : 55
FROM                 : 7 8 9 10
GE                   : 49
GT                   : 50
INSERT               : 4 5 6
INTO                 : 11
INT_LIT              : 22 46
IS                   : 35
LE                   : 51
LIKE                 : 28 29
LT                   : 52
MODULO               : 42
NE                   : 53
NOT                  : 26 27 29 34
NULL                 : 34 35
OPENPAR              : 4 5 5 26 27 30 44
SELECT               : 7 8
SEMICOLON            : 4 5 6 7 8 9 10
SET                  : 6
STRCMP               : 30
STRING_LIT           : 21 31
SUBTRACT             : 37
TABLE_NAME           : 4 5 6 7 8 9 10
VALUES               : 4 5
WHERE                : 8 10
error                : 

Nonterminals, with rules where they appear

assignment_list      : 6 18
column_name          : 5 14 16
columns              : 7 8
comparison_op        : 32
condition            : 8 10
delete_statement     : 3
empty                : 12
insert_statement     : 1
into_kw              : 4 5 6
literals             : 17 18 19 20
num_cond             : 25 27
num_exp              : 32 32 33 33 33 34 35 36 37 44
num_factor           : 36 37 38 39 40 41 42
num_term             : 39 40 41 42 43
num_val              : 45
select_statement     : 2
statement            : 0
string_cond          : 24 26
string_exp           : 28 28 29 29 30 30
value_list           : 4 5 20

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . insert_statement
    (2) statement -> . select_statement
    (3) statement -> . delete_statement
    (4) insert_statement -> . INSERT into_kw TABLE_NAME VALUES OPENPAR value_list CLOSEPAR SEMICOLON
    (5) insert_statement -> . INSERT into_kw TABLE_NAME OPENPAR column_name CLOSEPAR VALUES OPENPAR value_list CLOSEPAR SEMICOLON
    (6) insert_statement -> . INSERT into_kw TABLE_NAME SET assignment_list SEMICOLON
    (7) select_statement -> . SELECT columns FROM TABLE_NAME SEMICOLON
    (8) select_statement -> . SELECT columns FROM TABLE_NAME WHERE condition SEMICOLON
    (9) delete_statement -> . DELETE FROM TABLE_NAME SEMICOLON
    (10) delete_statement -> . DELETE FROM TABLE_NAME WHERE condition SEMICOLON

    INSERT          shift and go to state 2
    SELECT          shift and go to state 5
    DELETE          shift and go to state 3

    insert_statement               shift and go to state 1
    statement                      shift and go to state 6
    delete_statement               shift and go to state 7
    select_statement               shift and go to state 4

state 1

    (1) statement -> insert_statement .

    $end            reduce using rule 1 (statement -> insert_statement .)


state 2

    (4) insert_statement -> INSERT . into_kw TABLE_NAME VALUES OPENPAR value_list CLOSEPAR SEMICOLON
    (5) insert_statement -> INSERT . into_kw TABLE_NAME OPENPAR column_name CLOSEPAR VALUES OPENPAR value_list CLOSEPAR SEMICOLON
    (6) insert_statement -> INSERT . into_kw TABLE_NAME SET assignment_list SEMICOLON
    (11) into_kw -> . INTO
    (12) into_kw -> . empty
    (56) empty -> .

    INTO            shift and go to state 8
    TABLE_NAME      reduce using rule 56 (empty -> .)

    into_kw                        shift and go to state 9
    empty                          shift and go to state 10

state 3

    (9) delete_statement -> DELETE . FROM TABLE_NAME SEMICOLON
    (10) delete_statement -> DELETE . FROM TABLE_NAME WHERE condition SEMICOLON

    FROM            shift and go to state 11


state 4

    (2) statement -> select_statement .

    $end            reduce using rule 2 (statement -> select_statement .)


state 5

    (7) select_statement -> SELECT . columns FROM TABLE_NAME SEMICOLON
    (8) select_statement -> SELECT . columns FROM TABLE_NAME WHERE condition SEMICOLON
    (13) columns -> . ASTERISK
    (14) columns -> . column_name
    (15) column_name -> . COLUMN_NAME
    (16) column_name -> . column_name COMMA COLUMN_NAME

    ASTERISK        shift and go to state 12
    COLUMN_NAME     shift and go to state 14

    column_name                    shift and go to state 13
    columns                        shift and go to state 15

state 6

    (0) S' -> statement .



state 7

    (3) statement -> delete_statement .

    $end            reduce using rule 3 (statement -> delete_statement .)


state 8

    (11) into_kw -> INTO .

    TABLE_NAME      reduce using rule 11 (into_kw -> INTO .)


state 9

    (4) insert_statement -> INSERT into_kw . TABLE_NAME VALUES OPENPAR value_list CLOSEPAR SEMICOLON
    (5) insert_statement -> INSERT into_kw . TABLE_NAME OPENPAR column_name CLOSEPAR VALUES OPENPAR value_list CLOSEPAR SEMICOLON
    (6) insert_statement -> INSERT into_kw . TABLE_NAME SET assignment_list SEMICOLON

    TABLE_NAME      shift and go to state 16


state 10

    (12) into_kw -> empty .

    TABLE_NAME      reduce using rule 12 (into_kw -> empty .)


state 11

    (9) delete_statement -> DELETE FROM . TABLE_NAME SEMICOLON
    (10) delete_statement -> DELETE FROM . TABLE_NAME WHERE condition SEMICOLON

    TABLE_NAME      shift and go to state 17


state 12

    (13) columns -> ASTERISK .

    FROM            reduce using rule 13 (columns -> ASTERISK .)


state 13

    (14) columns -> column_name .
    (16) column_name -> column_name . COMMA COLUMN_NAME

    FROM            reduce using rule 14 (columns -> column_name .)
    COMMA           shift and go to state 18


state 14

    (15) column_name -> COLUMN_NAME .

    COMMA           reduce using rule 15 (column_name -> COLUMN_NAME .)
    FROM            reduce using rule 15 (column_name -> COLUMN_NAME .)
    CLOSEPAR        reduce using rule 15 (column_name -> COLUMN_NAME .)


state 15

    (7) select_statement -> SELECT columns . FROM TABLE_NAME SEMICOLON
    (8) select_statement -> SELECT columns . FROM TABLE_NAME WHERE condition SEMICOLON

    FROM            shift and go to state 19


state 16

    (4) insert_statement -> INSERT into_kw TABLE_NAME . VALUES OPENPAR value_list CLOSEPAR SEMICOLON
    (5) insert_statement -> INSERT into_kw TABLE_NAME . OPENPAR column_name CLOSEPAR VALUES OPENPAR value_list CLOSEPAR SEMICOLON
    (6) insert_statement -> INSERT into_kw TABLE_NAME . SET assignment_list SEMICOLON

    VALUES          shift and go to state 21
    OPENPAR         shift and go to state 20
    SET             shift and go to state 22


state 17

    (9) delete_statement -> DELETE FROM TABLE_NAME . SEMICOLON
    (10) delete_statement -> DELETE FROM TABLE_NAME . WHERE condition SEMICOLON

    SEMICOLON       shift and go to state 23
    WHERE           shift and go to state 24


state 18

    (16) column_name -> column_name COMMA . COLUMN_NAME

    COLUMN_NAME     shift and go to state 25


state 19

    (7) select_statement -> SELECT columns FROM . TABLE_NAME SEMICOLON
    (8) select_statement -> SELECT columns FROM . TABLE_NAME WHERE condition SEMICOLON

    TABLE_NAME      shift and go to state 26


state 20

    (5) insert_statement -> INSERT into_kw TABLE_NAME OPENPAR . column_name CLOSEPAR VALUES OPENPAR value_list CLOSEPAR SEMICOLON
    (15) column_name -> . COLUMN_NAME
    (16) column_name -> . column_name COMMA COLUMN_NAME

    COLUMN_NAME     shift and go to state 14

    column_name                    shift and go to state 27

state 21

    (4) insert_statement -> INSERT into_kw TABLE_NAME VALUES . OPENPAR value_list CLOSEPAR SEMICOLON

    OPENPAR         shift and go to state 28


state 22

    (6) insert_statement -> INSERT into_kw TABLE_NAME SET . assignment_list SEMICOLON
    (17) assignment_list -> . COLUMN_NAME EQUAL literals
    (18) assignment_list -> . assignment_list COMMA COLUMN_NAME EQUAL literals

    COLUMN_NAME     shift and go to state 30

    assignment_list                shift and go to state 29

state 23

    (9) delete_statement -> DELETE FROM TABLE_NAME SEMICOLON .

    $end            reduce using rule 9 (delete_statement -> DELETE FROM TABLE_NAME SEMICOLON .)


state 24

    (10) delete_statement -> DELETE FROM TABLE_NAME WHERE . condition SEMICOLON
    (24) condition -> . string_cond
    (25) condition -> . num_cond
    (26) condition -> . NOT OPENPAR string_cond CLOSEPAR
    (27) condition -> . NOT OPENPAR num_cond CLOSEPAR
    (28) string_cond -> . string_exp LIKE string_exp
    (29) string_cond -> . string_exp NOT LIKE string_exp
    (30) string_cond -> . STRCMP OPENPAR string_exp COMMA string_exp CLOSEPAR
    (32) num_cond -> . num_exp comparison_op num_exp
    (33) num_cond -> . num_exp BETWEEN num_exp AND num_exp
    (34) num_cond -> . num_exp NOT NULL
    (35) num_cond -> . num_exp IS NULL
    (31) string_exp -> . STRING_LIT
    (36) num_exp -> . num_exp ADD num_factor
    (37) num_exp -> . num_factor SUBTRACT num_exp
    (38) num_exp -> . num_factor
    (39) num_factor -> . num_factor ASTERISK num_term
    (40) num_factor -> . num_factor DIVIDE num_term
    (41) num_factor -> . num_factor DIVIDE_INT num_term
    (42) num_factor -> . num_factor MODULO num_term
    (43) num_factor -> . num_term
    (44) num_term -> . OPENPAR num_exp CLOSEPAR
    (45) num_term -> . num_val
    (46) num_val -> . INT_LIT
    (47) num_val -> . DOUBLE_LIT
    (48) num_val -> . COLUMN_NAME

    NOT             shift and go to state 39
    STRCMP          shift and go to state 31
    STRING_LIT      shift and go to state 33
    OPENPAR         shift and go to state 34
    INT_LIT         shift and go to state 41
    DOUBLE_LIT      shift and go to state 45
    COLUMN_NAME     shift and go to state 35

    num_cond                       shift and go to state 42
    num_exp                        shift and go to state 38
    string_cond                    shift and go to state 32
    condition                      shift and go to state 40
    num_factor                     shift and go to state 36
    num_term                       shift and go to state 37
    string_exp                     shift and go to state 44
    num_val                        shift and go to state 43

state 25

    (16) column_name -> column_name COMMA COLUMN_NAME .

    COMMA           reduce using rule 16 (column_name -> column_name COMMA COLUMN_NAME .)
    FROM            reduce using rule 16 (column_name -> column_name COMMA COLUMN_NAME .)
    CLOSEPAR        reduce using rule 16 (column_name -> column_name COMMA COLUMN_NAME .)


state 26

    (7) select_statement -> SELECT columns FROM TABLE_NAME . SEMICOLON
    (8) select_statement -> SELECT columns FROM TABLE_NAME . WHERE condition SEMICOLON

    SEMICOLON       shift and go to state 46
    WHERE           shift and go to state 47


state 27

    (5) insert_statement -> INSERT into_kw TABLE_NAME OPENPAR column_name . CLOSEPAR VALUES OPENPAR value_list CLOSEPAR SEMICOLON
    (16) column_name -> column_name . COMMA COLUMN_NAME

    CLOSEPAR        shift and go to state 48
    COMMA           shift and go to state 18


state 28

    (4) insert_statement -> INSERT into_kw TABLE_NAME VALUES OPENPAR . value_list CLOSEPAR SEMICOLON
    (19) value_list -> . literals
    (20) value_list -> . value_list COMMA literals
    (21) literals -> . STRING_LIT
    (22) literals -> . INT_LIT
    (23) literals -> . DOUBLE_LIT

    STRING_LIT      shift and go to state 50
    INT_LIT         shift and go to state 49
    DOUBLE_LIT      shift and go to state 52

    literals                       shift and go to state 51
    value_list                     shift and go to state 53

state 29

    (6) insert_statement -> INSERT into_kw TABLE_NAME SET assignment_list . SEMICOLON
    (18) assignment_list -> assignment_list . COMMA COLUMN_NAME EQUAL literals

    SEMICOLON       shift and go to state 54
    COMMA           shift and go to state 55


state 30

    (17) assignment_list -> COLUMN_NAME . EQUAL literals

    EQUAL           shift and go to state 56


state 31

    (30) string_cond -> STRCMP . OPENPAR string_exp COMMA string_exp CLOSEPAR

    OPENPAR         shift and go to state 57


state 32

    (24) condition -> string_cond .

    SEMICOLON       reduce using rule 24 (condition -> string_cond .)


state 33

    (31) string_exp -> STRING_LIT .

    LIKE            reduce using rule 31 (string_exp -> STRING_LIT .)
    NOT             reduce using rule 31 (string_exp -> STRING_LIT .)
    COMMA           reduce using rule 31 (string_exp -> STRING_LIT .)
    SEMICOLON       reduce using rule 31 (string_exp -> STRING_LIT .)
    CLOSEPAR        reduce using rule 31 (string_exp -> STRING_LIT .)


state 34

    (44) num_term -> OPENPAR . num_exp CLOSEPAR
    (36) num_exp -> . num_exp ADD num_factor
    (37) num_exp -> . num_factor SUBTRACT num_exp
    (38) num_exp -> . num_factor
    (39) num_factor -> . num_factor ASTERISK num_term
    (40) num_factor -> . num_factor DIVIDE num_term
    (41) num_factor -> . num_factor DIVIDE_INT num_term
    (42) num_factor -> . num_factor MODULO num_term
    (43) num_factor -> . num_term
    (44) num_term -> . OPENPAR num_exp CLOSEPAR
    (45) num_term -> . num_val
    (46) num_val -> . INT_LIT
    (47) num_val -> . DOUBLE_LIT
    (48) num_val -> . COLUMN_NAME

    OPENPAR         shift and go to state 34
    INT_LIT         shift and go to state 41
    DOUBLE_LIT      shift and go to state 45
    COLUMN_NAME     shift and go to state 35

    num_term                       shift and go to state 37
    num_exp                        shift and go to state 58
    num_val                        shift and go to state 43
    num_factor                     shift and go to state 36

state 35

    (48) num_val -> COLUMN_NAME .

    SUBTRACT        reduce using rule 48 (num_val -> COLUMN_NAME .)
    ASTERISK        reduce using rule 48 (num_val -> COLUMN_NAME .)
    DIVIDE          reduce using rule 48 (num_val -> COLUMN_NAME .)
    DIVIDE_INT      reduce using rule 48 (num_val -> COLUMN_NAME .)
    MODULO          reduce using rule 48 (num_val -> COLUMN_NAME .)
    ADD             reduce using rule 48 (num_val -> COLUMN_NAME .)
    SEMICOLON       reduce using rule 48 (num_val -> COLUMN_NAME .)
    CLOSEPAR        reduce using rule 48 (num_val -> COLUMN_NAME .)
    BETWEEN         reduce using rule 48 (num_val -> COLUMN_NAME .)
    NOT             reduce using rule 48 (num_val -> COLUMN_NAME .)
    IS              reduce using rule 48 (num_val -> COLUMN_NAME .)
    GE              reduce using rule 48 (num_val -> COLUMN_NAME .)
    GT              reduce using rule 48 (num_val -> COLUMN_NAME .)
    LE              reduce using rule 48 (num_val -> COLUMN_NAME .)
    LT              reduce using rule 48 (num_val -> COLUMN_NAME .)
    NE              reduce using rule 48 (num_val -> COLUMN_NAME .)
    EQUAL           reduce using rule 48 (num_val -> COLUMN_NAME .)
    EQUAL_NULL      reduce using rule 48 (num_val -> COLUMN_NAME .)
    AND             reduce using rule 48 (num_val -> COLUMN_NAME .)


state 36

    (37) num_exp -> num_factor . SUBTRACT num_exp
    (38) num_exp -> num_factor .
    (39) num_factor -> num_factor . ASTERISK num_term
    (40) num_factor -> num_factor . DIVIDE num_term
    (41) num_factor -> num_factor . DIVIDE_INT num_term
    (42) num_factor -> num_factor . MODULO num_term

    SUBTRACT        shift and go to state 59
    ADD             reduce using rule 38 (num_exp -> num_factor .)
    SEMICOLON       reduce using rule 38 (num_exp -> num_factor .)
    CLOSEPAR        reduce using rule 38 (num_exp -> num_factor .)
    BETWEEN         reduce using rule 38 (num_exp -> num_factor .)
    NOT             reduce using rule 38 (num_exp -> num_factor .)
    IS              reduce using rule 38 (num_exp -> num_factor .)
    GE              reduce using rule 38 (num_exp -> num_factor .)
    GT              reduce using rule 38 (num_exp -> num_factor .)
    LE              reduce using rule 38 (num_exp -> num_factor .)
    LT              reduce using rule 38 (num_exp -> num_factor .)
    NE              reduce using rule 38 (num_exp -> num_factor .)
    EQUAL           reduce using rule 38 (num_exp -> num_factor .)
    EQUAL_NULL      reduce using rule 38 (num_exp -> num_factor .)
    AND             reduce using rule 38 (num_exp -> num_factor .)
    ASTERISK        shift and go to state 60
    DIVIDE          shift and go to state 63
    DIVIDE_INT      shift and go to state 62
    MODULO          shift and go to state 61


state 37

    (43) num_factor -> num_term .

    SUBTRACT        reduce using rule 43 (num_factor -> num_term .)
    ASTERISK        reduce using rule 43 (num_factor -> num_term .)
    DIVIDE          reduce using rule 43 (num_factor -> num_term .)
    DIVIDE_INT      reduce using rule 43 (num_factor -> num_term .)
    MODULO          reduce using rule 43 (num_factor -> num_term .)
    ADD             reduce using rule 43 (num_factor -> num_term .)
    SEMICOLON       reduce using rule 43 (num_factor -> num_term .)
    CLOSEPAR        reduce using rule 43 (num_factor -> num_term .)
    BETWEEN         reduce using rule 43 (num_factor -> num_term .)
    NOT             reduce using rule 43 (num_factor -> num_term .)
    IS              reduce using rule 43 (num_factor -> num_term .)
    GE              reduce using rule 43 (num_factor -> num_term .)
    GT              reduce using rule 43 (num_factor -> num_term .)
    LE              reduce using rule 43 (num_factor -> num_term .)
    LT              reduce using rule 43 (num_factor -> num_term .)
    NE              reduce using rule 43 (num_factor -> num_term .)
    EQUAL           reduce using rule 43 (num_factor -> num_term .)
    EQUAL_NULL      reduce using rule 43 (num_factor -> num_term .)
    AND             reduce using rule 43 (num_factor -> num_term .)


state 38

    (32) num_cond -> num_exp . comparison_op num_exp
    (33) num_cond -> num_exp . BETWEEN num_exp AND num_exp
    (34) num_cond -> num_exp . NOT NULL
    (35) num_cond -> num_exp . IS NULL
    (36) num_exp -> num_exp . ADD num_factor
    (49) comparison_op -> . GE
    (50) comparison_op -> . GT
    (51) comparison_op -> . LE
    (52) comparison_op -> . LT
    (53) comparison_op -> . NE
    (54) comparison_op -> . EQUAL
    (55) comparison_op -> . EQUAL_NULL

    BETWEEN         shift and go to state 72
    NOT             shift and go to state 66
    IS              shift and go to state 71
    ADD             shift and go to state 73
    GE              shift and go to state 64
    GT              shift and go to state 69
    LE              shift and go to state 68
    LT              shift and go to state 75
    NE              shift and go to state 74
    EQUAL           shift and go to state 65
    EQUAL_NULL      shift and go to state 67

    comparison_op                  shift and go to state 70

state 39

    (26) condition -> NOT . OPENPAR string_cond CLOSEPAR
    (27) condition -> NOT . OPENPAR num_cond CLOSEPAR

    OPENPAR         shift and go to state 76


state 40

    (10) delete_statement -> DELETE FROM TABLE_NAME WHERE condition . SEMICOLON

    SEMICOLON       shift and go to state 77


state 41

    (46) num_val -> INT_LIT .

    SUBTRACT        reduce using rule 46 (num_val -> INT_LIT .)
    ASTERISK        reduce using rule 46 (num_val -> INT_LIT .)
    DIVIDE          reduce using rule 46 (num_val -> INT_LIT .)
    DIVIDE_INT      reduce using rule 46 (num_val -> INT_LIT .)
    MODULO          reduce using rule 46 (num_val -> INT_LIT .)
    ADD             reduce using rule 46 (num_val -> INT_LIT .)
    SEMICOLON       reduce using rule 46 (num_val -> INT_LIT .)
    CLOSEPAR        reduce using rule 46 (num_val -> INT_LIT .)
    BETWEEN         reduce using rule 46 (num_val -> INT_LIT .)
    NOT             reduce using rule 46 (num_val -> INT_LIT .)
    IS              reduce using rule 46 (num_val -> INT_LIT .)
    GE              reduce using rule 46 (num_val -> INT_LIT .)
    GT              reduce using rule 46 (num_val -> INT_LIT .)
    LE              reduce using rule 46 (num_val -> INT_LIT .)
    LT              reduce using rule 46 (num_val -> INT_LIT .)
    NE              reduce using rule 46 (num_val -> INT_LIT .)
    EQUAL           reduce using rule 46 (num_val -> INT_LIT .)
    EQUAL_NULL      reduce using rule 46 (num_val -> INT_LIT .)
    AND             reduce using rule 46 (num_val -> INT_LIT .)


state 42

    (25) condition -> num_cond .

    SEMICOLON       reduce using rule 25 (condition -> num_cond .)


state 43

    (45) num_term -> num_val .

    SUBTRACT        reduce using rule 45 (num_term -> num_val .)
    ASTERISK        reduce using rule 45 (num_term -> num_val .)
    DIVIDE          reduce using rule 45 (num_term -> num_val .)
    DIVIDE_INT      reduce using rule 45 (num_term -> num_val .)
    MODULO          reduce using rule 45 (num_term -> num_val .)
    ADD             reduce using rule 45 (num_term -> num_val .)
    BETWEEN         reduce using rule 45 (num_term -> num_val .)
    NOT             reduce using rule 45 (num_term -> num_val .)
    IS              reduce using rule 45 (num_term -> num_val .)
    GE              reduce using rule 45 (num_term -> num_val .)
    GT              reduce using rule 45 (num_term -> num_val .)
    LE              reduce using rule 45 (num_term -> num_val .)
    LT              reduce using rule 45 (num_term -> num_val .)
    NE              reduce using rule 45 (num_term -> num_val .)
    EQUAL           reduce using rule 45 (num_term -> num_val .)
    EQUAL_NULL      reduce using rule 45 (num_term -> num_val .)
    CLOSEPAR        reduce using rule 45 (num_term -> num_val .)
    SEMICOLON       reduce using rule 45 (num_term -> num_val .)
    AND             reduce using rule 45 (num_term -> num_val .)


state 44

    (28) string_cond -> string_exp . LIKE string_exp
    (29) string_cond -> string_exp . NOT LIKE string_exp

    LIKE            shift and go to state 79
    NOT             shift and go to state 78


state 45

    (47) num_val -> DOUBLE_LIT .

    SUBTRACT        reduce using rule 47 (num_val -> DOUBLE_LIT .)
    ASTERISK        reduce using rule 47 (num_val -> DOUBLE_LIT .)
    DIVIDE          reduce using rule 47 (num_val -> DOUBLE_LIT .)
    DIVIDE_INT      reduce using rule 47 (num_val -> DOUBLE_LIT .)
    MODULO          reduce using rule 47 (num_val -> DOUBLE_LIT .)
    ADD             reduce using rule 47 (num_val -> DOUBLE_LIT .)
    SEMICOLON       reduce using rule 47 (num_val -> DOUBLE_LIT .)
    CLOSEPAR        reduce using rule 47 (num_val -> DOUBLE_LIT .)
    BETWEEN         reduce using rule 47 (num_val -> DOUBLE_LIT .)
    NOT             reduce using rule 47 (num_val -> DOUBLE_LIT .)
    IS              reduce using rule 47 (num_val -> DOUBLE_LIT .)
    GE              reduce using rule 47 (num_val -> DOUBLE_LIT .)
    GT              reduce using rule 47 (num_val -> DOUBLE_LIT .)
    LE              reduce using rule 47 (num_val -> DOUBLE_LIT .)
    LT              reduce using rule 47 (num_val -> DOUBLE_LIT .)
    NE              reduce using rule 47 (num_val -> DOUBLE_LIT .)
    EQUAL           reduce using rule 47 (num_val -> DOUBLE_LIT .)
    EQUAL_NULL      reduce using rule 47 (num_val -> DOUBLE_LIT .)
    AND             reduce using rule 47 (num_val -> DOUBLE_LIT .)


state 46

    (7) select_statement -> SELECT columns FROM TABLE_NAME SEMICOLON .

    $end            reduce using rule 7 (select_statement -> SELECT columns FROM TABLE_NAME SEMICOLON .)


state 47

    (8) select_statement -> SELECT columns FROM TABLE_NAME WHERE . condition SEMICOLON
    (24) condition -> . string_cond
    (25) condition -> . num_cond
    (26) condition -> . NOT OPENPAR string_cond CLOSEPAR
    (27) condition -> . NOT OPENPAR num_cond CLOSEPAR
    (28) string_cond -> . string_exp LIKE string_exp
    (29) string_cond -> . string_exp NOT LIKE string_exp
    (30) string_cond -> . STRCMP OPENPAR string_exp COMMA string_exp CLOSEPAR
    (32) num_cond -> . num_exp comparison_op num_exp
    (33) num_cond -> . num_exp BETWEEN num_exp AND num_exp
    (34) num_cond -> . num_exp NOT NULL
    (35) num_cond -> . num_exp IS NULL
    (31) string_exp -> . STRING_LIT
    (36) num_exp -> . num_exp ADD num_factor
    (37) num_exp -> . num_factor SUBTRACT num_exp
    (38) num_exp -> . num_factor
    (39) num_factor -> . num_factor ASTERISK num_term
    (40) num_factor -> . num_factor DIVIDE num_term
    (41) num_factor -> . num_factor DIVIDE_INT num_term
    (42) num_factor -> . num_factor MODULO num_term
    (43) num_factor -> . num_term
    (44) num_term -> . OPENPAR num_exp CLOSEPAR
    (45) num_term -> . num_val
    (46) num_val -> . INT_LIT
    (47) num_val -> . DOUBLE_LIT
    (48) num_val -> . COLUMN_NAME

    NOT             shift and go to state 39
    STRCMP          shift and go to state 31
    STRING_LIT      shift and go to state 33
    OPENPAR         shift and go to state 34
    INT_LIT         shift and go to state 41
    DOUBLE_LIT      shift and go to state 45
    COLUMN_NAME     shift and go to state 35

    num_cond                       shift and go to state 42
    num_exp                        shift and go to state 38
    string_cond                    shift and go to state 32
    condition                      shift and go to state 80
    num_factor                     shift and go to state 36
    num_term                       shift and go to state 37
    string_exp                     shift and go to state 44
    num_val                        shift and go to state 43

state 48

    (5) insert_statement -> INSERT into_kw TABLE_NAME OPENPAR column_name CLOSEPAR . VALUES OPENPAR value_list CLOSEPAR SEMICOLON

    VALUES          shift and go to state 81


state 49

    (22) literals -> INT_LIT .

    CLOSEPAR        reduce using rule 22 (literals -> INT_LIT .)
    COMMA           reduce using rule 22 (literals -> INT_LIT .)
    SEMICOLON       reduce using rule 22 (literals -> INT_LIT .)


state 50

    (21) literals -> STRING_LIT .

    CLOSEPAR        reduce using rule 21 (literals -> STRING_LIT .)
    COMMA           reduce using rule 21 (literals -> STRING_LIT .)
    SEMICOLON       reduce using rule 21 (literals -> STRING_LIT .)


state 51

    (19) value_list -> literals .

    CLOSEPAR        reduce using rule 19 (value_list -> literals .)
    COMMA           reduce using rule 19 (value_list -> literals .)


state 52

    (23) literals -> DOUBLE_LIT .

    CLOSEPAR        reduce using rule 23 (literals -> DOUBLE_LIT .)
    COMMA           reduce using rule 23 (literals -> DOUBLE_LIT .)
    SEMICOLON       reduce using rule 23 (literals -> DOUBLE_LIT .)


state 53

    (4) insert_statement -> INSERT into_kw TABLE_NAME VALUES OPENPAR value_list . CLOSEPAR SEMICOLON
    (20) value_list -> value_list . COMMA literals

    CLOSEPAR        shift and go to state 83
    COMMA           shift and go to state 82


state 54

    (6) insert_statement -> INSERT into_kw TABLE_NAME SET assignment_list SEMICOLON .

    $end            reduce using rule 6 (insert_statement -> INSERT into_kw TABLE_NAME SET assignment_list SEMICOLON .)


state 55

    (18) assignment_list -> assignment_list COMMA . COLUMN_NAME EQUAL literals

    COLUMN_NAME     shift and go to state 84


state 56

    (17) assignment_list -> COLUMN_NAME EQUAL . literals
    (21) literals -> . STRING_LIT
    (22) literals -> . INT_LIT
    (23) literals -> . DOUBLE_LIT

    STRING_LIT      shift and go to state 50
    INT_LIT         shift and go to state 49
    DOUBLE_LIT      shift and go to state 52

    literals                       shift and go to state 85

state 57

    (30) string_cond -> STRCMP OPENPAR . string_exp COMMA string_exp CLOSEPAR
    (31) string_exp -> . STRING_LIT

    STRING_LIT      shift and go to state 33

    string_exp                     shift and go to state 86

state 58

    (44) num_term -> OPENPAR num_exp . CLOSEPAR
    (36) num_exp -> num_exp . ADD num_factor

    CLOSEPAR        shift and go to state 87
    ADD             shift and go to state 73


state 59

    (37) num_exp -> num_factor SUBTRACT . num_exp
    (36) num_exp -> . num_exp ADD num_factor
    (37) num_exp -> . num_factor SUBTRACT num_exp
    (38) num_exp -> . num_factor
    (39) num_factor -> . num_factor ASTERISK num_term
    (40) num_factor -> . num_factor DIVIDE num_term
    (41) num_factor -> . num_factor DIVIDE_INT num_term
    (42) num_factor -> . num_factor MODULO num_term
    (43) num_factor -> . num_term
    (44) num_term -> . OPENPAR num_exp CLOSEPAR
    (45) num_term -> . num_val
    (46) num_val -> . INT_LIT
    (47) num_val -> . DOUBLE_LIT
    (48) num_val -> . COLUMN_NAME

    OPENPAR         shift and go to state 34
    INT_LIT         shift and go to state 41
    DOUBLE_LIT      shift and go to state 45
    COLUMN_NAME     shift and go to state 35

    num_term                       shift and go to state 37
    num_exp                        shift and go to state 88
    num_val                        shift and go to state 43
    num_factor                     shift and go to state 36

state 60

    (39) num_factor -> num_factor ASTERISK . num_term
    (44) num_term -> . OPENPAR num_exp CLOSEPAR
    (45) num_term -> . num_val
    (46) num_val -> . INT_LIT
    (47) num_val -> . DOUBLE_LIT
    (48) num_val -> . COLUMN_NAME

    OPENPAR         shift and go to state 34
    INT_LIT         shift and go to state 41
    DOUBLE_LIT      shift and go to state 45
    COLUMN_NAME     shift and go to state 35

    num_term                       shift and go to state 89
    num_val                        shift and go to state 43

state 61

    (42) num_factor -> num_factor MODULO . num_term
    (44) num_term -> . OPENPAR num_exp CLOSEPAR
    (45) num_term -> . num_val
    (46) num_val -> . INT_LIT
    (47) num_val -> . DOUBLE_LIT
    (48) num_val -> . COLUMN_NAME

    OPENPAR         shift and go to state 34
    INT_LIT         shift and go to state 41
    DOUBLE_LIT      shift and go to state 45
    COLUMN_NAME     shift and go to state 35

    num_term                       shift and go to state 90
    num_val                        shift and go to state 43

state 62

    (41) num_factor -> num_factor DIVIDE_INT . num_term
    (44) num_term -> . OPENPAR num_exp CLOSEPAR
    (45) num_term -> . num_val
    (46) num_val -> . INT_LIT
    (47) num_val -> . DOUBLE_LIT
    (48) num_val -> . COLUMN_NAME

    OPENPAR         shift and go to state 34
    INT_LIT         shift and go to state 41
    DOUBLE_LIT      shift and go to state 45
    COLUMN_NAME     shift and go to state 35

    num_term                       shift and go to state 91
    num_val                        shift and go to state 43

state 63

    (40) num_factor -> num_factor DIVIDE . num_term
    (44) num_term -> . OPENPAR num_exp CLOSEPAR
    (45) num_term -> . num_val
    (46) num_val -> . INT_LIT
    (47) num_val -> . DOUBLE_LIT
    (48) num_val -> . COLUMN_NAME

    OPENPAR         shift and go to state 34
    INT_LIT         shift and go to state 41
    DOUBLE_LIT      shift and go to state 45
    COLUMN_NAME     shift and go to state 35

    num_term                       shift and go to state 92
    num_val                        shift and go to state 43

state 64

    (49) comparison_op -> GE .

    OPENPAR         reduce using rule 49 (comparison_op -> GE .)
    INT_LIT         reduce using rule 49 (comparison_op -> GE .)
    DOUBLE_LIT      reduce using rule 49 (comparison_op -> GE .)
    COLUMN_NAME     reduce using rule 49 (comparison_op -> GE .)


state 65

    (54) comparison_op -> EQUAL .

    OPENPAR         reduce using rule 54 (comparison_op -> EQUAL .)
    INT_LIT         reduce using rule 54 (comparison_op -> EQUAL .)
    DOUBLE_LIT      reduce using rule 54 (comparison_op -> EQUAL .)
    COLUMN_NAME     reduce using rule 54 (comparison_op -> EQUAL .)


state 66

    (34) num_cond -> num_exp NOT . NULL

    NULL            shift and go to state 93


state 67

    (55) comparison_op -> EQUAL_NULL .

    OPENPAR         reduce using rule 55 (comparison_op -> EQUAL_NULL .)
    INT_LIT         reduce using rule 55 (comparison_op -> EQUAL_NULL .)
    DOUBLE_LIT      reduce using rule 55 (comparison_op -> EQUAL_NULL .)
    COLUMN_NAME     reduce using rule 55 (comparison_op -> EQUAL_NULL .)


state 68

    (51) comparison_op -> LE .

    OPENPAR         reduce using rule 51 (comparison_op -> LE .)
    INT_LIT         reduce using rule 51 (comparison_op -> LE .)
    DOUBLE_LIT      reduce using rule 51 (comparison_op -> LE .)
    COLUMN_NAME     reduce using rule 51 (comparison_op -> LE .)


state 69

    (50) comparison_op -> GT .

    OPENPAR         reduce using rule 50 (comparison_op -> GT .)
    INT_LIT         reduce using rule 50 (comparison_op -> GT .)
    DOUBLE_LIT      reduce using rule 50 (comparison_op -> GT .)
    COLUMN_NAME     reduce using rule 50 (comparison_op -> GT .)


state 70

    (32) num_cond -> num_exp comparison_op . num_exp
    (36) num_exp -> . num_exp ADD num_factor
    (37) num_exp -> . num_factor SUBTRACT num_exp
    (38) num_exp -> . num_factor
    (39) num_factor -> . num_factor ASTERISK num_term
    (40) num_factor -> . num_factor DIVIDE num_term
    (41) num_factor -> . num_factor DIVIDE_INT num_term
    (42) num_factor -> . num_factor MODULO num_term
    (43) num_factor -> . num_term
    (44) num_term -> . OPENPAR num_exp CLOSEPAR
    (45) num_term -> . num_val
    (46) num_val -> . INT_LIT
    (47) num_val -> . DOUBLE_LIT
    (48) num_val -> . COLUMN_NAME

    OPENPAR         shift and go to state 34
    INT_LIT         shift and go to state 41
    DOUBLE_LIT      shift and go to state 45
    COLUMN_NAME     shift and go to state 35

    num_term                       shift and go to state 37
    num_exp                        shift and go to state 94
    num_val                        shift and go to state 43
    num_factor                     shift and go to state 36

state 71

    (35) num_cond -> num_exp IS . NULL

    NULL            shift and go to state 95


state 72

    (33) num_cond -> num_exp BETWEEN . num_exp AND num_exp
    (36) num_exp -> . num_exp ADD num_factor
    (37) num_exp -> . num_factor SUBTRACT num_exp
    (38) num_exp -> . num_factor
    (39) num_factor -> . num_factor ASTERISK num_term
    (40) num_factor -> . num_factor DIVIDE num_term
    (41) num_factor -> . num_factor DIVIDE_INT num_term
    (42) num_factor -> . num_factor MODULO num_term
    (43) num_factor -> . num_term
    (44) num_term -> . OPENPAR num_exp CLOSEPAR
    (45) num_term -> . num_val
    (46) num_val -> . INT_LIT
    (47) num_val -> . DOUBLE_LIT
    (48) num_val -> . COLUMN_NAME

    OPENPAR         shift and go to state 34
    INT_LIT         shift and go to state 41
    DOUBLE_LIT      shift and go to state 45
    COLUMN_NAME     shift and go to state 35

    num_term                       shift and go to state 37
    num_exp                        shift and go to state 96
    num_val                        shift and go to state 43
    num_factor                     shift and go to state 36

state 73

    (36) num_exp -> num_exp ADD . num_factor
    (39) num_factor -> . num_factor ASTERISK num_term
    (40) num_factor -> . num_factor DIVIDE num_term
    (41) num_factor -> . num_factor DIVIDE_INT num_term
    (42) num_factor -> . num_factor MODULO num_term
    (43) num_factor -> . num_term
    (44) num_term -> . OPENPAR num_exp CLOSEPAR
    (45) num_term -> . num_val
    (46) num_val -> . INT_LIT
    (47) num_val -> . DOUBLE_LIT
    (48) num_val -> . COLUMN_NAME

    OPENPAR         shift and go to state 34
    INT_LIT         shift and go to state 41
    DOUBLE_LIT      shift and go to state 45
    COLUMN_NAME     shift and go to state 35

    num_term                       shift and go to state 37
    num_val                        shift and go to state 43
    num_factor                     shift and go to state 97

state 74

    (53) comparison_op -> NE .

    OPENPAR         reduce using rule 53 (comparison_op -> NE .)
    INT_LIT         reduce using rule 53 (comparison_op -> NE .)
    DOUBLE_LIT      reduce using rule 53 (comparison_op -> NE .)
    COLUMN_NAME     reduce using rule 53 (comparison_op -> NE .)


state 75

    (52) comparison_op -> LT .

    OPENPAR         reduce using rule 52 (comparison_op -> LT .)
    INT_LIT         reduce using rule 52 (comparison_op -> LT .)
    DOUBLE_LIT      reduce using rule 52 (comparison_op -> LT .)
    COLUMN_NAME     reduce using rule 52 (comparison_op -> LT .)


state 76

    (26) condition -> NOT OPENPAR . string_cond CLOSEPAR
    (27) condition -> NOT OPENPAR . num_cond CLOSEPAR
    (28) string_cond -> . string_exp LIKE string_exp
    (29) string_cond -> . string_exp NOT LIKE string_exp
    (30) string_cond -> . STRCMP OPENPAR string_exp COMMA string_exp CLOSEPAR
    (32) num_cond -> . num_exp comparison_op num_exp
    (33) num_cond -> . num_exp BETWEEN num_exp AND num_exp
    (34) num_cond -> . num_exp NOT NULL
    (35) num_cond -> . num_exp IS NULL
    (31) string_exp -> . STRING_LIT
    (36) num_exp -> . num_exp ADD num_factor
    (37) num_exp -> . num_factor SUBTRACT num_exp
    (38) num_exp -> . num_factor
    (39) num_factor -> . num_factor ASTERISK num_term
    (40) num_factor -> . num_factor DIVIDE num_term
    (41) num_factor -> . num_factor DIVIDE_INT num_term
    (42) num_factor -> . num_factor MODULO num_term
    (43) num_factor -> . num_term
    (44) num_term -> . OPENPAR num_exp CLOSEPAR
    (45) num_term -> . num_val
    (46) num_val -> . INT_LIT
    (47) num_val -> . DOUBLE_LIT
    (48) num_val -> . COLUMN_NAME

    STRCMP          shift and go to state 31
    STRING_LIT      shift and go to state 33
    OPENPAR         shift and go to state 34
    INT_LIT         shift and go to state 41
    DOUBLE_LIT      shift and go to state 45
    COLUMN_NAME     shift and go to state 35

    num_cond                       shift and go to state 99
    num_exp                        shift and go to state 38
    string_cond                    shift and go to state 98
    string_exp                     shift and go to state 44
    num_factor                     shift and go to state 36
    num_term                       shift and go to state 37
    num_val                        shift and go to state 43

state 77

    (10) delete_statement -> DELETE FROM TABLE_NAME WHERE condition SEMICOLON .

    $end            reduce using rule 10 (delete_statement -> DELETE FROM TABLE_NAME WHERE condition SEMICOLON .)


state 78

    (29) string_cond -> string_exp NOT . LIKE string_exp

    LIKE            shift and go to state 100


state 79

    (28) string_cond -> string_exp LIKE . string_exp
    (31) string_exp -> . STRING_LIT

    STRING_LIT      shift and go to state 33

    string_exp                     shift and go to state 101

state 80

    (8) select_statement -> SELECT columns FROM TABLE_NAME WHERE condition . SEMICOLON

    SEMICOLON       shift and go to state 102


state 81

    (5) insert_statement -> INSERT into_kw TABLE_NAME OPENPAR column_name CLOSEPAR VALUES . OPENPAR value_list CLOSEPAR SEMICOLON

    OPENPAR         shift and go to state 103


state 82

    (20) value_list -> value_list COMMA . literals
    (21) literals -> . STRING_LIT
    (22) literals -> . INT_LIT
    (23) literals -> . DOUBLE_LIT

    STRING_LIT      shift and go to state 50
    INT_LIT         shift and go to state 49
    DOUBLE_LIT      shift and go to state 52

    literals                       shift and go to state 104

state 83

    (4) insert_statement -> INSERT into_kw TABLE_NAME VALUES OPENPAR value_list CLOSEPAR . SEMICOLON

    SEMICOLON       shift and go to state 105


state 84

    (18) assignment_list -> assignment_list COMMA COLUMN_NAME . EQUAL literals

    EQUAL           shift and go to state 106


state 85

    (17) assignment_list -> COLUMN_NAME EQUAL literals .

    SEMICOLON       reduce using rule 17 (assignment_list -> COLUMN_NAME EQUAL literals .)
    COMMA           reduce using rule 17 (assignment_list -> COLUMN_NAME EQUAL literals .)


state 86

    (30) string_cond -> STRCMP OPENPAR string_exp . COMMA string_exp CLOSEPAR

    COMMA           shift and go to state 107


state 87

    (44) num_term -> OPENPAR num_exp CLOSEPAR .

    SUBTRACT        reduce using rule 44 (num_term -> OPENPAR num_exp CLOSEPAR .)
    ASTERISK        reduce using rule 44 (num_term -> OPENPAR num_exp CLOSEPAR .)
    DIVIDE          reduce using rule 44 (num_term -> OPENPAR num_exp CLOSEPAR .)
    DIVIDE_INT      reduce using rule 44 (num_term -> OPENPAR num_exp CLOSEPAR .)
    MODULO          reduce using rule 44 (num_term -> OPENPAR num_exp CLOSEPAR .)
    ADD             reduce using rule 44 (num_term -> OPENPAR num_exp CLOSEPAR .)
    BETWEEN         reduce using rule 44 (num_term -> OPENPAR num_exp CLOSEPAR .)
    NOT             reduce using rule 44 (num_term -> OPENPAR num_exp CLOSEPAR .)
    IS              reduce using rule 44 (num_term -> OPENPAR num_exp CLOSEPAR .)
    GE              reduce using rule 44 (num_term -> OPENPAR num_exp CLOSEPAR .)
    GT              reduce using rule 44 (num_term -> OPENPAR num_exp CLOSEPAR .)
    LE              reduce using rule 44 (num_term -> OPENPAR num_exp CLOSEPAR .)
    LT              reduce using rule 44 (num_term -> OPENPAR num_exp CLOSEPAR .)
    NE              reduce using rule 44 (num_term -> OPENPAR num_exp CLOSEPAR .)
    EQUAL           reduce using rule 44 (num_term -> OPENPAR num_exp CLOSEPAR .)
    EQUAL_NULL      reduce using rule 44 (num_term -> OPENPAR num_exp CLOSEPAR .)
    CLOSEPAR        reduce using rule 44 (num_term -> OPENPAR num_exp CLOSEPAR .)
    SEMICOLON       reduce using rule 44 (num_term -> OPENPAR num_exp CLOSEPAR .)
    AND             reduce using rule 44 (num_term -> OPENPAR num_exp CLOSEPAR .)


state 88

    (37) num_exp -> num_factor SUBTRACT num_exp .
    (36) num_exp -> num_exp . ADD num_factor

    ADD             reduce using rule 37 (num_exp -> num_factor SUBTRACT num_exp .)
    SEMICOLON       reduce using rule 37 (num_exp -> num_factor SUBTRACT num_exp .)
    CLOSEPAR        reduce using rule 37 (num_exp -> num_factor SUBTRACT num_exp .)
    BETWEEN         reduce using rule 37 (num_exp -> num_factor SUBTRACT num_exp .)
    NOT             reduce using rule 37 (num_exp -> num_factor SUBTRACT num_exp .)
    IS              reduce using rule 37 (num_exp -> num_factor SUBTRACT num_exp .)
    GE              reduce using rule 37 (num_exp -> num_factor SUBTRACT num_exp .)
    GT              reduce using rule 37 (num_exp -> num_factor SUBTRACT num_exp .)
    LE              reduce using rule 37 (num_exp -> num_factor SUBTRACT num_exp .)
    LT              reduce using rule 37 (num_exp -> num_factor SUBTRACT num_exp .)
    NE              reduce using rule 37 (num_exp -> num_factor SUBTRACT num_exp .)
    EQUAL           reduce using rule 37 (num_exp -> num_factor SUBTRACT num_exp .)
    EQUAL_NULL      reduce using rule 37 (num_exp -> num_factor SUBTRACT num_exp .)
    AND             reduce using rule 37 (num_exp -> num_factor SUBTRACT num_exp .)

  ! ADD             [ shift and go to state 73 ]


state 89

    (39) num_factor -> num_factor ASTERISK num_term .

    SUBTRACT        reduce using rule 39 (num_factor -> num_factor ASTERISK num_term .)
    ASTERISK        reduce using rule 39 (num_factor -> num_factor ASTERISK num_term .)
    DIVIDE          reduce using rule 39 (num_factor -> num_factor ASTERISK num_term .)
    DIVIDE_INT      reduce using rule 39 (num_factor -> num_factor ASTERISK num_term .)
    MODULO          reduce using rule 39 (num_factor -> num_factor ASTERISK num_term .)
    ADD             reduce using rule 39 (num_factor -> num_factor ASTERISK num_term .)
    SEMICOLON       reduce using rule 39 (num_factor -> num_factor ASTERISK num_term .)
    CLOSEPAR        reduce using rule 39 (num_factor -> num_factor ASTERISK num_term .)
    BETWEEN         reduce using rule 39 (num_factor -> num_factor ASTERISK num_term .)
    NOT             reduce using rule 39 (num_factor -> num_factor ASTERISK num_term .)
    IS              reduce using rule 39 (num_factor -> num_factor ASTERISK num_term .)
    GE              reduce using rule 39 (num_factor -> num_factor ASTERISK num_term .)
    GT              reduce using rule 39 (num_factor -> num_factor ASTERISK num_term .)
    LE              reduce using rule 39 (num_factor -> num_factor ASTERISK num_term .)
    LT              reduce using rule 39 (num_factor -> num_factor ASTERISK num_term .)
    NE              reduce using rule 39 (num_factor -> num_factor ASTERISK num_term .)
    EQUAL           reduce using rule 39 (num_factor -> num_factor ASTERISK num_term .)
    EQUAL_NULL      reduce using rule 39 (num_factor -> num_factor ASTERISK num_term .)
    AND             reduce using rule 39 (num_factor -> num_factor ASTERISK num_term .)


state 90

    (42) num_factor -> num_factor MODULO num_term .

    SUBTRACT        reduce using rule 42 (num_factor -> num_factor MODULO num_term .)
    ASTERISK        reduce using rule 42 (num_factor -> num_factor MODULO num_term .)
    DIVIDE          reduce using rule 42 (num_factor -> num_factor MODULO num_term .)
    DIVIDE_INT      reduce using rule 42 (num_factor -> num_factor MODULO num_term .)
    MODULO          reduce using rule 42 (num_factor -> num_factor MODULO num_term .)
    ADD             reduce using rule 42 (num_factor -> num_factor MODULO num_term .)
    SEMICOLON       reduce using rule 42 (num_factor -> num_factor MODULO num_term .)
    CLOSEPAR        reduce using rule 42 (num_factor -> num_factor MODULO num_term .)
    BETWEEN         reduce using rule 42 (num_factor -> num_factor MODULO num_term .)
    NOT             reduce using rule 42 (num_factor -> num_factor MODULO num_term .)
    IS              reduce using rule 42 (num_factor -> num_factor MODULO num_term .)
    GE              reduce using rule 42 (num_factor -> num_factor MODULO num_term .)
    GT              reduce using rule 42 (num_factor -> num_factor MODULO num_term .)
    LE              reduce using rule 42 (num_factor -> num_factor MODULO num_term .)
    LT              reduce using rule 42 (num_factor -> num_factor MODULO num_term .)
    NE              reduce using rule 42 (num_factor -> num_factor MODULO num_term .)
    EQUAL           reduce using rule 42 (num_factor -> num_factor MODULO num_term .)
    EQUAL_NULL      reduce using rule 42 (num_factor -> num_factor MODULO num_term .)
    AND             reduce using rule 42 (num_factor -> num_factor MODULO num_term .)


state 91

    (41) num_factor -> num_factor DIVIDE_INT num_term .

    SUBTRACT        reduce using rule 41 (num_factor -> num_factor DIVIDE_INT num_term .)
    ASTERISK        reduce using rule 41 (num_factor -> num_factor DIVIDE_INT num_term .)
    DIVIDE          reduce using rule 41 (num_factor -> num_factor DIVIDE_INT num_term .)
    DIVIDE_INT      reduce using rule 41 (num_factor -> num_factor DIVIDE_INT num_term .)
    MODULO          reduce using rule 41 (num_factor -> num_factor DIVIDE_INT num_term .)
    ADD             reduce using rule 41 (num_factor -> num_factor DIVIDE_INT num_term .)
    SEMICOLON       reduce using rule 41 (num_factor -> num_factor DIVIDE_INT num_term .)
    CLOSEPAR        reduce using rule 41 (num_factor -> num_factor DIVIDE_INT num_term .)
    BETWEEN         reduce using rule 41 (num_factor -> num_factor DIVIDE_INT num_term .)
    NOT             reduce using rule 41 (num_factor -> num_factor DIVIDE_INT num_term .)
    IS              reduce using rule 41 (num_factor -> num_factor DIVIDE_INT num_term .)
    GE              reduce using rule 41 (num_factor -> num_factor DIVIDE_INT num_term .)
    GT              reduce using rule 41 (num_factor -> num_factor DIVIDE_INT num_term .)
    LE              reduce using rule 41 (num_factor -> num_factor DIVIDE_INT num_term .)
    LT              reduce using rule 41 (num_factor -> num_factor DIVIDE_INT num_term .)
    NE              reduce using rule 41 (num_factor -> num_factor DIVIDE_INT num_term .)
    EQUAL           reduce using rule 41 (num_factor -> num_factor DIVIDE_INT num_term .)
    EQUAL_NULL      reduce using rule 41 (num_factor -> num_factor DIVIDE_INT num_term .)
    AND             reduce using rule 41 (num_factor -> num_factor DIVIDE_INT num_term .)


state 92

    (40) num_factor -> num_factor DIVIDE num_term .

    SUBTRACT        reduce using rule 40 (num_factor -> num_factor DIVIDE num_term .)
    ASTERISK        reduce using rule 40 (num_factor -> num_factor DIVIDE num_term .)
    DIVIDE          reduce using rule 40 (num_factor -> num_factor DIVIDE num_term .)
    DIVIDE_INT      reduce using rule 40 (num_factor -> num_factor DIVIDE num_term .)
    MODULO          reduce using rule 40 (num_factor -> num_factor DIVIDE num_term .)
    ADD             reduce using rule 40 (num_factor -> num_factor DIVIDE num_term .)
    SEMICOLON       reduce using rule 40 (num_factor -> num_factor DIVIDE num_term .)
    CLOSEPAR        reduce using rule 40 (num_factor -> num_factor DIVIDE num_term .)
    BETWEEN         reduce using rule 40 (num_factor -> num_factor DIVIDE num_term .)
    NOT             reduce using rule 40 (num_factor -> num_factor DIVIDE num_term .)
    IS              reduce using rule 40 (num_factor -> num_factor DIVIDE num_term .)
    GE              reduce using rule 40 (num_factor -> num_factor DIVIDE num_term .)
    GT              reduce using rule 40 (num_factor -> num_factor DIVIDE num_term .)
    LE              reduce using rule 40 (num_factor -> num_factor DIVIDE num_term .)
    LT              reduce using rule 40 (num_factor -> num_factor DIVIDE num_term .)
    NE              reduce using rule 40 (num_factor -> num_factor DIVIDE num_term .)
    EQUAL           reduce using rule 40 (num_factor -> num_factor DIVIDE num_term .)
    EQUAL_NULL      reduce using rule 40 (num_factor -> num_factor DIVIDE num_term .)
    AND             reduce using rule 40 (num_factor -> num_factor DIVIDE num_term .)


state 93

    (34) num_cond -> num_exp NOT NULL .

    SEMICOLON       reduce using rule 34 (num_cond -> num_exp NOT NULL .)
    CLOSEPAR        reduce using rule 34 (num_cond -> num_exp NOT NULL .)


state 94

    (32) num_cond -> num_exp comparison_op num_exp .
    (36) num_exp -> num_exp . ADD num_factor

    SEMICOLON       reduce using rule 32 (num_cond -> num_exp comparison_op num_exp .)
    CLOSEPAR        reduce using rule 32 (num_cond -> num_exp comparison_op num_exp .)
    ADD             shift and go to state 73


state 95

    (35) num_cond -> num_exp IS NULL .

    SEMICOLON       reduce using rule 35 (num_cond -> num_exp IS NULL .)
    CLOSEPAR        reduce using rule 35 (num_cond -> num_exp IS NULL .)


state 96

    (33) num_cond -> num_exp BETWEEN num_exp . AND num_exp
    (36) num_exp -> num_exp . ADD num_factor

    AND             shift and go to state 108
    ADD             shift and go to state 73


state 97

    (36) num_exp -> num_exp ADD num_factor .
    (39) num_factor -> num_factor . ASTERISK num_term
    (40) num_factor -> num_factor . DIVIDE num_term
    (41) num_factor -> num_factor . DIVIDE_INT num_term
    (42) num_factor -> num_factor . MODULO num_term

    ADD             reduce using rule 36 (num_exp -> num_exp ADD num_factor .)
    SEMICOLON       reduce using rule 36 (num_exp -> num_exp ADD num_factor .)
    CLOSEPAR        reduce using rule 36 (num_exp -> num_exp ADD num_factor .)
    BETWEEN         reduce using rule 36 (num_exp -> num_exp ADD num_factor .)
    NOT             reduce using rule 36 (num_exp -> num_exp ADD num_factor .)
    IS              reduce using rule 36 (num_exp -> num_exp ADD num_factor .)
    GE              reduce using rule 36 (num_exp -> num_exp ADD num_factor .)
    GT              reduce using rule 36 (num_exp -> num_exp ADD num_factor .)
    LE              reduce using rule 36 (num_exp -> num_exp ADD num_factor .)
    LT              reduce using rule 36 (num_exp -> num_exp ADD num_factor .)
    NE              reduce using rule 36 (num_exp -> num_exp ADD num_factor .)
    EQUAL           reduce using rule 36 (num_exp -> num_exp ADD num_factor .)
    EQUAL_NULL      reduce using rule 36 (num_exp -> num_exp ADD num_factor .)
    AND             reduce using rule 36 (num_exp -> num_exp ADD num_factor .)
    ASTERISK        shift and go to state 60
    DIVIDE          shift and go to state 63
    DIVIDE_INT      shift and go to state 62
    MODULO          shift and go to state 61


state 98

    (26) condition -> NOT OPENPAR string_cond . CLOSEPAR

    CLOSEPAR        shift and go to state 109


state 99

    (27) condition -> NOT OPENPAR num_cond . CLOSEPAR

    CLOSEPAR        shift and go to state 110


state 100

    (29) string_cond -> string_exp NOT LIKE . string_exp
    (31) string_exp -> . STRING_LIT

    STRING_LIT      shift and go to state 33

    string_exp                     shift and go to state 111

state 101

    (28) string_cond -> string_exp LIKE string_exp .

    SEMICOLON       reduce using rule 28 (string_cond -> string_exp LIKE string_exp .)
    CLOSEPAR        reduce using rule 28 (string_cond -> string_exp LIKE string_exp .)


state 102

    (8) select_statement -> SELECT columns FROM TABLE_NAME WHERE condition SEMICOLON .

    $end            reduce using rule 8 (select_statement -> SELECT columns FROM TABLE_NAME WHERE condition SEMICOLON .)


state 103

    (5) insert_statement -> INSERT into_kw TABLE_NAME OPENPAR column_name CLOSEPAR VALUES OPENPAR . value_list CLOSEPAR SEMICOLON
    (19) value_list -> . literals
    (20) value_list -> . value_list COMMA literals
    (21) literals -> . STRING_LIT
    (22) literals -> . INT_LIT
    (23) literals -> . DOUBLE_LIT

    STRING_LIT      shift and go to state 50
    INT_LIT         shift and go to state 49
    DOUBLE_LIT      shift and go to state 52

    literals                       shift and go to state 51
    value_list                     shift and go to state 112

state 104

    (20) value_list -> value_list COMMA literals .

    CLOSEPAR        reduce using rule 20 (value_list -> value_list COMMA literals .)
    COMMA           reduce using rule 20 (value_list -> value_list COMMA literals .)


state 105

    (4) insert_statement -> INSERT into_kw TABLE_NAME VALUES OPENPAR value_list CLOSEPAR SEMICOLON .

    $end            reduce using rule 4 (insert_statement -> INSERT into_kw TABLE_NAME VALUES OPENPAR value_list CLOSEPAR SEMICOLON .)


state 106

    (18) assignment_list -> assignment_list COMMA COLUMN_NAME EQUAL . literals
    (21) literals -> . STRING_LIT
    (22) literals -> . INT_LIT
    (23) literals -> . DOUBLE_LIT

    STRING_LIT      shift and go to state 50
    INT_LIT         shift and go to state 49
    DOUBLE_LIT      shift and go to state 52

    literals                       shift and go to state 113

state 107

    (30) string_cond -> STRCMP OPENPAR string_exp COMMA . string_exp CLOSEPAR
    (31) string_exp -> . STRING_LIT

    STRING_LIT      shift and go to state 33

    string_exp                     shift and go to state 114

state 108

    (33) num_cond -> num_exp BETWEEN num_exp AND . num_exp
    (36) num_exp -> . num_exp ADD num_factor
    (37) num_exp -> . num_factor SUBTRACT num_exp
    (38) num_exp -> . num_factor
    (39) num_factor -> . num_factor ASTERISK num_term
    (40) num_factor -> . num_factor DIVIDE num_term
    (41) num_factor -> . num_factor DIVIDE_INT num_term
    (42) num_factor -> . num_factor MODULO num_term
    (43) num_factor -> . num_term
    (44) num_term -> . OPENPAR num_exp CLOSEPAR
    (45) num_term -> . num_val
    (46) num_val -> . INT_LIT
    (47) num_val -> . DOUBLE_LIT
    (48) num_val -> . COLUMN_NAME

    OPENPAR         shift and go to state 34
    INT_LIT         shift and go to state 41
    DOUBLE_LIT      shift and go to state 45
    COLUMN_NAME     shift and go to state 35

    num_term                       shift and go to state 37
    num_exp                        shift and go to state 115
    num_val                        shift and go to state 43
    num_factor                     shift and go to state 36

state 109

    (26) condition -> NOT OPENPAR string_cond CLOSEPAR .

    SEMICOLON       reduce using rule 26 (condition -> NOT OPENPAR string_cond CLOSEPAR .)


state 110

    (27) condition -> NOT OPENPAR num_cond CLOSEPAR .

    SEMICOLON       reduce using rule 27 (condition -> NOT OPENPAR num_cond CLOSEPAR .)


state 111

    (29) string_cond -> string_exp NOT LIKE string_exp .

    SEMICOLON       reduce using rule 29 (string_cond -> string_exp NOT LIKE string_exp .)
    CLOSEPAR        reduce using rule 29 (string_cond -> string_exp NOT LIKE string_exp .)


state 112

    (5) insert_statement -> INSERT into_kw TABLE_NAME OPENPAR column_name CLOSEPAR VALUES OPENPAR value_list . CLOSEPAR SEMICOLON
    (20) value_list -> value_list . COMMA literals

    CLOSEPAR        shift and go to state 116
    COMMA           shift and go to state 82


state 113

    (18) assignment_list -> assignment_list COMMA COLUMN_NAME EQUAL literals .

    SEMICOLON       reduce using rule 18 (assignment_list -> assignment_list COMMA COLUMN_NAME EQUAL literals .)
    COMMA           reduce using rule 18 (assignment_list -> assignment_list COMMA COLUMN_NAME EQUAL literals .)


state 114

    (30) string_cond -> STRCMP OPENPAR string_exp COMMA string_exp . CLOSEPAR

    CLOSEPAR        shift and go to state 117


state 115

    (33) num_cond -> num_exp BETWEEN num_exp AND num_exp .
    (36) num_exp -> num_exp . ADD num_factor

    SEMICOLON       reduce using rule 33 (num_cond -> num_exp BETWEEN num_exp AND num_exp .)
    CLOSEPAR        reduce using rule 33 (num_cond -> num_exp BETWEEN num_exp AND num_exp .)
    ADD             shift and go to state 73


state 116

    (5) insert_statement -> INSERT into_kw TABLE_NAME OPENPAR column_name CLOSEPAR VALUES OPENPAR value_list CLOSEPAR . SEMICOLON

    SEMICOLON       shift and go to state 118


state 117

    (30) string_cond -> STRCMP OPENPAR string_exp COMMA string_exp CLOSEPAR .

    SEMICOLON       reduce using rule 30 (string_cond -> STRCMP OPENPAR string_exp COMMA string_exp CLOSEPAR .)
    CLOSEPAR        reduce using rule 30 (string_cond -> STRCMP OPENPAR string_exp COMMA string_exp CLOSEPAR .)


state 118

    (5) insert_statement -> INSERT into_kw TABLE_NAME OPENPAR column_name CLOSEPAR VALUES OPENPAR value_list CLOSEPAR SEMICOLON .

    $end            reduce using rule 5 (insert_statement -> INSERT into_kw TABLE_NAME OPENPAR column_name CLOSEPAR VALUES OPENPAR value_list CLOSEPAR SEMICOLON .)

