Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> insert_statement
Rule 2     statement -> select_statement
Rule 3     statement -> delete_statement
Rule 4     insert_statement -> INSERT into_kw TABLE_NAME VALUES OPENPAR value_list CLOSEPAR
Rule 5     insert_statement -> INSERT into_kw TABLE_NAME OPENPAR column_name CLOSEPAR VALUES OPENPAR value_list CLOSEPAR
Rule 6     insert_statement -> INSERT into_kw TABLE_NAME SET assignment_list
Rule 7     select_statement -> SELECT filter_rows_op columns FROM TABLE_NAME SEMICOLON
Rule 8     select_statement -> SELECT filter_rows_op columns FROM TABLE_NAME WHERE condition SEMICOLON
Rule 9     delete_statement -> DELETE FROM TABLE_NAME SEMICOLON
Rule 10    delete_statement -> DELETE FROM TABLE_NAME WHERE condition SEMICOLON
Rule 11    into_kw -> INTO
Rule 12    into_kw -> empty
Rule 13    filter_rows_op -> FILTER_ROWS
Rule 14    filter_rows_op -> empty
Rule 15    columns -> ASTERISK
Rule 16    columns -> column_name
Rule 17    column_name -> COLUMN_NAME
Rule 18    column_name -> column_name COMMA COLUMN_NAME
Rule 19    assignment_list -> COLUMN_NAME EQUAL literals
Rule 20    assignment_list -> assignment_list COMMA COLUMN_NAME EQUAL literals
Rule 21    value_list -> literals
Rule 22    value_list -> value_list COMMA literals
Rule 23    literals -> STRING_LIT
Rule 24    literals -> INT_LIT
Rule 25    literals -> DOUBLE_LIT
Rule 26    literals -> DATE_LIT
Rule 27    condition -> string_cond
Rule 28    condition -> num_cond
Rule 29    condition -> date_cond
Rule 30    condition -> NOT OPENPAR string_cond CLOSEPAR
Rule 31    condition -> NOT OPENPAR num_cond CLOSEPAR
Rule 32    condition -> NOT OPENPAR date_cond CLOSEPAR
Rule 33    string_cond -> string_exp LIKE string_exp
Rule 34    string_cond -> string_exp NOT LIKE string_exp
Rule 35    string_cond -> STRCMP OPENPAR string_exp COMMA string_exp CLOSEPAR
Rule 36    string_exp -> STRING_LIT
Rule 37    num_cond -> num_exp comparison_op num_exp
Rule 38    num_cond -> num_exp BETWEEN num_exp AND num_exp
Rule 39    num_cond -> num_exp NOT NULL
Rule 40    num_cond -> num_exp IS NULL
Rule 41    num_exp -> num_exp ADD num_factor
Rule 42    num_exp -> num_exp SUBTRACT num_factor
Rule 43    num_exp -> num_factor
Rule 44    num_factor -> num_factor MULTIPLY num_term
Rule 45    num_factor -> num_factor DIVIDE num_term
Rule 46    num_factor -> num_factor DIVIDE_INT num_term
Rule 47    num_factor -> num_factor MODULO num_term
Rule 48    num_factor -> num_term
Rule 49    num_term -> OPENPAR num_val CLOSEPAR
Rule 50    num_term -> num_val
Rule 51    num_val -> INT_LIT
Rule 52    num_val -> DOUBLE_LIT
Rule 53    num_val -> COLUMN_NAME
Rule 54    date_cond -> date_exp comparison_op date_exp
Rule 55    date_cond -> date_exp
Rule 56    date_exp -> date_function
Rule 57    date_exp -> DATE_LIT
Rule 58    date_function -> ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR
Rule 59    date_function -> CURDATE OPENPAR CLOSEPAR
Rule 60    date_function -> CURRENT_DATE OPENPAR CLOSEPAR
Rule 61    date_function -> CURRENT_DATE
Rule 62    date_function -> DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR
Rule 63    date_function -> DAY OPENPAR date_exp CLOSEPAR
Rule 64    date_function -> DAYNAME OPENPAR date_exp CLOSEPAR
Rule 65    date_function -> DAYOFMONTH OPENPAR date_exp CLOSEPAR
Rule 66    date_function -> DAYOFWEEK OPENPAR date_exp CLOSEPAR
Rule 67    date_function -> DAYOFYEAR OPENPAR date_exp CLOSEPAR
Rule 68    date_function -> LAST_DAY OPENPAR date_exp CLOSEPAR
Rule 69    date_function -> MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR
Rule 70    date_function -> MONTH OPENPAR date_exp CLOSEPAR
Rule 71    date_function -> MONTHNAME OPENPAR date_exp CLOSEPAR
Rule 72    date_function -> SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR
Rule 73    date_function -> YEAR OPENPAR date_exp CLOSEPAR
Rule 74    comparison_op -> GE
Rule 75    comparison_op -> GT
Rule 76    comparison_op -> LE
Rule 77    comparison_op -> LT
Rule 78    comparison_op -> NE
Rule 79    comparison_op -> EQUAL
Rule 80    comparison_op -> EQUAL_NULL
Rule 81    empty -> <empty>

Terminals, with rules where they appear

ADD                  : 41
ADDDATE              : 58
AND                  : 38
ASTERISK             : 15
BETWEEN              : 38
CLOSEPAR             : 4 5 5 30 31 32 35 49 58 59 60 62 63 64 65 66 67 68 69 70 71 72 73
COLUMN_NAME          : 17 18 19 20 53
COMMA                : 18 20 22 35 58 62 69 72
CURDATE              : 59
CURRENT_DATE         : 60 61
DATEDIFF             : 62
DATE_LIT             : 26 57
DATE_UNIT            : 72
DAY                  : 63
DAYNAME              : 64
DAYOFMONTH           : 65
DAYOFWEEK            : 66
DAYOFYEAR            : 67
DELETE               : 9 10
DIVIDE               : 45
DIVIDE_INT           : 46
DOUBLE_LIT           : 25 52
EQUAL                : 19 20 79
EQUAL_NULL           : 80
FILTER_ROWS          : 13
FROM                 : 7 8 9 10
GE                   : 74
GT                   : 75
INSERT               : 4 5 6
INTERVAL             : 72
INTO                 : 11
INT_LIT              : 24 51
IS                   : 40
LAST_DAY             : 68
LE                   : 76
LIKE                 : 33 34
LT                   : 77
MAKEDATE             : 69
MODULO               : 47
MONTH                : 70
MONTHNAME            : 71
MULTIPLY             : 44
NE                   : 78
NOT                  : 30 31 32 34 39
NULL                 : 39 40
OPENPAR              : 4 5 5 30 31 32 35 49 58 59 60 62 63 64 65 66 67 68 69 70 71 72 73
SELECT               : 7 8
SEMICOLON            : 7 8 9 10
SET                  : 6
STRCMP               : 35
STRING_LIT           : 23 36
SUBDATE              : 72
SUBTRACT             : 42
TABLE_NAME           : 4 5 6 7 8 9 10
VALUES               : 4 5
WHERE                : 8 10
YEAR                 : 73
error                : 

Nonterminals, with rules where they appear

assignment_list      : 6 20
column_name          : 5 16 18
columns              : 7 8
comparison_op        : 37 54
condition            : 8 10
date_cond            : 29 32
date_exp             : 54 54 55 58 58 62 62 63 64 65 66 67 68 70 71 72 73
date_function        : 56
delete_statement     : 3
empty                : 12 14
filter_rows_op       : 7 8
insert_statement     : 1
into_kw              : 4 5 6
literals             : 19 20 21 22
num_cond             : 28 31
num_exp              : 37 37 38 38 38 39 40 41 42 69 69 72
num_factor           : 41 42 43 44 45 46 47
num_term             : 44 45 46 47 48
num_val              : 49 50
select_statement     : 2
statement            : 0
string_cond          : 27 30
string_exp           : 33 33 34 34 35 35
value_list           : 4 5 22

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . insert_statement
    (2) statement -> . select_statement
    (3) statement -> . delete_statement
    (4) insert_statement -> . INSERT into_kw TABLE_NAME VALUES OPENPAR value_list CLOSEPAR
    (5) insert_statement -> . INSERT into_kw TABLE_NAME OPENPAR column_name CLOSEPAR VALUES OPENPAR value_list CLOSEPAR
    (6) insert_statement -> . INSERT into_kw TABLE_NAME SET assignment_list
    (7) select_statement -> . SELECT filter_rows_op columns FROM TABLE_NAME SEMICOLON
    (8) select_statement -> . SELECT filter_rows_op columns FROM TABLE_NAME WHERE condition SEMICOLON
    (9) delete_statement -> . DELETE FROM TABLE_NAME SEMICOLON
    (10) delete_statement -> . DELETE FROM TABLE_NAME WHERE condition SEMICOLON

    INSERT          shift and go to state 5
    SELECT          shift and go to state 4
    DELETE          shift and go to state 1

    delete_statement               shift and go to state 3
    insert_statement               shift and go to state 6
    statement                      shift and go to state 7
    select_statement               shift and go to state 2

state 1

    (9) delete_statement -> DELETE . FROM TABLE_NAME SEMICOLON
    (10) delete_statement -> DELETE . FROM TABLE_NAME WHERE condition SEMICOLON

    FROM            shift and go to state 8


state 2

    (2) statement -> select_statement .

    $end            reduce using rule 2 (statement -> select_statement .)


state 3

    (3) statement -> delete_statement .

    $end            reduce using rule 3 (statement -> delete_statement .)


state 4

    (7) select_statement -> SELECT . filter_rows_op columns FROM TABLE_NAME SEMICOLON
    (8) select_statement -> SELECT . filter_rows_op columns FROM TABLE_NAME WHERE condition SEMICOLON
    (13) filter_rows_op -> . FILTER_ROWS
    (14) filter_rows_op -> . empty
    (81) empty -> .

    FILTER_ROWS     shift and go to state 11
    ASTERISK        reduce using rule 81 (empty -> .)
    COLUMN_NAME     reduce using rule 81 (empty -> .)

    filter_rows_op                 shift and go to state 9
    empty                          shift and go to state 10

state 5

    (4) insert_statement -> INSERT . into_kw TABLE_NAME VALUES OPENPAR value_list CLOSEPAR
    (5) insert_statement -> INSERT . into_kw TABLE_NAME OPENPAR column_name CLOSEPAR VALUES OPENPAR value_list CLOSEPAR
    (6) insert_statement -> INSERT . into_kw TABLE_NAME SET assignment_list
    (11) into_kw -> . INTO
    (12) into_kw -> . empty
    (81) empty -> .

    INTO            shift and go to state 14
    TABLE_NAME      reduce using rule 81 (empty -> .)

    empty                          shift and go to state 12
    into_kw                        shift and go to state 13

state 6

    (1) statement -> insert_statement .

    $end            reduce using rule 1 (statement -> insert_statement .)


state 7

    (0) S' -> statement .



state 8

    (9) delete_statement -> DELETE FROM . TABLE_NAME SEMICOLON
    (10) delete_statement -> DELETE FROM . TABLE_NAME WHERE condition SEMICOLON

    TABLE_NAME      shift and go to state 15


state 9

    (7) select_statement -> SELECT filter_rows_op . columns FROM TABLE_NAME SEMICOLON
    (8) select_statement -> SELECT filter_rows_op . columns FROM TABLE_NAME WHERE condition SEMICOLON
    (15) columns -> . ASTERISK
    (16) columns -> . column_name
    (17) column_name -> . COLUMN_NAME
    (18) column_name -> . column_name COMMA COLUMN_NAME

    ASTERISK        shift and go to state 17
    COLUMN_NAME     shift and go to state 18

    column_name                    shift and go to state 16
    columns                        shift and go to state 19

state 10

    (14) filter_rows_op -> empty .

    ASTERISK        reduce using rule 14 (filter_rows_op -> empty .)
    COLUMN_NAME     reduce using rule 14 (filter_rows_op -> empty .)


state 11

    (13) filter_rows_op -> FILTER_ROWS .

    ASTERISK        reduce using rule 13 (filter_rows_op -> FILTER_ROWS .)
    COLUMN_NAME     reduce using rule 13 (filter_rows_op -> FILTER_ROWS .)


state 12

    (12) into_kw -> empty .

    TABLE_NAME      reduce using rule 12 (into_kw -> empty .)


state 13

    (4) insert_statement -> INSERT into_kw . TABLE_NAME VALUES OPENPAR value_list CLOSEPAR
    (5) insert_statement -> INSERT into_kw . TABLE_NAME OPENPAR column_name CLOSEPAR VALUES OPENPAR value_list CLOSEPAR
    (6) insert_statement -> INSERT into_kw . TABLE_NAME SET assignment_list

    TABLE_NAME      shift and go to state 20


state 14

    (11) into_kw -> INTO .

    TABLE_NAME      reduce using rule 11 (into_kw -> INTO .)


state 15

    (9) delete_statement -> DELETE FROM TABLE_NAME . SEMICOLON
    (10) delete_statement -> DELETE FROM TABLE_NAME . WHERE condition SEMICOLON

    SEMICOLON       shift and go to state 22
    WHERE           shift and go to state 21


state 16

    (16) columns -> column_name .
    (18) column_name -> column_name . COMMA COLUMN_NAME

    FROM            reduce using rule 16 (columns -> column_name .)
    COMMA           shift and go to state 23


state 17

    (15) columns -> ASTERISK .

    FROM            reduce using rule 15 (columns -> ASTERISK .)


state 18

    (17) column_name -> COLUMN_NAME .

    COMMA           reduce using rule 17 (column_name -> COLUMN_NAME .)
    FROM            reduce using rule 17 (column_name -> COLUMN_NAME .)
    CLOSEPAR        reduce using rule 17 (column_name -> COLUMN_NAME .)


state 19

    (7) select_statement -> SELECT filter_rows_op columns . FROM TABLE_NAME SEMICOLON
    (8) select_statement -> SELECT filter_rows_op columns . FROM TABLE_NAME WHERE condition SEMICOLON

    FROM            shift and go to state 24


state 20

    (4) insert_statement -> INSERT into_kw TABLE_NAME . VALUES OPENPAR value_list CLOSEPAR
    (5) insert_statement -> INSERT into_kw TABLE_NAME . OPENPAR column_name CLOSEPAR VALUES OPENPAR value_list CLOSEPAR
    (6) insert_statement -> INSERT into_kw TABLE_NAME . SET assignment_list

    VALUES          shift and go to state 26
    OPENPAR         shift and go to state 25
    SET             shift and go to state 27


state 21

    (10) delete_statement -> DELETE FROM TABLE_NAME WHERE . condition SEMICOLON
    (27) condition -> . string_cond
    (28) condition -> . num_cond
    (29) condition -> . date_cond
    (30) condition -> . NOT OPENPAR string_cond CLOSEPAR
    (31) condition -> . NOT OPENPAR num_cond CLOSEPAR
    (32) condition -> . NOT OPENPAR date_cond CLOSEPAR
    (33) string_cond -> . string_exp LIKE string_exp
    (34) string_cond -> . string_exp NOT LIKE string_exp
    (35) string_cond -> . STRCMP OPENPAR string_exp COMMA string_exp CLOSEPAR
    (37) num_cond -> . num_exp comparison_op num_exp
    (38) num_cond -> . num_exp BETWEEN num_exp AND num_exp
    (39) num_cond -> . num_exp NOT NULL
    (40) num_cond -> . num_exp IS NULL
    (54) date_cond -> . date_exp comparison_op date_exp
    (55) date_cond -> . date_exp
    (36) string_exp -> . STRING_LIT
    (41) num_exp -> . num_exp ADD num_factor
    (42) num_exp -> . num_exp SUBTRACT num_factor
    (43) num_exp -> . num_factor
    (56) date_exp -> . date_function
    (57) date_exp -> . DATE_LIT
    (44) num_factor -> . num_factor MULTIPLY num_term
    (45) num_factor -> . num_factor DIVIDE num_term
    (46) num_factor -> . num_factor DIVIDE_INT num_term
    (47) num_factor -> . num_factor MODULO num_term
    (48) num_factor -> . num_term
    (58) date_function -> . ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR
    (59) date_function -> . CURDATE OPENPAR CLOSEPAR
    (60) date_function -> . CURRENT_DATE OPENPAR CLOSEPAR
    (61) date_function -> . CURRENT_DATE
    (62) date_function -> . DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR
    (63) date_function -> . DAY OPENPAR date_exp CLOSEPAR
    (64) date_function -> . DAYNAME OPENPAR date_exp CLOSEPAR
    (65) date_function -> . DAYOFMONTH OPENPAR date_exp CLOSEPAR
    (66) date_function -> . DAYOFWEEK OPENPAR date_exp CLOSEPAR
    (67) date_function -> . DAYOFYEAR OPENPAR date_exp CLOSEPAR
    (68) date_function -> . LAST_DAY OPENPAR date_exp CLOSEPAR
    (69) date_function -> . MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR
    (70) date_function -> . MONTH OPENPAR date_exp CLOSEPAR
    (71) date_function -> . MONTHNAME OPENPAR date_exp CLOSEPAR
    (72) date_function -> . SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR
    (73) date_function -> . YEAR OPENPAR date_exp CLOSEPAR
    (49) num_term -> . OPENPAR num_val CLOSEPAR
    (50) num_term -> . num_val
    (51) num_val -> . INT_LIT
    (52) num_val -> . DOUBLE_LIT
    (53) num_val -> . COLUMN_NAME

    NOT             shift and go to state 36
    STRCMP          shift and go to state 42
    STRING_LIT      shift and go to state 37
    DATE_LIT        shift and go to state 46
    ADDDATE         shift and go to state 35
    CURDATE         shift and go to state 29
    CURRENT_DATE    shift and go to state 45
    DATEDIFF        shift and go to state 55
    DAY             shift and go to state 59
    DAYNAME         shift and go to state 48
    DAYOFMONTH      shift and go to state 43
    DAYOFWEEK       shift and go to state 56
    DAYOFYEAR       shift and go to state 49
    LAST_DAY        shift and go to state 58
    MAKEDATE        shift and go to state 57
    MONTH           shift and go to state 33
    MONTHNAME       shift and go to state 51
    SUBDATE         shift and go to state 47
    YEAR            shift and go to state 28
    OPENPAR         shift and go to state 38
    INT_LIT         shift and go to state 52
    DOUBLE_LIT      shift and go to state 41
    COLUMN_NAME     shift and go to state 39

    num_factor                     shift and go to state 40
    num_exp                        shift and go to state 50
    date_function                  shift and go to state 54
    condition                      shift and go to state 30
    num_term                       shift and go to state 44
    num_val                        shift and go to state 32
    date_exp                       shift and go to state 34
    string_cond                    shift and go to state 60
    date_cond                      shift and go to state 53
    string_exp                     shift and go to state 31
    num_cond                       shift and go to state 61

state 22

    (9) delete_statement -> DELETE FROM TABLE_NAME SEMICOLON .

    $end            reduce using rule 9 (delete_statement -> DELETE FROM TABLE_NAME SEMICOLON .)


state 23

    (18) column_name -> column_name COMMA . COLUMN_NAME

    COLUMN_NAME     shift and go to state 62


state 24

    (7) select_statement -> SELECT filter_rows_op columns FROM . TABLE_NAME SEMICOLON
    (8) select_statement -> SELECT filter_rows_op columns FROM . TABLE_NAME WHERE condition SEMICOLON

    TABLE_NAME      shift and go to state 63


state 25

    (5) insert_statement -> INSERT into_kw TABLE_NAME OPENPAR . column_name CLOSEPAR VALUES OPENPAR value_list CLOSEPAR
    (17) column_name -> . COLUMN_NAME
    (18) column_name -> . column_name COMMA COLUMN_NAME

    COLUMN_NAME     shift and go to state 18

    column_name                    shift and go to state 64

state 26

    (4) insert_statement -> INSERT into_kw TABLE_NAME VALUES . OPENPAR value_list CLOSEPAR

    OPENPAR         shift and go to state 65


state 27

    (6) insert_statement -> INSERT into_kw TABLE_NAME SET . assignment_list
    (19) assignment_list -> . COLUMN_NAME EQUAL literals
    (20) assignment_list -> . assignment_list COMMA COLUMN_NAME EQUAL literals

    COLUMN_NAME     shift and go to state 67

    assignment_list                shift and go to state 66

state 28

    (73) date_function -> YEAR . OPENPAR date_exp CLOSEPAR

    OPENPAR         shift and go to state 68


state 29

    (59) date_function -> CURDATE . OPENPAR CLOSEPAR

    OPENPAR         shift and go to state 69


state 30

    (10) delete_statement -> DELETE FROM TABLE_NAME WHERE condition . SEMICOLON

    SEMICOLON       shift and go to state 70


state 31

    (33) string_cond -> string_exp . LIKE string_exp
    (34) string_cond -> string_exp . NOT LIKE string_exp

    LIKE            shift and go to state 72
    NOT             shift and go to state 71


state 32

    (50) num_term -> num_val .

    MULTIPLY        reduce using rule 50 (num_term -> num_val .)
    DIVIDE          reduce using rule 50 (num_term -> num_val .)
    DIVIDE_INT      reduce using rule 50 (num_term -> num_val .)
    MODULO          reduce using rule 50 (num_term -> num_val .)
    COMMA           reduce using rule 50 (num_term -> num_val .)
    ADD             reduce using rule 50 (num_term -> num_val .)
    SUBTRACT        reduce using rule 50 (num_term -> num_val .)
    BETWEEN         reduce using rule 50 (num_term -> num_val .)
    NOT             reduce using rule 50 (num_term -> num_val .)
    IS              reduce using rule 50 (num_term -> num_val .)
    GE              reduce using rule 50 (num_term -> num_val .)
    GT              reduce using rule 50 (num_term -> num_val .)
    LE              reduce using rule 50 (num_term -> num_val .)
    LT              reduce using rule 50 (num_term -> num_val .)
    NE              reduce using rule 50 (num_term -> num_val .)
    EQUAL           reduce using rule 50 (num_term -> num_val .)
    EQUAL_NULL      reduce using rule 50 (num_term -> num_val .)
    SEMICOLON       reduce using rule 50 (num_term -> num_val .)
    CLOSEPAR        reduce using rule 50 (num_term -> num_val .)
    AND             reduce using rule 50 (num_term -> num_val .)
    DATE_UNIT       reduce using rule 50 (num_term -> num_val .)


state 33

    (70) date_function -> MONTH . OPENPAR date_exp CLOSEPAR

    OPENPAR         shift and go to state 73


state 34

    (54) date_cond -> date_exp . comparison_op date_exp
    (55) date_cond -> date_exp .
    (74) comparison_op -> . GE
    (75) comparison_op -> . GT
    (76) comparison_op -> . LE
    (77) comparison_op -> . LT
    (78) comparison_op -> . NE
    (79) comparison_op -> . EQUAL
    (80) comparison_op -> . EQUAL_NULL

    SEMICOLON       reduce using rule 55 (date_cond -> date_exp .)
    CLOSEPAR        reduce using rule 55 (date_cond -> date_exp .)
    GE              shift and go to state 79
    GT              shift and go to state 77
    LE              shift and go to state 74
    LT              shift and go to state 78
    NE              shift and go to state 75
    EQUAL           shift and go to state 80
    EQUAL_NULL      shift and go to state 76

    comparison_op                  shift and go to state 81

state 35

    (58) date_function -> ADDDATE . OPENPAR date_exp COMMA date_exp CLOSEPAR

    OPENPAR         shift and go to state 82


state 36

    (30) condition -> NOT . OPENPAR string_cond CLOSEPAR
    (31) condition -> NOT . OPENPAR num_cond CLOSEPAR
    (32) condition -> NOT . OPENPAR date_cond CLOSEPAR

    OPENPAR         shift and go to state 83


state 37

    (36) string_exp -> STRING_LIT .

    COMMA           reduce using rule 36 (string_exp -> STRING_LIT .)
    LIKE            reduce using rule 36 (string_exp -> STRING_LIT .)
    NOT             reduce using rule 36 (string_exp -> STRING_LIT .)
    CLOSEPAR        reduce using rule 36 (string_exp -> STRING_LIT .)
    SEMICOLON       reduce using rule 36 (string_exp -> STRING_LIT .)


state 38

    (49) num_term -> OPENPAR . num_val CLOSEPAR
    (51) num_val -> . INT_LIT
    (52) num_val -> . DOUBLE_LIT
    (53) num_val -> . COLUMN_NAME

    INT_LIT         shift and go to state 52
    DOUBLE_LIT      shift and go to state 41
    COLUMN_NAME     shift and go to state 39

    num_val                        shift and go to state 84

state 39

    (53) num_val -> COLUMN_NAME .

    MULTIPLY        reduce using rule 53 (num_val -> COLUMN_NAME .)
    DIVIDE          reduce using rule 53 (num_val -> COLUMN_NAME .)
    DIVIDE_INT      reduce using rule 53 (num_val -> COLUMN_NAME .)
    MODULO          reduce using rule 53 (num_val -> COLUMN_NAME .)
    DATE_UNIT       reduce using rule 53 (num_val -> COLUMN_NAME .)
    ADD             reduce using rule 53 (num_val -> COLUMN_NAME .)
    SUBTRACT        reduce using rule 53 (num_val -> COLUMN_NAME .)
    CLOSEPAR        reduce using rule 53 (num_val -> COLUMN_NAME .)
    BETWEEN         reduce using rule 53 (num_val -> COLUMN_NAME .)
    NOT             reduce using rule 53 (num_val -> COLUMN_NAME .)
    IS              reduce using rule 53 (num_val -> COLUMN_NAME .)
    GE              reduce using rule 53 (num_val -> COLUMN_NAME .)
    GT              reduce using rule 53 (num_val -> COLUMN_NAME .)
    LE              reduce using rule 53 (num_val -> COLUMN_NAME .)
    LT              reduce using rule 53 (num_val -> COLUMN_NAME .)
    NE              reduce using rule 53 (num_val -> COLUMN_NAME .)
    EQUAL           reduce using rule 53 (num_val -> COLUMN_NAME .)
    EQUAL_NULL      reduce using rule 53 (num_val -> COLUMN_NAME .)
    SEMICOLON       reduce using rule 53 (num_val -> COLUMN_NAME .)
    AND             reduce using rule 53 (num_val -> COLUMN_NAME .)
    COMMA           reduce using rule 53 (num_val -> COLUMN_NAME .)


state 40

    (43) num_exp -> num_factor .
    (44) num_factor -> num_factor . MULTIPLY num_term
    (45) num_factor -> num_factor . DIVIDE num_term
    (46) num_factor -> num_factor . DIVIDE_INT num_term
    (47) num_factor -> num_factor . MODULO num_term

    CLOSEPAR        reduce using rule 43 (num_exp -> num_factor .)
    ADD             reduce using rule 43 (num_exp -> num_factor .)
    SUBTRACT        reduce using rule 43 (num_exp -> num_factor .)
    SEMICOLON       reduce using rule 43 (num_exp -> num_factor .)
    COMMA           reduce using rule 43 (num_exp -> num_factor .)
    BETWEEN         reduce using rule 43 (num_exp -> num_factor .)
    NOT             reduce using rule 43 (num_exp -> num_factor .)
    IS              reduce using rule 43 (num_exp -> num_factor .)
    GE              reduce using rule 43 (num_exp -> num_factor .)
    GT              reduce using rule 43 (num_exp -> num_factor .)
    LE              reduce using rule 43 (num_exp -> num_factor .)
    LT              reduce using rule 43 (num_exp -> num_factor .)
    NE              reduce using rule 43 (num_exp -> num_factor .)
    EQUAL           reduce using rule 43 (num_exp -> num_factor .)
    EQUAL_NULL      reduce using rule 43 (num_exp -> num_factor .)
    AND             reduce using rule 43 (num_exp -> num_factor .)
    DATE_UNIT       reduce using rule 43 (num_exp -> num_factor .)
    MULTIPLY        shift and go to state 87
    DIVIDE          shift and go to state 85
    DIVIDE_INT      shift and go to state 86
    MODULO          shift and go to state 88


state 41

    (52) num_val -> DOUBLE_LIT .

    MULTIPLY        reduce using rule 52 (num_val -> DOUBLE_LIT .)
    DIVIDE          reduce using rule 52 (num_val -> DOUBLE_LIT .)
    DIVIDE_INT      reduce using rule 52 (num_val -> DOUBLE_LIT .)
    MODULO          reduce using rule 52 (num_val -> DOUBLE_LIT .)
    DATE_UNIT       reduce using rule 52 (num_val -> DOUBLE_LIT .)
    ADD             reduce using rule 52 (num_val -> DOUBLE_LIT .)
    SUBTRACT        reduce using rule 52 (num_val -> DOUBLE_LIT .)
    CLOSEPAR        reduce using rule 52 (num_val -> DOUBLE_LIT .)
    BETWEEN         reduce using rule 52 (num_val -> DOUBLE_LIT .)
    NOT             reduce using rule 52 (num_val -> DOUBLE_LIT .)
    IS              reduce using rule 52 (num_val -> DOUBLE_LIT .)
    GE              reduce using rule 52 (num_val -> DOUBLE_LIT .)
    GT              reduce using rule 52 (num_val -> DOUBLE_LIT .)
    LE              reduce using rule 52 (num_val -> DOUBLE_LIT .)
    LT              reduce using rule 52 (num_val -> DOUBLE_LIT .)
    NE              reduce using rule 52 (num_val -> DOUBLE_LIT .)
    EQUAL           reduce using rule 52 (num_val -> DOUBLE_LIT .)
    EQUAL_NULL      reduce using rule 52 (num_val -> DOUBLE_LIT .)
    SEMICOLON       reduce using rule 52 (num_val -> DOUBLE_LIT .)
    AND             reduce using rule 52 (num_val -> DOUBLE_LIT .)
    COMMA           reduce using rule 52 (num_val -> DOUBLE_LIT .)


state 42

    (35) string_cond -> STRCMP . OPENPAR string_exp COMMA string_exp CLOSEPAR

    OPENPAR         shift and go to state 89


state 43

    (65) date_function -> DAYOFMONTH . OPENPAR date_exp CLOSEPAR

    OPENPAR         shift and go to state 90


state 44

    (48) num_factor -> num_term .

    MULTIPLY        reduce using rule 48 (num_factor -> num_term .)
    DIVIDE          reduce using rule 48 (num_factor -> num_term .)
    DIVIDE_INT      reduce using rule 48 (num_factor -> num_term .)
    MODULO          reduce using rule 48 (num_factor -> num_term .)
    AND             reduce using rule 48 (num_factor -> num_term .)
    ADD             reduce using rule 48 (num_factor -> num_term .)
    SUBTRACT        reduce using rule 48 (num_factor -> num_term .)
    SEMICOLON       reduce using rule 48 (num_factor -> num_term .)
    CLOSEPAR        reduce using rule 48 (num_factor -> num_term .)
    BETWEEN         reduce using rule 48 (num_factor -> num_term .)
    NOT             reduce using rule 48 (num_factor -> num_term .)
    IS              reduce using rule 48 (num_factor -> num_term .)
    GE              reduce using rule 48 (num_factor -> num_term .)
    GT              reduce using rule 48 (num_factor -> num_term .)
    LE              reduce using rule 48 (num_factor -> num_term .)
    LT              reduce using rule 48 (num_factor -> num_term .)
    NE              reduce using rule 48 (num_factor -> num_term .)
    EQUAL           reduce using rule 48 (num_factor -> num_term .)
    EQUAL_NULL      reduce using rule 48 (num_factor -> num_term .)
    COMMA           reduce using rule 48 (num_factor -> num_term .)
    DATE_UNIT       reduce using rule 48 (num_factor -> num_term .)


state 45

    (60) date_function -> CURRENT_DATE . OPENPAR CLOSEPAR
    (61) date_function -> CURRENT_DATE .

    OPENPAR         shift and go to state 91
    GE              reduce using rule 61 (date_function -> CURRENT_DATE .)
    GT              reduce using rule 61 (date_function -> CURRENT_DATE .)
    LE              reduce using rule 61 (date_function -> CURRENT_DATE .)
    LT              reduce using rule 61 (date_function -> CURRENT_DATE .)
    NE              reduce using rule 61 (date_function -> CURRENT_DATE .)
    EQUAL           reduce using rule 61 (date_function -> CURRENT_DATE .)
    EQUAL_NULL      reduce using rule 61 (date_function -> CURRENT_DATE .)
    SEMICOLON       reduce using rule 61 (date_function -> CURRENT_DATE .)
    COMMA           reduce using rule 61 (date_function -> CURRENT_DATE .)
    CLOSEPAR        reduce using rule 61 (date_function -> CURRENT_DATE .)


state 46

    (57) date_exp -> DATE_LIT .

    CLOSEPAR        reduce using rule 57 (date_exp -> DATE_LIT .)
    GE              reduce using rule 57 (date_exp -> DATE_LIT .)
    GT              reduce using rule 57 (date_exp -> DATE_LIT .)
    LE              reduce using rule 57 (date_exp -> DATE_LIT .)
    LT              reduce using rule 57 (date_exp -> DATE_LIT .)
    NE              reduce using rule 57 (date_exp -> DATE_LIT .)
    EQUAL           reduce using rule 57 (date_exp -> DATE_LIT .)
    EQUAL_NULL      reduce using rule 57 (date_exp -> DATE_LIT .)
    SEMICOLON       reduce using rule 57 (date_exp -> DATE_LIT .)
    COMMA           reduce using rule 57 (date_exp -> DATE_LIT .)


state 47

    (72) date_function -> SUBDATE . OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR

    OPENPAR         shift and go to state 92


state 48

    (64) date_function -> DAYNAME . OPENPAR date_exp CLOSEPAR

    OPENPAR         shift and go to state 93


state 49

    (67) date_function -> DAYOFYEAR . OPENPAR date_exp CLOSEPAR

    OPENPAR         shift and go to state 94


state 50

    (37) num_cond -> num_exp . comparison_op num_exp
    (38) num_cond -> num_exp . BETWEEN num_exp AND num_exp
    (39) num_cond -> num_exp . NOT NULL
    (40) num_cond -> num_exp . IS NULL
    (41) num_exp -> num_exp . ADD num_factor
    (42) num_exp -> num_exp . SUBTRACT num_factor
    (74) comparison_op -> . GE
    (75) comparison_op -> . GT
    (76) comparison_op -> . LE
    (77) comparison_op -> . LT
    (78) comparison_op -> . NE
    (79) comparison_op -> . EQUAL
    (80) comparison_op -> . EQUAL_NULL

    BETWEEN         shift and go to state 98
    NOT             shift and go to state 100
    IS              shift and go to state 99
    ADD             shift and go to state 96
    SUBTRACT        shift and go to state 95
    GE              shift and go to state 79
    GT              shift and go to state 77
    LE              shift and go to state 74
    LT              shift and go to state 78
    NE              shift and go to state 75
    EQUAL           shift and go to state 80
    EQUAL_NULL      shift and go to state 76

    comparison_op                  shift and go to state 97

state 51

    (71) date_function -> MONTHNAME . OPENPAR date_exp CLOSEPAR

    OPENPAR         shift and go to state 101


state 52

    (51) num_val -> INT_LIT .

    MULTIPLY        reduce using rule 51 (num_val -> INT_LIT .)
    DIVIDE          reduce using rule 51 (num_val -> INT_LIT .)
    DIVIDE_INT      reduce using rule 51 (num_val -> INT_LIT .)
    MODULO          reduce using rule 51 (num_val -> INT_LIT .)
    DATE_UNIT       reduce using rule 51 (num_val -> INT_LIT .)
    ADD             reduce using rule 51 (num_val -> INT_LIT .)
    SUBTRACT        reduce using rule 51 (num_val -> INT_LIT .)
    CLOSEPAR        reduce using rule 51 (num_val -> INT_LIT .)
    BETWEEN         reduce using rule 51 (num_val -> INT_LIT .)
    NOT             reduce using rule 51 (num_val -> INT_LIT .)
    IS              reduce using rule 51 (num_val -> INT_LIT .)
    GE              reduce using rule 51 (num_val -> INT_LIT .)
    GT              reduce using rule 51 (num_val -> INT_LIT .)
    LE              reduce using rule 51 (num_val -> INT_LIT .)
    LT              reduce using rule 51 (num_val -> INT_LIT .)
    NE              reduce using rule 51 (num_val -> INT_LIT .)
    EQUAL           reduce using rule 51 (num_val -> INT_LIT .)
    EQUAL_NULL      reduce using rule 51 (num_val -> INT_LIT .)
    SEMICOLON       reduce using rule 51 (num_val -> INT_LIT .)
    AND             reduce using rule 51 (num_val -> INT_LIT .)
    COMMA           reduce using rule 51 (num_val -> INT_LIT .)


state 53

    (29) condition -> date_cond .

    SEMICOLON       reduce using rule 29 (condition -> date_cond .)


state 54

    (56) date_exp -> date_function .

    CLOSEPAR        reduce using rule 56 (date_exp -> date_function .)
    GE              reduce using rule 56 (date_exp -> date_function .)
    GT              reduce using rule 56 (date_exp -> date_function .)
    LE              reduce using rule 56 (date_exp -> date_function .)
    LT              reduce using rule 56 (date_exp -> date_function .)
    NE              reduce using rule 56 (date_exp -> date_function .)
    EQUAL           reduce using rule 56 (date_exp -> date_function .)
    EQUAL_NULL      reduce using rule 56 (date_exp -> date_function .)
    SEMICOLON       reduce using rule 56 (date_exp -> date_function .)
    COMMA           reduce using rule 56 (date_exp -> date_function .)


state 55

    (62) date_function -> DATEDIFF . OPENPAR date_exp COMMA date_exp CLOSEPAR

    OPENPAR         shift and go to state 102


state 56

    (66) date_function -> DAYOFWEEK . OPENPAR date_exp CLOSEPAR

    OPENPAR         shift and go to state 103


state 57

    (69) date_function -> MAKEDATE . OPENPAR num_exp COMMA num_exp CLOSEPAR

    OPENPAR         shift and go to state 104


state 58

    (68) date_function -> LAST_DAY . OPENPAR date_exp CLOSEPAR

    OPENPAR         shift and go to state 105


state 59

    (63) date_function -> DAY . OPENPAR date_exp CLOSEPAR

    OPENPAR         shift and go to state 106


state 60

    (27) condition -> string_cond .

    SEMICOLON       reduce using rule 27 (condition -> string_cond .)


state 61

    (28) condition -> num_cond .

    SEMICOLON       reduce using rule 28 (condition -> num_cond .)


state 62

    (18) column_name -> column_name COMMA COLUMN_NAME .

    COMMA           reduce using rule 18 (column_name -> column_name COMMA COLUMN_NAME .)
    FROM            reduce using rule 18 (column_name -> column_name COMMA COLUMN_NAME .)
    CLOSEPAR        reduce using rule 18 (column_name -> column_name COMMA COLUMN_NAME .)


state 63

    (7) select_statement -> SELECT filter_rows_op columns FROM TABLE_NAME . SEMICOLON
    (8) select_statement -> SELECT filter_rows_op columns FROM TABLE_NAME . WHERE condition SEMICOLON

    SEMICOLON       shift and go to state 108
    WHERE           shift and go to state 107


state 64

    (5) insert_statement -> INSERT into_kw TABLE_NAME OPENPAR column_name . CLOSEPAR VALUES OPENPAR value_list CLOSEPAR
    (18) column_name -> column_name . COMMA COLUMN_NAME

    CLOSEPAR        shift and go to state 109
    COMMA           shift and go to state 23


state 65

    (4) insert_statement -> INSERT into_kw TABLE_NAME VALUES OPENPAR . value_list CLOSEPAR
    (21) value_list -> . literals
    (22) value_list -> . value_list COMMA literals
    (23) literals -> . STRING_LIT
    (24) literals -> . INT_LIT
    (25) literals -> . DOUBLE_LIT
    (26) literals -> . DATE_LIT

    STRING_LIT      shift and go to state 115
    INT_LIT         shift and go to state 112
    DOUBLE_LIT      shift and go to state 114
    DATE_LIT        shift and go to state 113

    value_list                     shift and go to state 110
    literals                       shift and go to state 111

state 66

    (6) insert_statement -> INSERT into_kw TABLE_NAME SET assignment_list .
    (20) assignment_list -> assignment_list . COMMA COLUMN_NAME EQUAL literals

    $end            reduce using rule 6 (insert_statement -> INSERT into_kw TABLE_NAME SET assignment_list .)
    COMMA           shift and go to state 116


state 67

    (19) assignment_list -> COLUMN_NAME . EQUAL literals

    EQUAL           shift and go to state 117


state 68

    (73) date_function -> YEAR OPENPAR . date_exp CLOSEPAR
    (56) date_exp -> . date_function
    (57) date_exp -> . DATE_LIT
    (58) date_function -> . ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR
    (59) date_function -> . CURDATE OPENPAR CLOSEPAR
    (60) date_function -> . CURRENT_DATE OPENPAR CLOSEPAR
    (61) date_function -> . CURRENT_DATE
    (62) date_function -> . DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR
    (63) date_function -> . DAY OPENPAR date_exp CLOSEPAR
    (64) date_function -> . DAYNAME OPENPAR date_exp CLOSEPAR
    (65) date_function -> . DAYOFMONTH OPENPAR date_exp CLOSEPAR
    (66) date_function -> . DAYOFWEEK OPENPAR date_exp CLOSEPAR
    (67) date_function -> . DAYOFYEAR OPENPAR date_exp CLOSEPAR
    (68) date_function -> . LAST_DAY OPENPAR date_exp CLOSEPAR
    (69) date_function -> . MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR
    (70) date_function -> . MONTH OPENPAR date_exp CLOSEPAR
    (71) date_function -> . MONTHNAME OPENPAR date_exp CLOSEPAR
    (72) date_function -> . SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR
    (73) date_function -> . YEAR OPENPAR date_exp CLOSEPAR

    DATE_LIT        shift and go to state 46
    ADDDATE         shift and go to state 35
    CURDATE         shift and go to state 29
    CURRENT_DATE    shift and go to state 45
    DATEDIFF        shift and go to state 55
    DAY             shift and go to state 59
    DAYNAME         shift and go to state 48
    DAYOFMONTH      shift and go to state 43
    DAYOFWEEK       shift and go to state 56
    DAYOFYEAR       shift and go to state 49
    LAST_DAY        shift and go to state 58
    MAKEDATE        shift and go to state 57
    MONTH           shift and go to state 33
    MONTHNAME       shift and go to state 51
    SUBDATE         shift and go to state 47
    YEAR            shift and go to state 28

    date_function                  shift and go to state 54
    date_exp                       shift and go to state 118

state 69

    (59) date_function -> CURDATE OPENPAR . CLOSEPAR

    CLOSEPAR        shift and go to state 119


state 70

    (10) delete_statement -> DELETE FROM TABLE_NAME WHERE condition SEMICOLON .

    $end            reduce using rule 10 (delete_statement -> DELETE FROM TABLE_NAME WHERE condition SEMICOLON .)


state 71

    (34) string_cond -> string_exp NOT . LIKE string_exp

    LIKE            shift and go to state 120


state 72

    (33) string_cond -> string_exp LIKE . string_exp
    (36) string_exp -> . STRING_LIT

    STRING_LIT      shift and go to state 37

    string_exp                     shift and go to state 121

state 73

    (70) date_function -> MONTH OPENPAR . date_exp CLOSEPAR
    (56) date_exp -> . date_function
    (57) date_exp -> . DATE_LIT
    (58) date_function -> . ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR
    (59) date_function -> . CURDATE OPENPAR CLOSEPAR
    (60) date_function -> . CURRENT_DATE OPENPAR CLOSEPAR
    (61) date_function -> . CURRENT_DATE
    (62) date_function -> . DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR
    (63) date_function -> . DAY OPENPAR date_exp CLOSEPAR
    (64) date_function -> . DAYNAME OPENPAR date_exp CLOSEPAR
    (65) date_function -> . DAYOFMONTH OPENPAR date_exp CLOSEPAR
    (66) date_function -> . DAYOFWEEK OPENPAR date_exp CLOSEPAR
    (67) date_function -> . DAYOFYEAR OPENPAR date_exp CLOSEPAR
    (68) date_function -> . LAST_DAY OPENPAR date_exp CLOSEPAR
    (69) date_function -> . MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR
    (70) date_function -> . MONTH OPENPAR date_exp CLOSEPAR
    (71) date_function -> . MONTHNAME OPENPAR date_exp CLOSEPAR
    (72) date_function -> . SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR
    (73) date_function -> . YEAR OPENPAR date_exp CLOSEPAR

    DATE_LIT        shift and go to state 46
    ADDDATE         shift and go to state 35
    CURDATE         shift and go to state 29
    CURRENT_DATE    shift and go to state 45
    DATEDIFF        shift and go to state 55
    DAY             shift and go to state 59
    DAYNAME         shift and go to state 48
    DAYOFMONTH      shift and go to state 43
    DAYOFWEEK       shift and go to state 56
    DAYOFYEAR       shift and go to state 49
    LAST_DAY        shift and go to state 58
    MAKEDATE        shift and go to state 57
    MONTH           shift and go to state 33
    MONTHNAME       shift and go to state 51
    SUBDATE         shift and go to state 47
    YEAR            shift and go to state 28

    date_function                  shift and go to state 54
    date_exp                       shift and go to state 122

state 74

    (76) comparison_op -> LE .

    OPENPAR         reduce using rule 76 (comparison_op -> LE .)
    INT_LIT         reduce using rule 76 (comparison_op -> LE .)
    DOUBLE_LIT      reduce using rule 76 (comparison_op -> LE .)
    COLUMN_NAME     reduce using rule 76 (comparison_op -> LE .)
    DATE_LIT        reduce using rule 76 (comparison_op -> LE .)
    ADDDATE         reduce using rule 76 (comparison_op -> LE .)
    CURDATE         reduce using rule 76 (comparison_op -> LE .)
    CURRENT_DATE    reduce using rule 76 (comparison_op -> LE .)
    DATEDIFF        reduce using rule 76 (comparison_op -> LE .)
    DAY             reduce using rule 76 (comparison_op -> LE .)
    DAYNAME         reduce using rule 76 (comparison_op -> LE .)
    DAYOFMONTH      reduce using rule 76 (comparison_op -> LE .)
    DAYOFWEEK       reduce using rule 76 (comparison_op -> LE .)
    DAYOFYEAR       reduce using rule 76 (comparison_op -> LE .)
    LAST_DAY        reduce using rule 76 (comparison_op -> LE .)
    MAKEDATE        reduce using rule 76 (comparison_op -> LE .)
    MONTH           reduce using rule 76 (comparison_op -> LE .)
    MONTHNAME       reduce using rule 76 (comparison_op -> LE .)
    SUBDATE         reduce using rule 76 (comparison_op -> LE .)
    YEAR            reduce using rule 76 (comparison_op -> LE .)


state 75

    (78) comparison_op -> NE .

    OPENPAR         reduce using rule 78 (comparison_op -> NE .)
    INT_LIT         reduce using rule 78 (comparison_op -> NE .)
    DOUBLE_LIT      reduce using rule 78 (comparison_op -> NE .)
    COLUMN_NAME     reduce using rule 78 (comparison_op -> NE .)
    DATE_LIT        reduce using rule 78 (comparison_op -> NE .)
    ADDDATE         reduce using rule 78 (comparison_op -> NE .)
    CURDATE         reduce using rule 78 (comparison_op -> NE .)
    CURRENT_DATE    reduce using rule 78 (comparison_op -> NE .)
    DATEDIFF        reduce using rule 78 (comparison_op -> NE .)
    DAY             reduce using rule 78 (comparison_op -> NE .)
    DAYNAME         reduce using rule 78 (comparison_op -> NE .)
    DAYOFMONTH      reduce using rule 78 (comparison_op -> NE .)
    DAYOFWEEK       reduce using rule 78 (comparison_op -> NE .)
    DAYOFYEAR       reduce using rule 78 (comparison_op -> NE .)
    LAST_DAY        reduce using rule 78 (comparison_op -> NE .)
    MAKEDATE        reduce using rule 78 (comparison_op -> NE .)
    MONTH           reduce using rule 78 (comparison_op -> NE .)
    MONTHNAME       reduce using rule 78 (comparison_op -> NE .)
    SUBDATE         reduce using rule 78 (comparison_op -> NE .)
    YEAR            reduce using rule 78 (comparison_op -> NE .)


state 76

    (80) comparison_op -> EQUAL_NULL .

    OPENPAR         reduce using rule 80 (comparison_op -> EQUAL_NULL .)
    INT_LIT         reduce using rule 80 (comparison_op -> EQUAL_NULL .)
    DOUBLE_LIT      reduce using rule 80 (comparison_op -> EQUAL_NULL .)
    COLUMN_NAME     reduce using rule 80 (comparison_op -> EQUAL_NULL .)
    DATE_LIT        reduce using rule 80 (comparison_op -> EQUAL_NULL .)
    ADDDATE         reduce using rule 80 (comparison_op -> EQUAL_NULL .)
    CURDATE         reduce using rule 80 (comparison_op -> EQUAL_NULL .)
    CURRENT_DATE    reduce using rule 80 (comparison_op -> EQUAL_NULL .)
    DATEDIFF        reduce using rule 80 (comparison_op -> EQUAL_NULL .)
    DAY             reduce using rule 80 (comparison_op -> EQUAL_NULL .)
    DAYNAME         reduce using rule 80 (comparison_op -> EQUAL_NULL .)
    DAYOFMONTH      reduce using rule 80 (comparison_op -> EQUAL_NULL .)
    DAYOFWEEK       reduce using rule 80 (comparison_op -> EQUAL_NULL .)
    DAYOFYEAR       reduce using rule 80 (comparison_op -> EQUAL_NULL .)
    LAST_DAY        reduce using rule 80 (comparison_op -> EQUAL_NULL .)
    MAKEDATE        reduce using rule 80 (comparison_op -> EQUAL_NULL .)
    MONTH           reduce using rule 80 (comparison_op -> EQUAL_NULL .)
    MONTHNAME       reduce using rule 80 (comparison_op -> EQUAL_NULL .)
    SUBDATE         reduce using rule 80 (comparison_op -> EQUAL_NULL .)
    YEAR            reduce using rule 80 (comparison_op -> EQUAL_NULL .)


state 77

    (75) comparison_op -> GT .

    OPENPAR         reduce using rule 75 (comparison_op -> GT .)
    INT_LIT         reduce using rule 75 (comparison_op -> GT .)
    DOUBLE_LIT      reduce using rule 75 (comparison_op -> GT .)
    COLUMN_NAME     reduce using rule 75 (comparison_op -> GT .)
    DATE_LIT        reduce using rule 75 (comparison_op -> GT .)
    ADDDATE         reduce using rule 75 (comparison_op -> GT .)
    CURDATE         reduce using rule 75 (comparison_op -> GT .)
    CURRENT_DATE    reduce using rule 75 (comparison_op -> GT .)
    DATEDIFF        reduce using rule 75 (comparison_op -> GT .)
    DAY             reduce using rule 75 (comparison_op -> GT .)
    DAYNAME         reduce using rule 75 (comparison_op -> GT .)
    DAYOFMONTH      reduce using rule 75 (comparison_op -> GT .)
    DAYOFWEEK       reduce using rule 75 (comparison_op -> GT .)
    DAYOFYEAR       reduce using rule 75 (comparison_op -> GT .)
    LAST_DAY        reduce using rule 75 (comparison_op -> GT .)
    MAKEDATE        reduce using rule 75 (comparison_op -> GT .)
    MONTH           reduce using rule 75 (comparison_op -> GT .)
    MONTHNAME       reduce using rule 75 (comparison_op -> GT .)
    SUBDATE         reduce using rule 75 (comparison_op -> GT .)
    YEAR            reduce using rule 75 (comparison_op -> GT .)


state 78

    (77) comparison_op -> LT .

    OPENPAR         reduce using rule 77 (comparison_op -> LT .)
    INT_LIT         reduce using rule 77 (comparison_op -> LT .)
    DOUBLE_LIT      reduce using rule 77 (comparison_op -> LT .)
    COLUMN_NAME     reduce using rule 77 (comparison_op -> LT .)
    DATE_LIT        reduce using rule 77 (comparison_op -> LT .)
    ADDDATE         reduce using rule 77 (comparison_op -> LT .)
    CURDATE         reduce using rule 77 (comparison_op -> LT .)
    CURRENT_DATE    reduce using rule 77 (comparison_op -> LT .)
    DATEDIFF        reduce using rule 77 (comparison_op -> LT .)
    DAY             reduce using rule 77 (comparison_op -> LT .)
    DAYNAME         reduce using rule 77 (comparison_op -> LT .)
    DAYOFMONTH      reduce using rule 77 (comparison_op -> LT .)
    DAYOFWEEK       reduce using rule 77 (comparison_op -> LT .)
    DAYOFYEAR       reduce using rule 77 (comparison_op -> LT .)
    LAST_DAY        reduce using rule 77 (comparison_op -> LT .)
    MAKEDATE        reduce using rule 77 (comparison_op -> LT .)
    MONTH           reduce using rule 77 (comparison_op -> LT .)
    MONTHNAME       reduce using rule 77 (comparison_op -> LT .)
    SUBDATE         reduce using rule 77 (comparison_op -> LT .)
    YEAR            reduce using rule 77 (comparison_op -> LT .)


state 79

    (74) comparison_op -> GE .

    OPENPAR         reduce using rule 74 (comparison_op -> GE .)
    INT_LIT         reduce using rule 74 (comparison_op -> GE .)
    DOUBLE_LIT      reduce using rule 74 (comparison_op -> GE .)
    COLUMN_NAME     reduce using rule 74 (comparison_op -> GE .)
    DATE_LIT        reduce using rule 74 (comparison_op -> GE .)
    ADDDATE         reduce using rule 74 (comparison_op -> GE .)
    CURDATE         reduce using rule 74 (comparison_op -> GE .)
    CURRENT_DATE    reduce using rule 74 (comparison_op -> GE .)
    DATEDIFF        reduce using rule 74 (comparison_op -> GE .)
    DAY             reduce using rule 74 (comparison_op -> GE .)
    DAYNAME         reduce using rule 74 (comparison_op -> GE .)
    DAYOFMONTH      reduce using rule 74 (comparison_op -> GE .)
    DAYOFWEEK       reduce using rule 74 (comparison_op -> GE .)
    DAYOFYEAR       reduce using rule 74 (comparison_op -> GE .)
    LAST_DAY        reduce using rule 74 (comparison_op -> GE .)
    MAKEDATE        reduce using rule 74 (comparison_op -> GE .)
    MONTH           reduce using rule 74 (comparison_op -> GE .)
    MONTHNAME       reduce using rule 74 (comparison_op -> GE .)
    SUBDATE         reduce using rule 74 (comparison_op -> GE .)
    YEAR            reduce using rule 74 (comparison_op -> GE .)


state 80

    (79) comparison_op -> EQUAL .

    OPENPAR         reduce using rule 79 (comparison_op -> EQUAL .)
    INT_LIT         reduce using rule 79 (comparison_op -> EQUAL .)
    DOUBLE_LIT      reduce using rule 79 (comparison_op -> EQUAL .)
    COLUMN_NAME     reduce using rule 79 (comparison_op -> EQUAL .)
    DATE_LIT        reduce using rule 79 (comparison_op -> EQUAL .)
    ADDDATE         reduce using rule 79 (comparison_op -> EQUAL .)
    CURDATE         reduce using rule 79 (comparison_op -> EQUAL .)
    CURRENT_DATE    reduce using rule 79 (comparison_op -> EQUAL .)
    DATEDIFF        reduce using rule 79 (comparison_op -> EQUAL .)
    DAY             reduce using rule 79 (comparison_op -> EQUAL .)
    DAYNAME         reduce using rule 79 (comparison_op -> EQUAL .)
    DAYOFMONTH      reduce using rule 79 (comparison_op -> EQUAL .)
    DAYOFWEEK       reduce using rule 79 (comparison_op -> EQUAL .)
    DAYOFYEAR       reduce using rule 79 (comparison_op -> EQUAL .)
    LAST_DAY        reduce using rule 79 (comparison_op -> EQUAL .)
    MAKEDATE        reduce using rule 79 (comparison_op -> EQUAL .)
    MONTH           reduce using rule 79 (comparison_op -> EQUAL .)
    MONTHNAME       reduce using rule 79 (comparison_op -> EQUAL .)
    SUBDATE         reduce using rule 79 (comparison_op -> EQUAL .)
    YEAR            reduce using rule 79 (comparison_op -> EQUAL .)


state 81

    (54) date_cond -> date_exp comparison_op . date_exp
    (56) date_exp -> . date_function
    (57) date_exp -> . DATE_LIT
    (58) date_function -> . ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR
    (59) date_function -> . CURDATE OPENPAR CLOSEPAR
    (60) date_function -> . CURRENT_DATE OPENPAR CLOSEPAR
    (61) date_function -> . CURRENT_DATE
    (62) date_function -> . DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR
    (63) date_function -> . DAY OPENPAR date_exp CLOSEPAR
    (64) date_function -> . DAYNAME OPENPAR date_exp CLOSEPAR
    (65) date_function -> . DAYOFMONTH OPENPAR date_exp CLOSEPAR
    (66) date_function -> . DAYOFWEEK OPENPAR date_exp CLOSEPAR
    (67) date_function -> . DAYOFYEAR OPENPAR date_exp CLOSEPAR
    (68) date_function -> . LAST_DAY OPENPAR date_exp CLOSEPAR
    (69) date_function -> . MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR
    (70) date_function -> . MONTH OPENPAR date_exp CLOSEPAR
    (71) date_function -> . MONTHNAME OPENPAR date_exp CLOSEPAR
    (72) date_function -> . SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR
    (73) date_function -> . YEAR OPENPAR date_exp CLOSEPAR

    DATE_LIT        shift and go to state 46
    ADDDATE         shift and go to state 35
    CURDATE         shift and go to state 29
    CURRENT_DATE    shift and go to state 45
    DATEDIFF        shift and go to state 55
    DAY             shift and go to state 59
    DAYNAME         shift and go to state 48
    DAYOFMONTH      shift and go to state 43
    DAYOFWEEK       shift and go to state 56
    DAYOFYEAR       shift and go to state 49
    LAST_DAY        shift and go to state 58
    MAKEDATE        shift and go to state 57
    MONTH           shift and go to state 33
    MONTHNAME       shift and go to state 51
    SUBDATE         shift and go to state 47
    YEAR            shift and go to state 28

    date_function                  shift and go to state 54
    date_exp                       shift and go to state 123

state 82

    (58) date_function -> ADDDATE OPENPAR . date_exp COMMA date_exp CLOSEPAR
    (56) date_exp -> . date_function
    (57) date_exp -> . DATE_LIT
    (58) date_function -> . ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR
    (59) date_function -> . CURDATE OPENPAR CLOSEPAR
    (60) date_function -> . CURRENT_DATE OPENPAR CLOSEPAR
    (61) date_function -> . CURRENT_DATE
    (62) date_function -> . DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR
    (63) date_function -> . DAY OPENPAR date_exp CLOSEPAR
    (64) date_function -> . DAYNAME OPENPAR date_exp CLOSEPAR
    (65) date_function -> . DAYOFMONTH OPENPAR date_exp CLOSEPAR
    (66) date_function -> . DAYOFWEEK OPENPAR date_exp CLOSEPAR
    (67) date_function -> . DAYOFYEAR OPENPAR date_exp CLOSEPAR
    (68) date_function -> . LAST_DAY OPENPAR date_exp CLOSEPAR
    (69) date_function -> . MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR
    (70) date_function -> . MONTH OPENPAR date_exp CLOSEPAR
    (71) date_function -> . MONTHNAME OPENPAR date_exp CLOSEPAR
    (72) date_function -> . SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR
    (73) date_function -> . YEAR OPENPAR date_exp CLOSEPAR

    DATE_LIT        shift and go to state 46
    ADDDATE         shift and go to state 35
    CURDATE         shift and go to state 29
    CURRENT_DATE    shift and go to state 45
    DATEDIFF        shift and go to state 55
    DAY             shift and go to state 59
    DAYNAME         shift and go to state 48
    DAYOFMONTH      shift and go to state 43
    DAYOFWEEK       shift and go to state 56
    DAYOFYEAR       shift and go to state 49
    LAST_DAY        shift and go to state 58
    MAKEDATE        shift and go to state 57
    MONTH           shift and go to state 33
    MONTHNAME       shift and go to state 51
    SUBDATE         shift and go to state 47
    YEAR            shift and go to state 28

    date_function                  shift and go to state 54
    date_exp                       shift and go to state 124

state 83

    (30) condition -> NOT OPENPAR . string_cond CLOSEPAR
    (31) condition -> NOT OPENPAR . num_cond CLOSEPAR
    (32) condition -> NOT OPENPAR . date_cond CLOSEPAR
    (33) string_cond -> . string_exp LIKE string_exp
    (34) string_cond -> . string_exp NOT LIKE string_exp
    (35) string_cond -> . STRCMP OPENPAR string_exp COMMA string_exp CLOSEPAR
    (37) num_cond -> . num_exp comparison_op num_exp
    (38) num_cond -> . num_exp BETWEEN num_exp AND num_exp
    (39) num_cond -> . num_exp NOT NULL
    (40) num_cond -> . num_exp IS NULL
    (54) date_cond -> . date_exp comparison_op date_exp
    (55) date_cond -> . date_exp
    (36) string_exp -> . STRING_LIT
    (41) num_exp -> . num_exp ADD num_factor
    (42) num_exp -> . num_exp SUBTRACT num_factor
    (43) num_exp -> . num_factor
    (56) date_exp -> . date_function
    (57) date_exp -> . DATE_LIT
    (44) num_factor -> . num_factor MULTIPLY num_term
    (45) num_factor -> . num_factor DIVIDE num_term
    (46) num_factor -> . num_factor DIVIDE_INT num_term
    (47) num_factor -> . num_factor MODULO num_term
    (48) num_factor -> . num_term
    (58) date_function -> . ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR
    (59) date_function -> . CURDATE OPENPAR CLOSEPAR
    (60) date_function -> . CURRENT_DATE OPENPAR CLOSEPAR
    (61) date_function -> . CURRENT_DATE
    (62) date_function -> . DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR
    (63) date_function -> . DAY OPENPAR date_exp CLOSEPAR
    (64) date_function -> . DAYNAME OPENPAR date_exp CLOSEPAR
    (65) date_function -> . DAYOFMONTH OPENPAR date_exp CLOSEPAR
    (66) date_function -> . DAYOFWEEK OPENPAR date_exp CLOSEPAR
    (67) date_function -> . DAYOFYEAR OPENPAR date_exp CLOSEPAR
    (68) date_function -> . LAST_DAY OPENPAR date_exp CLOSEPAR
    (69) date_function -> . MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR
    (70) date_function -> . MONTH OPENPAR date_exp CLOSEPAR
    (71) date_function -> . MONTHNAME OPENPAR date_exp CLOSEPAR
    (72) date_function -> . SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR
    (73) date_function -> . YEAR OPENPAR date_exp CLOSEPAR
    (49) num_term -> . OPENPAR num_val CLOSEPAR
    (50) num_term -> . num_val
    (51) num_val -> . INT_LIT
    (52) num_val -> . DOUBLE_LIT
    (53) num_val -> . COLUMN_NAME

    STRCMP          shift and go to state 42
    STRING_LIT      shift and go to state 37
    DATE_LIT        shift and go to state 46
    ADDDATE         shift and go to state 35
    CURDATE         shift and go to state 29
    CURRENT_DATE    shift and go to state 45
    DATEDIFF        shift and go to state 55
    DAY             shift and go to state 59
    DAYNAME         shift and go to state 48
    DAYOFMONTH      shift and go to state 43
    DAYOFWEEK       shift and go to state 56
    DAYOFYEAR       shift and go to state 49
    LAST_DAY        shift and go to state 58
    MAKEDATE        shift and go to state 57
    MONTH           shift and go to state 33
    MONTHNAME       shift and go to state 51
    SUBDATE         shift and go to state 47
    YEAR            shift and go to state 28
    OPENPAR         shift and go to state 38
    INT_LIT         shift and go to state 52
    DOUBLE_LIT      shift and go to state 41
    COLUMN_NAME     shift and go to state 39

    num_term                       shift and go to state 44
    num_val                        shift and go to state 32
    date_function                  shift and go to state 54
    date_exp                       shift and go to state 34
    num_factor                     shift and go to state 40
    string_cond                    shift and go to state 126
    num_exp                        shift and go to state 50
    date_cond                      shift and go to state 125
    string_exp                     shift and go to state 31
    num_cond                       shift and go to state 127

state 84

    (49) num_term -> OPENPAR num_val . CLOSEPAR

    CLOSEPAR        shift and go to state 128


state 85

    (45) num_factor -> num_factor DIVIDE . num_term
    (49) num_term -> . OPENPAR num_val CLOSEPAR
    (50) num_term -> . num_val
    (51) num_val -> . INT_LIT
    (52) num_val -> . DOUBLE_LIT
    (53) num_val -> . COLUMN_NAME

    OPENPAR         shift and go to state 38
    INT_LIT         shift and go to state 52
    DOUBLE_LIT      shift and go to state 41
    COLUMN_NAME     shift and go to state 39

    num_term                       shift and go to state 129
    num_val                        shift and go to state 32

state 86

    (46) num_factor -> num_factor DIVIDE_INT . num_term
    (49) num_term -> . OPENPAR num_val CLOSEPAR
    (50) num_term -> . num_val
    (51) num_val -> . INT_LIT
    (52) num_val -> . DOUBLE_LIT
    (53) num_val -> . COLUMN_NAME

    OPENPAR         shift and go to state 38
    INT_LIT         shift and go to state 52
    DOUBLE_LIT      shift and go to state 41
    COLUMN_NAME     shift and go to state 39

    num_term                       shift and go to state 130
    num_val                        shift and go to state 32

state 87

    (44) num_factor -> num_factor MULTIPLY . num_term
    (49) num_term -> . OPENPAR num_val CLOSEPAR
    (50) num_term -> . num_val
    (51) num_val -> . INT_LIT
    (52) num_val -> . DOUBLE_LIT
    (53) num_val -> . COLUMN_NAME

    OPENPAR         shift and go to state 38
    INT_LIT         shift and go to state 52
    DOUBLE_LIT      shift and go to state 41
    COLUMN_NAME     shift and go to state 39

    num_term                       shift and go to state 131
    num_val                        shift and go to state 32

state 88

    (47) num_factor -> num_factor MODULO . num_term
    (49) num_term -> . OPENPAR num_val CLOSEPAR
    (50) num_term -> . num_val
    (51) num_val -> . INT_LIT
    (52) num_val -> . DOUBLE_LIT
    (53) num_val -> . COLUMN_NAME

    OPENPAR         shift and go to state 38
    INT_LIT         shift and go to state 52
    DOUBLE_LIT      shift and go to state 41
    COLUMN_NAME     shift and go to state 39

    num_term                       shift and go to state 132
    num_val                        shift and go to state 32

state 89

    (35) string_cond -> STRCMP OPENPAR . string_exp COMMA string_exp CLOSEPAR
    (36) string_exp -> . STRING_LIT

    STRING_LIT      shift and go to state 37

    string_exp                     shift and go to state 133

state 90

    (65) date_function -> DAYOFMONTH OPENPAR . date_exp CLOSEPAR
    (56) date_exp -> . date_function
    (57) date_exp -> . DATE_LIT
    (58) date_function -> . ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR
    (59) date_function -> . CURDATE OPENPAR CLOSEPAR
    (60) date_function -> . CURRENT_DATE OPENPAR CLOSEPAR
    (61) date_function -> . CURRENT_DATE
    (62) date_function -> . DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR
    (63) date_function -> . DAY OPENPAR date_exp CLOSEPAR
    (64) date_function -> . DAYNAME OPENPAR date_exp CLOSEPAR
    (65) date_function -> . DAYOFMONTH OPENPAR date_exp CLOSEPAR
    (66) date_function -> . DAYOFWEEK OPENPAR date_exp CLOSEPAR
    (67) date_function -> . DAYOFYEAR OPENPAR date_exp CLOSEPAR
    (68) date_function -> . LAST_DAY OPENPAR date_exp CLOSEPAR
    (69) date_function -> . MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR
    (70) date_function -> . MONTH OPENPAR date_exp CLOSEPAR
    (71) date_function -> . MONTHNAME OPENPAR date_exp CLOSEPAR
    (72) date_function -> . SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR
    (73) date_function -> . YEAR OPENPAR date_exp CLOSEPAR

    DATE_LIT        shift and go to state 46
    ADDDATE         shift and go to state 35
    CURDATE         shift and go to state 29
    CURRENT_DATE    shift and go to state 45
    DATEDIFF        shift and go to state 55
    DAY             shift and go to state 59
    DAYNAME         shift and go to state 48
    DAYOFMONTH      shift and go to state 43
    DAYOFWEEK       shift and go to state 56
    DAYOFYEAR       shift and go to state 49
    LAST_DAY        shift and go to state 58
    MAKEDATE        shift and go to state 57
    MONTH           shift and go to state 33
    MONTHNAME       shift and go to state 51
    SUBDATE         shift and go to state 47
    YEAR            shift and go to state 28

    date_function                  shift and go to state 54
    date_exp                       shift and go to state 134

state 91

    (60) date_function -> CURRENT_DATE OPENPAR . CLOSEPAR

    CLOSEPAR        shift and go to state 135


state 92

    (72) date_function -> SUBDATE OPENPAR . date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR
    (56) date_exp -> . date_function
    (57) date_exp -> . DATE_LIT
    (58) date_function -> . ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR
    (59) date_function -> . CURDATE OPENPAR CLOSEPAR
    (60) date_function -> . CURRENT_DATE OPENPAR CLOSEPAR
    (61) date_function -> . CURRENT_DATE
    (62) date_function -> . DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR
    (63) date_function -> . DAY OPENPAR date_exp CLOSEPAR
    (64) date_function -> . DAYNAME OPENPAR date_exp CLOSEPAR
    (65) date_function -> . DAYOFMONTH OPENPAR date_exp CLOSEPAR
    (66) date_function -> . DAYOFWEEK OPENPAR date_exp CLOSEPAR
    (67) date_function -> . DAYOFYEAR OPENPAR date_exp CLOSEPAR
    (68) date_function -> . LAST_DAY OPENPAR date_exp CLOSEPAR
    (69) date_function -> . MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR
    (70) date_function -> . MONTH OPENPAR date_exp CLOSEPAR
    (71) date_function -> . MONTHNAME OPENPAR date_exp CLOSEPAR
    (72) date_function -> . SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR
    (73) date_function -> . YEAR OPENPAR date_exp CLOSEPAR

    DATE_LIT        shift and go to state 46
    ADDDATE         shift and go to state 35
    CURDATE         shift and go to state 29
    CURRENT_DATE    shift and go to state 45
    DATEDIFF        shift and go to state 55
    DAY             shift and go to state 59
    DAYNAME         shift and go to state 48
    DAYOFMONTH      shift and go to state 43
    DAYOFWEEK       shift and go to state 56
    DAYOFYEAR       shift and go to state 49
    LAST_DAY        shift and go to state 58
    MAKEDATE        shift and go to state 57
    MONTH           shift and go to state 33
    MONTHNAME       shift and go to state 51
    SUBDATE         shift and go to state 47
    YEAR            shift and go to state 28

    date_function                  shift and go to state 54
    date_exp                       shift and go to state 136

state 93

    (64) date_function -> DAYNAME OPENPAR . date_exp CLOSEPAR
    (56) date_exp -> . date_function
    (57) date_exp -> . DATE_LIT
    (58) date_function -> . ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR
    (59) date_function -> . CURDATE OPENPAR CLOSEPAR
    (60) date_function -> . CURRENT_DATE OPENPAR CLOSEPAR
    (61) date_function -> . CURRENT_DATE
    (62) date_function -> . DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR
    (63) date_function -> . DAY OPENPAR date_exp CLOSEPAR
    (64) date_function -> . DAYNAME OPENPAR date_exp CLOSEPAR
    (65) date_function -> . DAYOFMONTH OPENPAR date_exp CLOSEPAR
    (66) date_function -> . DAYOFWEEK OPENPAR date_exp CLOSEPAR
    (67) date_function -> . DAYOFYEAR OPENPAR date_exp CLOSEPAR
    (68) date_function -> . LAST_DAY OPENPAR date_exp CLOSEPAR
    (69) date_function -> . MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR
    (70) date_function -> . MONTH OPENPAR date_exp CLOSEPAR
    (71) date_function -> . MONTHNAME OPENPAR date_exp CLOSEPAR
    (72) date_function -> . SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR
    (73) date_function -> . YEAR OPENPAR date_exp CLOSEPAR

    DATE_LIT        shift and go to state 46
    ADDDATE         shift and go to state 35
    CURDATE         shift and go to state 29
    CURRENT_DATE    shift and go to state 45
    DATEDIFF        shift and go to state 55
    DAY             shift and go to state 59
    DAYNAME         shift and go to state 48
    DAYOFMONTH      shift and go to state 43
    DAYOFWEEK       shift and go to state 56
    DAYOFYEAR       shift and go to state 49
    LAST_DAY        shift and go to state 58
    MAKEDATE        shift and go to state 57
    MONTH           shift and go to state 33
    MONTHNAME       shift and go to state 51
    SUBDATE         shift and go to state 47
    YEAR            shift and go to state 28

    date_function                  shift and go to state 54
    date_exp                       shift and go to state 137

state 94

    (67) date_function -> DAYOFYEAR OPENPAR . date_exp CLOSEPAR
    (56) date_exp -> . date_function
    (57) date_exp -> . DATE_LIT
    (58) date_function -> . ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR
    (59) date_function -> . CURDATE OPENPAR CLOSEPAR
    (60) date_function -> . CURRENT_DATE OPENPAR CLOSEPAR
    (61) date_function -> . CURRENT_DATE
    (62) date_function -> . DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR
    (63) date_function -> . DAY OPENPAR date_exp CLOSEPAR
    (64) date_function -> . DAYNAME OPENPAR date_exp CLOSEPAR
    (65) date_function -> . DAYOFMONTH OPENPAR date_exp CLOSEPAR
    (66) date_function -> . DAYOFWEEK OPENPAR date_exp CLOSEPAR
    (67) date_function -> . DAYOFYEAR OPENPAR date_exp CLOSEPAR
    (68) date_function -> . LAST_DAY OPENPAR date_exp CLOSEPAR
    (69) date_function -> . MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR
    (70) date_function -> . MONTH OPENPAR date_exp CLOSEPAR
    (71) date_function -> . MONTHNAME OPENPAR date_exp CLOSEPAR
    (72) date_function -> . SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR
    (73) date_function -> . YEAR OPENPAR date_exp CLOSEPAR

    DATE_LIT        shift and go to state 46
    ADDDATE         shift and go to state 35
    CURDATE         shift and go to state 29
    CURRENT_DATE    shift and go to state 45
    DATEDIFF        shift and go to state 55
    DAY             shift and go to state 59
    DAYNAME         shift and go to state 48
    DAYOFMONTH      shift and go to state 43
    DAYOFWEEK       shift and go to state 56
    DAYOFYEAR       shift and go to state 49
    LAST_DAY        shift and go to state 58
    MAKEDATE        shift and go to state 57
    MONTH           shift and go to state 33
    MONTHNAME       shift and go to state 51
    SUBDATE         shift and go to state 47
    YEAR            shift and go to state 28

    date_function                  shift and go to state 54
    date_exp                       shift and go to state 138

state 95

    (42) num_exp -> num_exp SUBTRACT . num_factor
    (44) num_factor -> . num_factor MULTIPLY num_term
    (45) num_factor -> . num_factor DIVIDE num_term
    (46) num_factor -> . num_factor DIVIDE_INT num_term
    (47) num_factor -> . num_factor MODULO num_term
    (48) num_factor -> . num_term
    (49) num_term -> . OPENPAR num_val CLOSEPAR
    (50) num_term -> . num_val
    (51) num_val -> . INT_LIT
    (52) num_val -> . DOUBLE_LIT
    (53) num_val -> . COLUMN_NAME

    OPENPAR         shift and go to state 38
    INT_LIT         shift and go to state 52
    DOUBLE_LIT      shift and go to state 41
    COLUMN_NAME     shift and go to state 39

    num_factor                     shift and go to state 139
    num_term                       shift and go to state 44
    num_val                        shift and go to state 32

state 96

    (41) num_exp -> num_exp ADD . num_factor
    (44) num_factor -> . num_factor MULTIPLY num_term
    (45) num_factor -> . num_factor DIVIDE num_term
    (46) num_factor -> . num_factor DIVIDE_INT num_term
    (47) num_factor -> . num_factor MODULO num_term
    (48) num_factor -> . num_term
    (49) num_term -> . OPENPAR num_val CLOSEPAR
    (50) num_term -> . num_val
    (51) num_val -> . INT_LIT
    (52) num_val -> . DOUBLE_LIT
    (53) num_val -> . COLUMN_NAME

    OPENPAR         shift and go to state 38
    INT_LIT         shift and go to state 52
    DOUBLE_LIT      shift and go to state 41
    COLUMN_NAME     shift and go to state 39

    num_factor                     shift and go to state 140
    num_term                       shift and go to state 44
    num_val                        shift and go to state 32

state 97

    (37) num_cond -> num_exp comparison_op . num_exp
    (41) num_exp -> . num_exp ADD num_factor
    (42) num_exp -> . num_exp SUBTRACT num_factor
    (43) num_exp -> . num_factor
    (44) num_factor -> . num_factor MULTIPLY num_term
    (45) num_factor -> . num_factor DIVIDE num_term
    (46) num_factor -> . num_factor DIVIDE_INT num_term
    (47) num_factor -> . num_factor MODULO num_term
    (48) num_factor -> . num_term
    (49) num_term -> . OPENPAR num_val CLOSEPAR
    (50) num_term -> . num_val
    (51) num_val -> . INT_LIT
    (52) num_val -> . DOUBLE_LIT
    (53) num_val -> . COLUMN_NAME

    OPENPAR         shift and go to state 38
    INT_LIT         shift and go to state 52
    DOUBLE_LIT      shift and go to state 41
    COLUMN_NAME     shift and go to state 39

    num_factor                     shift and go to state 40
    num_term                       shift and go to state 44
    num_val                        shift and go to state 32
    num_exp                        shift and go to state 141

state 98

    (38) num_cond -> num_exp BETWEEN . num_exp AND num_exp
    (41) num_exp -> . num_exp ADD num_factor
    (42) num_exp -> . num_exp SUBTRACT num_factor
    (43) num_exp -> . num_factor
    (44) num_factor -> . num_factor MULTIPLY num_term
    (45) num_factor -> . num_factor DIVIDE num_term
    (46) num_factor -> . num_factor DIVIDE_INT num_term
    (47) num_factor -> . num_factor MODULO num_term
    (48) num_factor -> . num_term
    (49) num_term -> . OPENPAR num_val CLOSEPAR
    (50) num_term -> . num_val
    (51) num_val -> . INT_LIT
    (52) num_val -> . DOUBLE_LIT
    (53) num_val -> . COLUMN_NAME

    OPENPAR         shift and go to state 38
    INT_LIT         shift and go to state 52
    DOUBLE_LIT      shift and go to state 41
    COLUMN_NAME     shift and go to state 39

    num_factor                     shift and go to state 40
    num_term                       shift and go to state 44
    num_val                        shift and go to state 32
    num_exp                        shift and go to state 142

state 99

    (40) num_cond -> num_exp IS . NULL

    NULL            shift and go to state 143


state 100

    (39) num_cond -> num_exp NOT . NULL

    NULL            shift and go to state 144


state 101

    (71) date_function -> MONTHNAME OPENPAR . date_exp CLOSEPAR
    (56) date_exp -> . date_function
    (57) date_exp -> . DATE_LIT
    (58) date_function -> . ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR
    (59) date_function -> . CURDATE OPENPAR CLOSEPAR
    (60) date_function -> . CURRENT_DATE OPENPAR CLOSEPAR
    (61) date_function -> . CURRENT_DATE
    (62) date_function -> . DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR
    (63) date_function -> . DAY OPENPAR date_exp CLOSEPAR
    (64) date_function -> . DAYNAME OPENPAR date_exp CLOSEPAR
    (65) date_function -> . DAYOFMONTH OPENPAR date_exp CLOSEPAR
    (66) date_function -> . DAYOFWEEK OPENPAR date_exp CLOSEPAR
    (67) date_function -> . DAYOFYEAR OPENPAR date_exp CLOSEPAR
    (68) date_function -> . LAST_DAY OPENPAR date_exp CLOSEPAR
    (69) date_function -> . MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR
    (70) date_function -> . MONTH OPENPAR date_exp CLOSEPAR
    (71) date_function -> . MONTHNAME OPENPAR date_exp CLOSEPAR
    (72) date_function -> . SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR
    (73) date_function -> . YEAR OPENPAR date_exp CLOSEPAR

    DATE_LIT        shift and go to state 46
    ADDDATE         shift and go to state 35
    CURDATE         shift and go to state 29
    CURRENT_DATE    shift and go to state 45
    DATEDIFF        shift and go to state 55
    DAY             shift and go to state 59
    DAYNAME         shift and go to state 48
    DAYOFMONTH      shift and go to state 43
    DAYOFWEEK       shift and go to state 56
    DAYOFYEAR       shift and go to state 49
    LAST_DAY        shift and go to state 58
    MAKEDATE        shift and go to state 57
    MONTH           shift and go to state 33
    MONTHNAME       shift and go to state 51
    SUBDATE         shift and go to state 47
    YEAR            shift and go to state 28

    date_function                  shift and go to state 54
    date_exp                       shift and go to state 145

state 102

    (62) date_function -> DATEDIFF OPENPAR . date_exp COMMA date_exp CLOSEPAR
    (56) date_exp -> . date_function
    (57) date_exp -> . DATE_LIT
    (58) date_function -> . ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR
    (59) date_function -> . CURDATE OPENPAR CLOSEPAR
    (60) date_function -> . CURRENT_DATE OPENPAR CLOSEPAR
    (61) date_function -> . CURRENT_DATE
    (62) date_function -> . DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR
    (63) date_function -> . DAY OPENPAR date_exp CLOSEPAR
    (64) date_function -> . DAYNAME OPENPAR date_exp CLOSEPAR
    (65) date_function -> . DAYOFMONTH OPENPAR date_exp CLOSEPAR
    (66) date_function -> . DAYOFWEEK OPENPAR date_exp CLOSEPAR
    (67) date_function -> . DAYOFYEAR OPENPAR date_exp CLOSEPAR
    (68) date_function -> . LAST_DAY OPENPAR date_exp CLOSEPAR
    (69) date_function -> . MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR
    (70) date_function -> . MONTH OPENPAR date_exp CLOSEPAR
    (71) date_function -> . MONTHNAME OPENPAR date_exp CLOSEPAR
    (72) date_function -> . SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR
    (73) date_function -> . YEAR OPENPAR date_exp CLOSEPAR

    DATE_LIT        shift and go to state 46
    ADDDATE         shift and go to state 35
    CURDATE         shift and go to state 29
    CURRENT_DATE    shift and go to state 45
    DATEDIFF        shift and go to state 55
    DAY             shift and go to state 59
    DAYNAME         shift and go to state 48
    DAYOFMONTH      shift and go to state 43
    DAYOFWEEK       shift and go to state 56
    DAYOFYEAR       shift and go to state 49
    LAST_DAY        shift and go to state 58
    MAKEDATE        shift and go to state 57
    MONTH           shift and go to state 33
    MONTHNAME       shift and go to state 51
    SUBDATE         shift and go to state 47
    YEAR            shift and go to state 28

    date_function                  shift and go to state 54
    date_exp                       shift and go to state 146

state 103

    (66) date_function -> DAYOFWEEK OPENPAR . date_exp CLOSEPAR
    (56) date_exp -> . date_function
    (57) date_exp -> . DATE_LIT
    (58) date_function -> . ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR
    (59) date_function -> . CURDATE OPENPAR CLOSEPAR
    (60) date_function -> . CURRENT_DATE OPENPAR CLOSEPAR
    (61) date_function -> . CURRENT_DATE
    (62) date_function -> . DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR
    (63) date_function -> . DAY OPENPAR date_exp CLOSEPAR
    (64) date_function -> . DAYNAME OPENPAR date_exp CLOSEPAR
    (65) date_function -> . DAYOFMONTH OPENPAR date_exp CLOSEPAR
    (66) date_function -> . DAYOFWEEK OPENPAR date_exp CLOSEPAR
    (67) date_function -> . DAYOFYEAR OPENPAR date_exp CLOSEPAR
    (68) date_function -> . LAST_DAY OPENPAR date_exp CLOSEPAR
    (69) date_function -> . MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR
    (70) date_function -> . MONTH OPENPAR date_exp CLOSEPAR
    (71) date_function -> . MONTHNAME OPENPAR date_exp CLOSEPAR
    (72) date_function -> . SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR
    (73) date_function -> . YEAR OPENPAR date_exp CLOSEPAR

    DATE_LIT        shift and go to state 46
    ADDDATE         shift and go to state 35
    CURDATE         shift and go to state 29
    CURRENT_DATE    shift and go to state 45
    DATEDIFF        shift and go to state 55
    DAY             shift and go to state 59
    DAYNAME         shift and go to state 48
    DAYOFMONTH      shift and go to state 43
    DAYOFWEEK       shift and go to state 56
    DAYOFYEAR       shift and go to state 49
    LAST_DAY        shift and go to state 58
    MAKEDATE        shift and go to state 57
    MONTH           shift and go to state 33
    MONTHNAME       shift and go to state 51
    SUBDATE         shift and go to state 47
    YEAR            shift and go to state 28

    date_function                  shift and go to state 54
    date_exp                       shift and go to state 147

state 104

    (69) date_function -> MAKEDATE OPENPAR . num_exp COMMA num_exp CLOSEPAR
    (41) num_exp -> . num_exp ADD num_factor
    (42) num_exp -> . num_exp SUBTRACT num_factor
    (43) num_exp -> . num_factor
    (44) num_factor -> . num_factor MULTIPLY num_term
    (45) num_factor -> . num_factor DIVIDE num_term
    (46) num_factor -> . num_factor DIVIDE_INT num_term
    (47) num_factor -> . num_factor MODULO num_term
    (48) num_factor -> . num_term
    (49) num_term -> . OPENPAR num_val CLOSEPAR
    (50) num_term -> . num_val
    (51) num_val -> . INT_LIT
    (52) num_val -> . DOUBLE_LIT
    (53) num_val -> . COLUMN_NAME

    OPENPAR         shift and go to state 38
    INT_LIT         shift and go to state 52
    DOUBLE_LIT      shift and go to state 41
    COLUMN_NAME     shift and go to state 39

    num_factor                     shift and go to state 40
    num_term                       shift and go to state 44
    num_val                        shift and go to state 32
    num_exp                        shift and go to state 148

state 105

    (68) date_function -> LAST_DAY OPENPAR . date_exp CLOSEPAR
    (56) date_exp -> . date_function
    (57) date_exp -> . DATE_LIT
    (58) date_function -> . ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR
    (59) date_function -> . CURDATE OPENPAR CLOSEPAR
    (60) date_function -> . CURRENT_DATE OPENPAR CLOSEPAR
    (61) date_function -> . CURRENT_DATE
    (62) date_function -> . DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR
    (63) date_function -> . DAY OPENPAR date_exp CLOSEPAR
    (64) date_function -> . DAYNAME OPENPAR date_exp CLOSEPAR
    (65) date_function -> . DAYOFMONTH OPENPAR date_exp CLOSEPAR
    (66) date_function -> . DAYOFWEEK OPENPAR date_exp CLOSEPAR
    (67) date_function -> . DAYOFYEAR OPENPAR date_exp CLOSEPAR
    (68) date_function -> . LAST_DAY OPENPAR date_exp CLOSEPAR
    (69) date_function -> . MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR
    (70) date_function -> . MONTH OPENPAR date_exp CLOSEPAR
    (71) date_function -> . MONTHNAME OPENPAR date_exp CLOSEPAR
    (72) date_function -> . SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR
    (73) date_function -> . YEAR OPENPAR date_exp CLOSEPAR

    DATE_LIT        shift and go to state 46
    ADDDATE         shift and go to state 35
    CURDATE         shift and go to state 29
    CURRENT_DATE    shift and go to state 45
    DATEDIFF        shift and go to state 55
    DAY             shift and go to state 59
    DAYNAME         shift and go to state 48
    DAYOFMONTH      shift and go to state 43
    DAYOFWEEK       shift and go to state 56
    DAYOFYEAR       shift and go to state 49
    LAST_DAY        shift and go to state 58
    MAKEDATE        shift and go to state 57
    MONTH           shift and go to state 33
    MONTHNAME       shift and go to state 51
    SUBDATE         shift and go to state 47
    YEAR            shift and go to state 28

    date_function                  shift and go to state 54
    date_exp                       shift and go to state 149

state 106

    (63) date_function -> DAY OPENPAR . date_exp CLOSEPAR
    (56) date_exp -> . date_function
    (57) date_exp -> . DATE_LIT
    (58) date_function -> . ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR
    (59) date_function -> . CURDATE OPENPAR CLOSEPAR
    (60) date_function -> . CURRENT_DATE OPENPAR CLOSEPAR
    (61) date_function -> . CURRENT_DATE
    (62) date_function -> . DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR
    (63) date_function -> . DAY OPENPAR date_exp CLOSEPAR
    (64) date_function -> . DAYNAME OPENPAR date_exp CLOSEPAR
    (65) date_function -> . DAYOFMONTH OPENPAR date_exp CLOSEPAR
    (66) date_function -> . DAYOFWEEK OPENPAR date_exp CLOSEPAR
    (67) date_function -> . DAYOFYEAR OPENPAR date_exp CLOSEPAR
    (68) date_function -> . LAST_DAY OPENPAR date_exp CLOSEPAR
    (69) date_function -> . MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR
    (70) date_function -> . MONTH OPENPAR date_exp CLOSEPAR
    (71) date_function -> . MONTHNAME OPENPAR date_exp CLOSEPAR
    (72) date_function -> . SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR
    (73) date_function -> . YEAR OPENPAR date_exp CLOSEPAR

    DATE_LIT        shift and go to state 46
    ADDDATE         shift and go to state 35
    CURDATE         shift and go to state 29
    CURRENT_DATE    shift and go to state 45
    DATEDIFF        shift and go to state 55
    DAY             shift and go to state 59
    DAYNAME         shift and go to state 48
    DAYOFMONTH      shift and go to state 43
    DAYOFWEEK       shift and go to state 56
    DAYOFYEAR       shift and go to state 49
    LAST_DAY        shift and go to state 58
    MAKEDATE        shift and go to state 57
    MONTH           shift and go to state 33
    MONTHNAME       shift and go to state 51
    SUBDATE         shift and go to state 47
    YEAR            shift and go to state 28

    date_function                  shift and go to state 54
    date_exp                       shift and go to state 150

state 107

    (8) select_statement -> SELECT filter_rows_op columns FROM TABLE_NAME WHERE . condition SEMICOLON
    (27) condition -> . string_cond
    (28) condition -> . num_cond
    (29) condition -> . date_cond
    (30) condition -> . NOT OPENPAR string_cond CLOSEPAR
    (31) condition -> . NOT OPENPAR num_cond CLOSEPAR
    (32) condition -> . NOT OPENPAR date_cond CLOSEPAR
    (33) string_cond -> . string_exp LIKE string_exp
    (34) string_cond -> . string_exp NOT LIKE string_exp
    (35) string_cond -> . STRCMP OPENPAR string_exp COMMA string_exp CLOSEPAR
    (37) num_cond -> . num_exp comparison_op num_exp
    (38) num_cond -> . num_exp BETWEEN num_exp AND num_exp
    (39) num_cond -> . num_exp NOT NULL
    (40) num_cond -> . num_exp IS NULL
    (54) date_cond -> . date_exp comparison_op date_exp
    (55) date_cond -> . date_exp
    (36) string_exp -> . STRING_LIT
    (41) num_exp -> . num_exp ADD num_factor
    (42) num_exp -> . num_exp SUBTRACT num_factor
    (43) num_exp -> . num_factor
    (56) date_exp -> . date_function
    (57) date_exp -> . DATE_LIT
    (44) num_factor -> . num_factor MULTIPLY num_term
    (45) num_factor -> . num_factor DIVIDE num_term
    (46) num_factor -> . num_factor DIVIDE_INT num_term
    (47) num_factor -> . num_factor MODULO num_term
    (48) num_factor -> . num_term
    (58) date_function -> . ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR
    (59) date_function -> . CURDATE OPENPAR CLOSEPAR
    (60) date_function -> . CURRENT_DATE OPENPAR CLOSEPAR
    (61) date_function -> . CURRENT_DATE
    (62) date_function -> . DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR
    (63) date_function -> . DAY OPENPAR date_exp CLOSEPAR
    (64) date_function -> . DAYNAME OPENPAR date_exp CLOSEPAR
    (65) date_function -> . DAYOFMONTH OPENPAR date_exp CLOSEPAR
    (66) date_function -> . DAYOFWEEK OPENPAR date_exp CLOSEPAR
    (67) date_function -> . DAYOFYEAR OPENPAR date_exp CLOSEPAR
    (68) date_function -> . LAST_DAY OPENPAR date_exp CLOSEPAR
    (69) date_function -> . MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR
    (70) date_function -> . MONTH OPENPAR date_exp CLOSEPAR
    (71) date_function -> . MONTHNAME OPENPAR date_exp CLOSEPAR
    (72) date_function -> . SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR
    (73) date_function -> . YEAR OPENPAR date_exp CLOSEPAR
    (49) num_term -> . OPENPAR num_val CLOSEPAR
    (50) num_term -> . num_val
    (51) num_val -> . INT_LIT
    (52) num_val -> . DOUBLE_LIT
    (53) num_val -> . COLUMN_NAME

    NOT             shift and go to state 36
    STRCMP          shift and go to state 42
    STRING_LIT      shift and go to state 37
    DATE_LIT        shift and go to state 46
    ADDDATE         shift and go to state 35
    CURDATE         shift and go to state 29
    CURRENT_DATE    shift and go to state 45
    DATEDIFF        shift and go to state 55
    DAY             shift and go to state 59
    DAYNAME         shift and go to state 48
    DAYOFMONTH      shift and go to state 43
    DAYOFWEEK       shift and go to state 56
    DAYOFYEAR       shift and go to state 49
    LAST_DAY        shift and go to state 58
    MAKEDATE        shift and go to state 57
    MONTH           shift and go to state 33
    MONTHNAME       shift and go to state 51
    SUBDATE         shift and go to state 47
    YEAR            shift and go to state 28
    OPENPAR         shift and go to state 38
    INT_LIT         shift and go to state 52
    DOUBLE_LIT      shift and go to state 41
    COLUMN_NAME     shift and go to state 39

    num_factor                     shift and go to state 40
    date_function                  shift and go to state 54
    num_exp                        shift and go to state 50
    condition                      shift and go to state 151
    num_term                       shift and go to state 44
    num_val                        shift and go to state 32
    date_exp                       shift and go to state 34
    string_cond                    shift and go to state 60
    date_cond                      shift and go to state 53
    string_exp                     shift and go to state 31
    num_cond                       shift and go to state 61

state 108

    (7) select_statement -> SELECT filter_rows_op columns FROM TABLE_NAME SEMICOLON .

    $end            reduce using rule 7 (select_statement -> SELECT filter_rows_op columns FROM TABLE_NAME SEMICOLON .)


state 109

    (5) insert_statement -> INSERT into_kw TABLE_NAME OPENPAR column_name CLOSEPAR . VALUES OPENPAR value_list CLOSEPAR

    VALUES          shift and go to state 152


state 110

    (4) insert_statement -> INSERT into_kw TABLE_NAME VALUES OPENPAR value_list . CLOSEPAR
    (22) value_list -> value_list . COMMA literals

    CLOSEPAR        shift and go to state 154
    COMMA           shift and go to state 153


state 111

    (21) value_list -> literals .

    CLOSEPAR        reduce using rule 21 (value_list -> literals .)
    COMMA           reduce using rule 21 (value_list -> literals .)


state 112

    (24) literals -> INT_LIT .

    CLOSEPAR        reduce using rule 24 (literals -> INT_LIT .)
    COMMA           reduce using rule 24 (literals -> INT_LIT .)
    $end            reduce using rule 24 (literals -> INT_LIT .)


state 113

    (26) literals -> DATE_LIT .

    CLOSEPAR        reduce using rule 26 (literals -> DATE_LIT .)
    COMMA           reduce using rule 26 (literals -> DATE_LIT .)
    $end            reduce using rule 26 (literals -> DATE_LIT .)


state 114

    (25) literals -> DOUBLE_LIT .

    CLOSEPAR        reduce using rule 25 (literals -> DOUBLE_LIT .)
    COMMA           reduce using rule 25 (literals -> DOUBLE_LIT .)
    $end            reduce using rule 25 (literals -> DOUBLE_LIT .)


state 115

    (23) literals -> STRING_LIT .

    CLOSEPAR        reduce using rule 23 (literals -> STRING_LIT .)
    COMMA           reduce using rule 23 (literals -> STRING_LIT .)
    $end            reduce using rule 23 (literals -> STRING_LIT .)


state 116

    (20) assignment_list -> assignment_list COMMA . COLUMN_NAME EQUAL literals

    COLUMN_NAME     shift and go to state 155


state 117

    (19) assignment_list -> COLUMN_NAME EQUAL . literals
    (23) literals -> . STRING_LIT
    (24) literals -> . INT_LIT
    (25) literals -> . DOUBLE_LIT
    (26) literals -> . DATE_LIT

    STRING_LIT      shift and go to state 115
    INT_LIT         shift and go to state 112
    DOUBLE_LIT      shift and go to state 114
    DATE_LIT        shift and go to state 113

    literals                       shift and go to state 156

state 118

    (73) date_function -> YEAR OPENPAR date_exp . CLOSEPAR

    CLOSEPAR        shift and go to state 157


state 119

    (59) date_function -> CURDATE OPENPAR CLOSEPAR .

    GE              reduce using rule 59 (date_function -> CURDATE OPENPAR CLOSEPAR .)
    GT              reduce using rule 59 (date_function -> CURDATE OPENPAR CLOSEPAR .)
    LE              reduce using rule 59 (date_function -> CURDATE OPENPAR CLOSEPAR .)
    LT              reduce using rule 59 (date_function -> CURDATE OPENPAR CLOSEPAR .)
    NE              reduce using rule 59 (date_function -> CURDATE OPENPAR CLOSEPAR .)
    EQUAL           reduce using rule 59 (date_function -> CURDATE OPENPAR CLOSEPAR .)
    EQUAL_NULL      reduce using rule 59 (date_function -> CURDATE OPENPAR CLOSEPAR .)
    SEMICOLON       reduce using rule 59 (date_function -> CURDATE OPENPAR CLOSEPAR .)
    COMMA           reduce using rule 59 (date_function -> CURDATE OPENPAR CLOSEPAR .)
    CLOSEPAR        reduce using rule 59 (date_function -> CURDATE OPENPAR CLOSEPAR .)


state 120

    (34) string_cond -> string_exp NOT LIKE . string_exp
    (36) string_exp -> . STRING_LIT

    STRING_LIT      shift and go to state 37

    string_exp                     shift and go to state 158

state 121

    (33) string_cond -> string_exp LIKE string_exp .

    SEMICOLON       reduce using rule 33 (string_cond -> string_exp LIKE string_exp .)
    CLOSEPAR        reduce using rule 33 (string_cond -> string_exp LIKE string_exp .)


state 122

    (70) date_function -> MONTH OPENPAR date_exp . CLOSEPAR

    CLOSEPAR        shift and go to state 159


state 123

    (54) date_cond -> date_exp comparison_op date_exp .

    SEMICOLON       reduce using rule 54 (date_cond -> date_exp comparison_op date_exp .)
    CLOSEPAR        reduce using rule 54 (date_cond -> date_exp comparison_op date_exp .)


state 124

    (58) date_function -> ADDDATE OPENPAR date_exp . COMMA date_exp CLOSEPAR

    COMMA           shift and go to state 160


state 125

    (32) condition -> NOT OPENPAR date_cond . CLOSEPAR

    CLOSEPAR        shift and go to state 161


state 126

    (30) condition -> NOT OPENPAR string_cond . CLOSEPAR

    CLOSEPAR        shift and go to state 162


state 127

    (31) condition -> NOT OPENPAR num_cond . CLOSEPAR

    CLOSEPAR        shift and go to state 163


state 128

    (49) num_term -> OPENPAR num_val CLOSEPAR .

    MULTIPLY        reduce using rule 49 (num_term -> OPENPAR num_val CLOSEPAR .)
    DIVIDE          reduce using rule 49 (num_term -> OPENPAR num_val CLOSEPAR .)
    DIVIDE_INT      reduce using rule 49 (num_term -> OPENPAR num_val CLOSEPAR .)
    MODULO          reduce using rule 49 (num_term -> OPENPAR num_val CLOSEPAR .)
    COMMA           reduce using rule 49 (num_term -> OPENPAR num_val CLOSEPAR .)
    ADD             reduce using rule 49 (num_term -> OPENPAR num_val CLOSEPAR .)
    SUBTRACT        reduce using rule 49 (num_term -> OPENPAR num_val CLOSEPAR .)
    BETWEEN         reduce using rule 49 (num_term -> OPENPAR num_val CLOSEPAR .)
    NOT             reduce using rule 49 (num_term -> OPENPAR num_val CLOSEPAR .)
    IS              reduce using rule 49 (num_term -> OPENPAR num_val CLOSEPAR .)
    GE              reduce using rule 49 (num_term -> OPENPAR num_val CLOSEPAR .)
    GT              reduce using rule 49 (num_term -> OPENPAR num_val CLOSEPAR .)
    LE              reduce using rule 49 (num_term -> OPENPAR num_val CLOSEPAR .)
    LT              reduce using rule 49 (num_term -> OPENPAR num_val CLOSEPAR .)
    NE              reduce using rule 49 (num_term -> OPENPAR num_val CLOSEPAR .)
    EQUAL           reduce using rule 49 (num_term -> OPENPAR num_val CLOSEPAR .)
    EQUAL_NULL      reduce using rule 49 (num_term -> OPENPAR num_val CLOSEPAR .)
    SEMICOLON       reduce using rule 49 (num_term -> OPENPAR num_val CLOSEPAR .)
    CLOSEPAR        reduce using rule 49 (num_term -> OPENPAR num_val CLOSEPAR .)
    AND             reduce using rule 49 (num_term -> OPENPAR num_val CLOSEPAR .)
    DATE_UNIT       reduce using rule 49 (num_term -> OPENPAR num_val CLOSEPAR .)


state 129

    (45) num_factor -> num_factor DIVIDE num_term .

    MULTIPLY        reduce using rule 45 (num_factor -> num_factor DIVIDE num_term .)
    DIVIDE          reduce using rule 45 (num_factor -> num_factor DIVIDE num_term .)
    DIVIDE_INT      reduce using rule 45 (num_factor -> num_factor DIVIDE num_term .)
    MODULO          reduce using rule 45 (num_factor -> num_factor DIVIDE num_term .)
    AND             reduce using rule 45 (num_factor -> num_factor DIVIDE num_term .)
    ADD             reduce using rule 45 (num_factor -> num_factor DIVIDE num_term .)
    SUBTRACT        reduce using rule 45 (num_factor -> num_factor DIVIDE num_term .)
    SEMICOLON       reduce using rule 45 (num_factor -> num_factor DIVIDE num_term .)
    CLOSEPAR        reduce using rule 45 (num_factor -> num_factor DIVIDE num_term .)
    BETWEEN         reduce using rule 45 (num_factor -> num_factor DIVIDE num_term .)
    NOT             reduce using rule 45 (num_factor -> num_factor DIVIDE num_term .)
    IS              reduce using rule 45 (num_factor -> num_factor DIVIDE num_term .)
    GE              reduce using rule 45 (num_factor -> num_factor DIVIDE num_term .)
    GT              reduce using rule 45 (num_factor -> num_factor DIVIDE num_term .)
    LE              reduce using rule 45 (num_factor -> num_factor DIVIDE num_term .)
    LT              reduce using rule 45 (num_factor -> num_factor DIVIDE num_term .)
    NE              reduce using rule 45 (num_factor -> num_factor DIVIDE num_term .)
    EQUAL           reduce using rule 45 (num_factor -> num_factor DIVIDE num_term .)
    EQUAL_NULL      reduce using rule 45 (num_factor -> num_factor DIVIDE num_term .)
    COMMA           reduce using rule 45 (num_factor -> num_factor DIVIDE num_term .)
    DATE_UNIT       reduce using rule 45 (num_factor -> num_factor DIVIDE num_term .)


state 130

    (46) num_factor -> num_factor DIVIDE_INT num_term .

    MULTIPLY        reduce using rule 46 (num_factor -> num_factor DIVIDE_INT num_term .)
    DIVIDE          reduce using rule 46 (num_factor -> num_factor DIVIDE_INT num_term .)
    DIVIDE_INT      reduce using rule 46 (num_factor -> num_factor DIVIDE_INT num_term .)
    MODULO          reduce using rule 46 (num_factor -> num_factor DIVIDE_INT num_term .)
    AND             reduce using rule 46 (num_factor -> num_factor DIVIDE_INT num_term .)
    ADD             reduce using rule 46 (num_factor -> num_factor DIVIDE_INT num_term .)
    SUBTRACT        reduce using rule 46 (num_factor -> num_factor DIVIDE_INT num_term .)
    SEMICOLON       reduce using rule 46 (num_factor -> num_factor DIVIDE_INT num_term .)
    CLOSEPAR        reduce using rule 46 (num_factor -> num_factor DIVIDE_INT num_term .)
    BETWEEN         reduce using rule 46 (num_factor -> num_factor DIVIDE_INT num_term .)
    NOT             reduce using rule 46 (num_factor -> num_factor DIVIDE_INT num_term .)
    IS              reduce using rule 46 (num_factor -> num_factor DIVIDE_INT num_term .)
    GE              reduce using rule 46 (num_factor -> num_factor DIVIDE_INT num_term .)
    GT              reduce using rule 46 (num_factor -> num_factor DIVIDE_INT num_term .)
    LE              reduce using rule 46 (num_factor -> num_factor DIVIDE_INT num_term .)
    LT              reduce using rule 46 (num_factor -> num_factor DIVIDE_INT num_term .)
    NE              reduce using rule 46 (num_factor -> num_factor DIVIDE_INT num_term .)
    EQUAL           reduce using rule 46 (num_factor -> num_factor DIVIDE_INT num_term .)
    EQUAL_NULL      reduce using rule 46 (num_factor -> num_factor DIVIDE_INT num_term .)
    COMMA           reduce using rule 46 (num_factor -> num_factor DIVIDE_INT num_term .)
    DATE_UNIT       reduce using rule 46 (num_factor -> num_factor DIVIDE_INT num_term .)


state 131

    (44) num_factor -> num_factor MULTIPLY num_term .

    MULTIPLY        reduce using rule 44 (num_factor -> num_factor MULTIPLY num_term .)
    DIVIDE          reduce using rule 44 (num_factor -> num_factor MULTIPLY num_term .)
    DIVIDE_INT      reduce using rule 44 (num_factor -> num_factor MULTIPLY num_term .)
    MODULO          reduce using rule 44 (num_factor -> num_factor MULTIPLY num_term .)
    AND             reduce using rule 44 (num_factor -> num_factor MULTIPLY num_term .)
    ADD             reduce using rule 44 (num_factor -> num_factor MULTIPLY num_term .)
    SUBTRACT        reduce using rule 44 (num_factor -> num_factor MULTIPLY num_term .)
    SEMICOLON       reduce using rule 44 (num_factor -> num_factor MULTIPLY num_term .)
    CLOSEPAR        reduce using rule 44 (num_factor -> num_factor MULTIPLY num_term .)
    BETWEEN         reduce using rule 44 (num_factor -> num_factor MULTIPLY num_term .)
    NOT             reduce using rule 44 (num_factor -> num_factor MULTIPLY num_term .)
    IS              reduce using rule 44 (num_factor -> num_factor MULTIPLY num_term .)
    GE              reduce using rule 44 (num_factor -> num_factor MULTIPLY num_term .)
    GT              reduce using rule 44 (num_factor -> num_factor MULTIPLY num_term .)
    LE              reduce using rule 44 (num_factor -> num_factor MULTIPLY num_term .)
    LT              reduce using rule 44 (num_factor -> num_factor MULTIPLY num_term .)
    NE              reduce using rule 44 (num_factor -> num_factor MULTIPLY num_term .)
    EQUAL           reduce using rule 44 (num_factor -> num_factor MULTIPLY num_term .)
    EQUAL_NULL      reduce using rule 44 (num_factor -> num_factor MULTIPLY num_term .)
    COMMA           reduce using rule 44 (num_factor -> num_factor MULTIPLY num_term .)
    DATE_UNIT       reduce using rule 44 (num_factor -> num_factor MULTIPLY num_term .)


state 132

    (47) num_factor -> num_factor MODULO num_term .

    MULTIPLY        reduce using rule 47 (num_factor -> num_factor MODULO num_term .)
    DIVIDE          reduce using rule 47 (num_factor -> num_factor MODULO num_term .)
    DIVIDE_INT      reduce using rule 47 (num_factor -> num_factor MODULO num_term .)
    MODULO          reduce using rule 47 (num_factor -> num_factor MODULO num_term .)
    AND             reduce using rule 47 (num_factor -> num_factor MODULO num_term .)
    ADD             reduce using rule 47 (num_factor -> num_factor MODULO num_term .)
    SUBTRACT        reduce using rule 47 (num_factor -> num_factor MODULO num_term .)
    SEMICOLON       reduce using rule 47 (num_factor -> num_factor MODULO num_term .)
    CLOSEPAR        reduce using rule 47 (num_factor -> num_factor MODULO num_term .)
    BETWEEN         reduce using rule 47 (num_factor -> num_factor MODULO num_term .)
    NOT             reduce using rule 47 (num_factor -> num_factor MODULO num_term .)
    IS              reduce using rule 47 (num_factor -> num_factor MODULO num_term .)
    GE              reduce using rule 47 (num_factor -> num_factor MODULO num_term .)
    GT              reduce using rule 47 (num_factor -> num_factor MODULO num_term .)
    LE              reduce using rule 47 (num_factor -> num_factor MODULO num_term .)
    LT              reduce using rule 47 (num_factor -> num_factor MODULO num_term .)
    NE              reduce using rule 47 (num_factor -> num_factor MODULO num_term .)
    EQUAL           reduce using rule 47 (num_factor -> num_factor MODULO num_term .)
    EQUAL_NULL      reduce using rule 47 (num_factor -> num_factor MODULO num_term .)
    COMMA           reduce using rule 47 (num_factor -> num_factor MODULO num_term .)
    DATE_UNIT       reduce using rule 47 (num_factor -> num_factor MODULO num_term .)


state 133

    (35) string_cond -> STRCMP OPENPAR string_exp . COMMA string_exp CLOSEPAR

    COMMA           shift and go to state 164


state 134

    (65) date_function -> DAYOFMONTH OPENPAR date_exp . CLOSEPAR

    CLOSEPAR        shift and go to state 165


state 135

    (60) date_function -> CURRENT_DATE OPENPAR CLOSEPAR .

    GE              reduce using rule 60 (date_function -> CURRENT_DATE OPENPAR CLOSEPAR .)
    GT              reduce using rule 60 (date_function -> CURRENT_DATE OPENPAR CLOSEPAR .)
    LE              reduce using rule 60 (date_function -> CURRENT_DATE OPENPAR CLOSEPAR .)
    LT              reduce using rule 60 (date_function -> CURRENT_DATE OPENPAR CLOSEPAR .)
    NE              reduce using rule 60 (date_function -> CURRENT_DATE OPENPAR CLOSEPAR .)
    EQUAL           reduce using rule 60 (date_function -> CURRENT_DATE OPENPAR CLOSEPAR .)
    EQUAL_NULL      reduce using rule 60 (date_function -> CURRENT_DATE OPENPAR CLOSEPAR .)
    SEMICOLON       reduce using rule 60 (date_function -> CURRENT_DATE OPENPAR CLOSEPAR .)
    COMMA           reduce using rule 60 (date_function -> CURRENT_DATE OPENPAR CLOSEPAR .)
    CLOSEPAR        reduce using rule 60 (date_function -> CURRENT_DATE OPENPAR CLOSEPAR .)


state 136

    (72) date_function -> SUBDATE OPENPAR date_exp . COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR

    COMMA           shift and go to state 166


state 137

    (64) date_function -> DAYNAME OPENPAR date_exp . CLOSEPAR

    CLOSEPAR        shift and go to state 167


state 138

    (67) date_function -> DAYOFYEAR OPENPAR date_exp . CLOSEPAR

    CLOSEPAR        shift and go to state 168


state 139

    (42) num_exp -> num_exp SUBTRACT num_factor .
    (44) num_factor -> num_factor . MULTIPLY num_term
    (45) num_factor -> num_factor . DIVIDE num_term
    (46) num_factor -> num_factor . DIVIDE_INT num_term
    (47) num_factor -> num_factor . MODULO num_term

    CLOSEPAR        reduce using rule 42 (num_exp -> num_exp SUBTRACT num_factor .)
    ADD             reduce using rule 42 (num_exp -> num_exp SUBTRACT num_factor .)
    SUBTRACT        reduce using rule 42 (num_exp -> num_exp SUBTRACT num_factor .)
    SEMICOLON       reduce using rule 42 (num_exp -> num_exp SUBTRACT num_factor .)
    COMMA           reduce using rule 42 (num_exp -> num_exp SUBTRACT num_factor .)
    BETWEEN         reduce using rule 42 (num_exp -> num_exp SUBTRACT num_factor .)
    NOT             reduce using rule 42 (num_exp -> num_exp SUBTRACT num_factor .)
    IS              reduce using rule 42 (num_exp -> num_exp SUBTRACT num_factor .)
    GE              reduce using rule 42 (num_exp -> num_exp SUBTRACT num_factor .)
    GT              reduce using rule 42 (num_exp -> num_exp SUBTRACT num_factor .)
    LE              reduce using rule 42 (num_exp -> num_exp SUBTRACT num_factor .)
    LT              reduce using rule 42 (num_exp -> num_exp SUBTRACT num_factor .)
    NE              reduce using rule 42 (num_exp -> num_exp SUBTRACT num_factor .)
    EQUAL           reduce using rule 42 (num_exp -> num_exp SUBTRACT num_factor .)
    EQUAL_NULL      reduce using rule 42 (num_exp -> num_exp SUBTRACT num_factor .)
    AND             reduce using rule 42 (num_exp -> num_exp SUBTRACT num_factor .)
    DATE_UNIT       reduce using rule 42 (num_exp -> num_exp SUBTRACT num_factor .)
    MULTIPLY        shift and go to state 87
    DIVIDE          shift and go to state 85
    DIVIDE_INT      shift and go to state 86
    MODULO          shift and go to state 88


state 140

    (41) num_exp -> num_exp ADD num_factor .
    (44) num_factor -> num_factor . MULTIPLY num_term
    (45) num_factor -> num_factor . DIVIDE num_term
    (46) num_factor -> num_factor . DIVIDE_INT num_term
    (47) num_factor -> num_factor . MODULO num_term

    CLOSEPAR        reduce using rule 41 (num_exp -> num_exp ADD num_factor .)
    ADD             reduce using rule 41 (num_exp -> num_exp ADD num_factor .)
    SUBTRACT        reduce using rule 41 (num_exp -> num_exp ADD num_factor .)
    SEMICOLON       reduce using rule 41 (num_exp -> num_exp ADD num_factor .)
    COMMA           reduce using rule 41 (num_exp -> num_exp ADD num_factor .)
    BETWEEN         reduce using rule 41 (num_exp -> num_exp ADD num_factor .)
    NOT             reduce using rule 41 (num_exp -> num_exp ADD num_factor .)
    IS              reduce using rule 41 (num_exp -> num_exp ADD num_factor .)
    GE              reduce using rule 41 (num_exp -> num_exp ADD num_factor .)
    GT              reduce using rule 41 (num_exp -> num_exp ADD num_factor .)
    LE              reduce using rule 41 (num_exp -> num_exp ADD num_factor .)
    LT              reduce using rule 41 (num_exp -> num_exp ADD num_factor .)
    NE              reduce using rule 41 (num_exp -> num_exp ADD num_factor .)
    EQUAL           reduce using rule 41 (num_exp -> num_exp ADD num_factor .)
    EQUAL_NULL      reduce using rule 41 (num_exp -> num_exp ADD num_factor .)
    AND             reduce using rule 41 (num_exp -> num_exp ADD num_factor .)
    DATE_UNIT       reduce using rule 41 (num_exp -> num_exp ADD num_factor .)
    MULTIPLY        shift and go to state 87
    DIVIDE          shift and go to state 85
    DIVIDE_INT      shift and go to state 86
    MODULO          shift and go to state 88


state 141

    (37) num_cond -> num_exp comparison_op num_exp .
    (41) num_exp -> num_exp . ADD num_factor
    (42) num_exp -> num_exp . SUBTRACT num_factor

    CLOSEPAR        reduce using rule 37 (num_cond -> num_exp comparison_op num_exp .)
    SEMICOLON       reduce using rule 37 (num_cond -> num_exp comparison_op num_exp .)
    ADD             shift and go to state 96
    SUBTRACT        shift and go to state 95


state 142

    (38) num_cond -> num_exp BETWEEN num_exp . AND num_exp
    (41) num_exp -> num_exp . ADD num_factor
    (42) num_exp -> num_exp . SUBTRACT num_factor

    AND             shift and go to state 169
    ADD             shift and go to state 96
    SUBTRACT        shift and go to state 95


state 143

    (40) num_cond -> num_exp IS NULL .

    CLOSEPAR        reduce using rule 40 (num_cond -> num_exp IS NULL .)
    SEMICOLON       reduce using rule 40 (num_cond -> num_exp IS NULL .)


state 144

    (39) num_cond -> num_exp NOT NULL .

    CLOSEPAR        reduce using rule 39 (num_cond -> num_exp NOT NULL .)
    SEMICOLON       reduce using rule 39 (num_cond -> num_exp NOT NULL .)


state 145

    (71) date_function -> MONTHNAME OPENPAR date_exp . CLOSEPAR

    CLOSEPAR        shift and go to state 170


state 146

    (62) date_function -> DATEDIFF OPENPAR date_exp . COMMA date_exp CLOSEPAR

    COMMA           shift and go to state 171


state 147

    (66) date_function -> DAYOFWEEK OPENPAR date_exp . CLOSEPAR

    CLOSEPAR        shift and go to state 172


state 148

    (69) date_function -> MAKEDATE OPENPAR num_exp . COMMA num_exp CLOSEPAR
    (41) num_exp -> num_exp . ADD num_factor
    (42) num_exp -> num_exp . SUBTRACT num_factor

    COMMA           shift and go to state 173
    ADD             shift and go to state 96
    SUBTRACT        shift and go to state 95


state 149

    (68) date_function -> LAST_DAY OPENPAR date_exp . CLOSEPAR

    CLOSEPAR        shift and go to state 174


state 150

    (63) date_function -> DAY OPENPAR date_exp . CLOSEPAR

    CLOSEPAR        shift and go to state 175


state 151

    (8) select_statement -> SELECT filter_rows_op columns FROM TABLE_NAME WHERE condition . SEMICOLON

    SEMICOLON       shift and go to state 176


state 152

    (5) insert_statement -> INSERT into_kw TABLE_NAME OPENPAR column_name CLOSEPAR VALUES . OPENPAR value_list CLOSEPAR

    OPENPAR         shift and go to state 177


state 153

    (22) value_list -> value_list COMMA . literals
    (23) literals -> . STRING_LIT
    (24) literals -> . INT_LIT
    (25) literals -> . DOUBLE_LIT
    (26) literals -> . DATE_LIT

    STRING_LIT      shift and go to state 115
    INT_LIT         shift and go to state 112
    DOUBLE_LIT      shift and go to state 114
    DATE_LIT        shift and go to state 113

    literals                       shift and go to state 178

state 154

    (4) insert_statement -> INSERT into_kw TABLE_NAME VALUES OPENPAR value_list CLOSEPAR .

    $end            reduce using rule 4 (insert_statement -> INSERT into_kw TABLE_NAME VALUES OPENPAR value_list CLOSEPAR .)


state 155

    (20) assignment_list -> assignment_list COMMA COLUMN_NAME . EQUAL literals

    EQUAL           shift and go to state 179


state 156

    (19) assignment_list -> COLUMN_NAME EQUAL literals .

    COMMA           reduce using rule 19 (assignment_list -> COLUMN_NAME EQUAL literals .)
    $end            reduce using rule 19 (assignment_list -> COLUMN_NAME EQUAL literals .)


state 157

    (73) date_function -> YEAR OPENPAR date_exp CLOSEPAR .

    GE              reduce using rule 73 (date_function -> YEAR OPENPAR date_exp CLOSEPAR .)
    GT              reduce using rule 73 (date_function -> YEAR OPENPAR date_exp CLOSEPAR .)
    LE              reduce using rule 73 (date_function -> YEAR OPENPAR date_exp CLOSEPAR .)
    LT              reduce using rule 73 (date_function -> YEAR OPENPAR date_exp CLOSEPAR .)
    NE              reduce using rule 73 (date_function -> YEAR OPENPAR date_exp CLOSEPAR .)
    EQUAL           reduce using rule 73 (date_function -> YEAR OPENPAR date_exp CLOSEPAR .)
    EQUAL_NULL      reduce using rule 73 (date_function -> YEAR OPENPAR date_exp CLOSEPAR .)
    SEMICOLON       reduce using rule 73 (date_function -> YEAR OPENPAR date_exp CLOSEPAR .)
    COMMA           reduce using rule 73 (date_function -> YEAR OPENPAR date_exp CLOSEPAR .)
    CLOSEPAR        reduce using rule 73 (date_function -> YEAR OPENPAR date_exp CLOSEPAR .)


state 158

    (34) string_cond -> string_exp NOT LIKE string_exp .

    SEMICOLON       reduce using rule 34 (string_cond -> string_exp NOT LIKE string_exp .)
    CLOSEPAR        reduce using rule 34 (string_cond -> string_exp NOT LIKE string_exp .)


state 159

    (70) date_function -> MONTH OPENPAR date_exp CLOSEPAR .

    GE              reduce using rule 70 (date_function -> MONTH OPENPAR date_exp CLOSEPAR .)
    GT              reduce using rule 70 (date_function -> MONTH OPENPAR date_exp CLOSEPAR .)
    LE              reduce using rule 70 (date_function -> MONTH OPENPAR date_exp CLOSEPAR .)
    LT              reduce using rule 70 (date_function -> MONTH OPENPAR date_exp CLOSEPAR .)
    NE              reduce using rule 70 (date_function -> MONTH OPENPAR date_exp CLOSEPAR .)
    EQUAL           reduce using rule 70 (date_function -> MONTH OPENPAR date_exp CLOSEPAR .)
    EQUAL_NULL      reduce using rule 70 (date_function -> MONTH OPENPAR date_exp CLOSEPAR .)
    SEMICOLON       reduce using rule 70 (date_function -> MONTH OPENPAR date_exp CLOSEPAR .)
    COMMA           reduce using rule 70 (date_function -> MONTH OPENPAR date_exp CLOSEPAR .)
    CLOSEPAR        reduce using rule 70 (date_function -> MONTH OPENPAR date_exp CLOSEPAR .)


state 160

    (58) date_function -> ADDDATE OPENPAR date_exp COMMA . date_exp CLOSEPAR
    (56) date_exp -> . date_function
    (57) date_exp -> . DATE_LIT
    (58) date_function -> . ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR
    (59) date_function -> . CURDATE OPENPAR CLOSEPAR
    (60) date_function -> . CURRENT_DATE OPENPAR CLOSEPAR
    (61) date_function -> . CURRENT_DATE
    (62) date_function -> . DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR
    (63) date_function -> . DAY OPENPAR date_exp CLOSEPAR
    (64) date_function -> . DAYNAME OPENPAR date_exp CLOSEPAR
    (65) date_function -> . DAYOFMONTH OPENPAR date_exp CLOSEPAR
    (66) date_function -> . DAYOFWEEK OPENPAR date_exp CLOSEPAR
    (67) date_function -> . DAYOFYEAR OPENPAR date_exp CLOSEPAR
    (68) date_function -> . LAST_DAY OPENPAR date_exp CLOSEPAR
    (69) date_function -> . MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR
    (70) date_function -> . MONTH OPENPAR date_exp CLOSEPAR
    (71) date_function -> . MONTHNAME OPENPAR date_exp CLOSEPAR
    (72) date_function -> . SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR
    (73) date_function -> . YEAR OPENPAR date_exp CLOSEPAR

    DATE_LIT        shift and go to state 46
    ADDDATE         shift and go to state 35
    CURDATE         shift and go to state 29
    CURRENT_DATE    shift and go to state 45
    DATEDIFF        shift and go to state 55
    DAY             shift and go to state 59
    DAYNAME         shift and go to state 48
    DAYOFMONTH      shift and go to state 43
    DAYOFWEEK       shift and go to state 56
    DAYOFYEAR       shift and go to state 49
    LAST_DAY        shift and go to state 58
    MAKEDATE        shift and go to state 57
    MONTH           shift and go to state 33
    MONTHNAME       shift and go to state 51
    SUBDATE         shift and go to state 47
    YEAR            shift and go to state 28

    date_function                  shift and go to state 54
    date_exp                       shift and go to state 180

state 161

    (32) condition -> NOT OPENPAR date_cond CLOSEPAR .

    SEMICOLON       reduce using rule 32 (condition -> NOT OPENPAR date_cond CLOSEPAR .)


state 162

    (30) condition -> NOT OPENPAR string_cond CLOSEPAR .

    SEMICOLON       reduce using rule 30 (condition -> NOT OPENPAR string_cond CLOSEPAR .)


state 163

    (31) condition -> NOT OPENPAR num_cond CLOSEPAR .

    SEMICOLON       reduce using rule 31 (condition -> NOT OPENPAR num_cond CLOSEPAR .)


state 164

    (35) string_cond -> STRCMP OPENPAR string_exp COMMA . string_exp CLOSEPAR
    (36) string_exp -> . STRING_LIT

    STRING_LIT      shift and go to state 37

    string_exp                     shift and go to state 181

state 165

    (65) date_function -> DAYOFMONTH OPENPAR date_exp CLOSEPAR .

    GE              reduce using rule 65 (date_function -> DAYOFMONTH OPENPAR date_exp CLOSEPAR .)
    GT              reduce using rule 65 (date_function -> DAYOFMONTH OPENPAR date_exp CLOSEPAR .)
    LE              reduce using rule 65 (date_function -> DAYOFMONTH OPENPAR date_exp CLOSEPAR .)
    LT              reduce using rule 65 (date_function -> DAYOFMONTH OPENPAR date_exp CLOSEPAR .)
    NE              reduce using rule 65 (date_function -> DAYOFMONTH OPENPAR date_exp CLOSEPAR .)
    EQUAL           reduce using rule 65 (date_function -> DAYOFMONTH OPENPAR date_exp CLOSEPAR .)
    EQUAL_NULL      reduce using rule 65 (date_function -> DAYOFMONTH OPENPAR date_exp CLOSEPAR .)
    SEMICOLON       reduce using rule 65 (date_function -> DAYOFMONTH OPENPAR date_exp CLOSEPAR .)
    COMMA           reduce using rule 65 (date_function -> DAYOFMONTH OPENPAR date_exp CLOSEPAR .)
    CLOSEPAR        reduce using rule 65 (date_function -> DAYOFMONTH OPENPAR date_exp CLOSEPAR .)


state 166

    (72) date_function -> SUBDATE OPENPAR date_exp COMMA . INTERVAL num_exp DATE_UNIT CLOSEPAR

    INTERVAL        shift and go to state 182


state 167

    (64) date_function -> DAYNAME OPENPAR date_exp CLOSEPAR .

    GE              reduce using rule 64 (date_function -> DAYNAME OPENPAR date_exp CLOSEPAR .)
    GT              reduce using rule 64 (date_function -> DAYNAME OPENPAR date_exp CLOSEPAR .)
    LE              reduce using rule 64 (date_function -> DAYNAME OPENPAR date_exp CLOSEPAR .)
    LT              reduce using rule 64 (date_function -> DAYNAME OPENPAR date_exp CLOSEPAR .)
    NE              reduce using rule 64 (date_function -> DAYNAME OPENPAR date_exp CLOSEPAR .)
    EQUAL           reduce using rule 64 (date_function -> DAYNAME OPENPAR date_exp CLOSEPAR .)
    EQUAL_NULL      reduce using rule 64 (date_function -> DAYNAME OPENPAR date_exp CLOSEPAR .)
    SEMICOLON       reduce using rule 64 (date_function -> DAYNAME OPENPAR date_exp CLOSEPAR .)
    COMMA           reduce using rule 64 (date_function -> DAYNAME OPENPAR date_exp CLOSEPAR .)
    CLOSEPAR        reduce using rule 64 (date_function -> DAYNAME OPENPAR date_exp CLOSEPAR .)


state 168

    (67) date_function -> DAYOFYEAR OPENPAR date_exp CLOSEPAR .

    GE              reduce using rule 67 (date_function -> DAYOFYEAR OPENPAR date_exp CLOSEPAR .)
    GT              reduce using rule 67 (date_function -> DAYOFYEAR OPENPAR date_exp CLOSEPAR .)
    LE              reduce using rule 67 (date_function -> DAYOFYEAR OPENPAR date_exp CLOSEPAR .)
    LT              reduce using rule 67 (date_function -> DAYOFYEAR OPENPAR date_exp CLOSEPAR .)
    NE              reduce using rule 67 (date_function -> DAYOFYEAR OPENPAR date_exp CLOSEPAR .)
    EQUAL           reduce using rule 67 (date_function -> DAYOFYEAR OPENPAR date_exp CLOSEPAR .)
    EQUAL_NULL      reduce using rule 67 (date_function -> DAYOFYEAR OPENPAR date_exp CLOSEPAR .)
    SEMICOLON       reduce using rule 67 (date_function -> DAYOFYEAR OPENPAR date_exp CLOSEPAR .)
    COMMA           reduce using rule 67 (date_function -> DAYOFYEAR OPENPAR date_exp CLOSEPAR .)
    CLOSEPAR        reduce using rule 67 (date_function -> DAYOFYEAR OPENPAR date_exp CLOSEPAR .)


state 169

    (38) num_cond -> num_exp BETWEEN num_exp AND . num_exp
    (41) num_exp -> . num_exp ADD num_factor
    (42) num_exp -> . num_exp SUBTRACT num_factor
    (43) num_exp -> . num_factor
    (44) num_factor -> . num_factor MULTIPLY num_term
    (45) num_factor -> . num_factor DIVIDE num_term
    (46) num_factor -> . num_factor DIVIDE_INT num_term
    (47) num_factor -> . num_factor MODULO num_term
    (48) num_factor -> . num_term
    (49) num_term -> . OPENPAR num_val CLOSEPAR
    (50) num_term -> . num_val
    (51) num_val -> . INT_LIT
    (52) num_val -> . DOUBLE_LIT
    (53) num_val -> . COLUMN_NAME

    OPENPAR         shift and go to state 38
    INT_LIT         shift and go to state 52
    DOUBLE_LIT      shift and go to state 41
    COLUMN_NAME     shift and go to state 39

    num_factor                     shift and go to state 40
    num_term                       shift and go to state 44
    num_val                        shift and go to state 32
    num_exp                        shift and go to state 183

state 170

    (71) date_function -> MONTHNAME OPENPAR date_exp CLOSEPAR .

    GE              reduce using rule 71 (date_function -> MONTHNAME OPENPAR date_exp CLOSEPAR .)
    GT              reduce using rule 71 (date_function -> MONTHNAME OPENPAR date_exp CLOSEPAR .)
    LE              reduce using rule 71 (date_function -> MONTHNAME OPENPAR date_exp CLOSEPAR .)
    LT              reduce using rule 71 (date_function -> MONTHNAME OPENPAR date_exp CLOSEPAR .)
    NE              reduce using rule 71 (date_function -> MONTHNAME OPENPAR date_exp CLOSEPAR .)
    EQUAL           reduce using rule 71 (date_function -> MONTHNAME OPENPAR date_exp CLOSEPAR .)
    EQUAL_NULL      reduce using rule 71 (date_function -> MONTHNAME OPENPAR date_exp CLOSEPAR .)
    SEMICOLON       reduce using rule 71 (date_function -> MONTHNAME OPENPAR date_exp CLOSEPAR .)
    COMMA           reduce using rule 71 (date_function -> MONTHNAME OPENPAR date_exp CLOSEPAR .)
    CLOSEPAR        reduce using rule 71 (date_function -> MONTHNAME OPENPAR date_exp CLOSEPAR .)


state 171

    (62) date_function -> DATEDIFF OPENPAR date_exp COMMA . date_exp CLOSEPAR
    (56) date_exp -> . date_function
    (57) date_exp -> . DATE_LIT
    (58) date_function -> . ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR
    (59) date_function -> . CURDATE OPENPAR CLOSEPAR
    (60) date_function -> . CURRENT_DATE OPENPAR CLOSEPAR
    (61) date_function -> . CURRENT_DATE
    (62) date_function -> . DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR
    (63) date_function -> . DAY OPENPAR date_exp CLOSEPAR
    (64) date_function -> . DAYNAME OPENPAR date_exp CLOSEPAR
    (65) date_function -> . DAYOFMONTH OPENPAR date_exp CLOSEPAR
    (66) date_function -> . DAYOFWEEK OPENPAR date_exp CLOSEPAR
    (67) date_function -> . DAYOFYEAR OPENPAR date_exp CLOSEPAR
    (68) date_function -> . LAST_DAY OPENPAR date_exp CLOSEPAR
    (69) date_function -> . MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR
    (70) date_function -> . MONTH OPENPAR date_exp CLOSEPAR
    (71) date_function -> . MONTHNAME OPENPAR date_exp CLOSEPAR
    (72) date_function -> . SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR
    (73) date_function -> . YEAR OPENPAR date_exp CLOSEPAR

    DATE_LIT        shift and go to state 46
    ADDDATE         shift and go to state 35
    CURDATE         shift and go to state 29
    CURRENT_DATE    shift and go to state 45
    DATEDIFF        shift and go to state 55
    DAY             shift and go to state 59
    DAYNAME         shift and go to state 48
    DAYOFMONTH      shift and go to state 43
    DAYOFWEEK       shift and go to state 56
    DAYOFYEAR       shift and go to state 49
    LAST_DAY        shift and go to state 58
    MAKEDATE        shift and go to state 57
    MONTH           shift and go to state 33
    MONTHNAME       shift and go to state 51
    SUBDATE         shift and go to state 47
    YEAR            shift and go to state 28

    date_function                  shift and go to state 54
    date_exp                       shift and go to state 184

state 172

    (66) date_function -> DAYOFWEEK OPENPAR date_exp CLOSEPAR .

    GE              reduce using rule 66 (date_function -> DAYOFWEEK OPENPAR date_exp CLOSEPAR .)
    GT              reduce using rule 66 (date_function -> DAYOFWEEK OPENPAR date_exp CLOSEPAR .)
    LE              reduce using rule 66 (date_function -> DAYOFWEEK OPENPAR date_exp CLOSEPAR .)
    LT              reduce using rule 66 (date_function -> DAYOFWEEK OPENPAR date_exp CLOSEPAR .)
    NE              reduce using rule 66 (date_function -> DAYOFWEEK OPENPAR date_exp CLOSEPAR .)
    EQUAL           reduce using rule 66 (date_function -> DAYOFWEEK OPENPAR date_exp CLOSEPAR .)
    EQUAL_NULL      reduce using rule 66 (date_function -> DAYOFWEEK OPENPAR date_exp CLOSEPAR .)
    SEMICOLON       reduce using rule 66 (date_function -> DAYOFWEEK OPENPAR date_exp CLOSEPAR .)
    COMMA           reduce using rule 66 (date_function -> DAYOFWEEK OPENPAR date_exp CLOSEPAR .)
    CLOSEPAR        reduce using rule 66 (date_function -> DAYOFWEEK OPENPAR date_exp CLOSEPAR .)


state 173

    (69) date_function -> MAKEDATE OPENPAR num_exp COMMA . num_exp CLOSEPAR
    (41) num_exp -> . num_exp ADD num_factor
    (42) num_exp -> . num_exp SUBTRACT num_factor
    (43) num_exp -> . num_factor
    (44) num_factor -> . num_factor MULTIPLY num_term
    (45) num_factor -> . num_factor DIVIDE num_term
    (46) num_factor -> . num_factor DIVIDE_INT num_term
    (47) num_factor -> . num_factor MODULO num_term
    (48) num_factor -> . num_term
    (49) num_term -> . OPENPAR num_val CLOSEPAR
    (50) num_term -> . num_val
    (51) num_val -> . INT_LIT
    (52) num_val -> . DOUBLE_LIT
    (53) num_val -> . COLUMN_NAME

    OPENPAR         shift and go to state 38
    INT_LIT         shift and go to state 52
    DOUBLE_LIT      shift and go to state 41
    COLUMN_NAME     shift and go to state 39

    num_factor                     shift and go to state 40
    num_term                       shift and go to state 44
    num_val                        shift and go to state 32
    num_exp                        shift and go to state 185

state 174

    (68) date_function -> LAST_DAY OPENPAR date_exp CLOSEPAR .

    GE              reduce using rule 68 (date_function -> LAST_DAY OPENPAR date_exp CLOSEPAR .)
    GT              reduce using rule 68 (date_function -> LAST_DAY OPENPAR date_exp CLOSEPAR .)
    LE              reduce using rule 68 (date_function -> LAST_DAY OPENPAR date_exp CLOSEPAR .)
    LT              reduce using rule 68 (date_function -> LAST_DAY OPENPAR date_exp CLOSEPAR .)
    NE              reduce using rule 68 (date_function -> LAST_DAY OPENPAR date_exp CLOSEPAR .)
    EQUAL           reduce using rule 68 (date_function -> LAST_DAY OPENPAR date_exp CLOSEPAR .)
    EQUAL_NULL      reduce using rule 68 (date_function -> LAST_DAY OPENPAR date_exp CLOSEPAR .)
    SEMICOLON       reduce using rule 68 (date_function -> LAST_DAY OPENPAR date_exp CLOSEPAR .)
    COMMA           reduce using rule 68 (date_function -> LAST_DAY OPENPAR date_exp CLOSEPAR .)
    CLOSEPAR        reduce using rule 68 (date_function -> LAST_DAY OPENPAR date_exp CLOSEPAR .)


state 175

    (63) date_function -> DAY OPENPAR date_exp CLOSEPAR .

    GE              reduce using rule 63 (date_function -> DAY OPENPAR date_exp CLOSEPAR .)
    GT              reduce using rule 63 (date_function -> DAY OPENPAR date_exp CLOSEPAR .)
    LE              reduce using rule 63 (date_function -> DAY OPENPAR date_exp CLOSEPAR .)
    LT              reduce using rule 63 (date_function -> DAY OPENPAR date_exp CLOSEPAR .)
    NE              reduce using rule 63 (date_function -> DAY OPENPAR date_exp CLOSEPAR .)
    EQUAL           reduce using rule 63 (date_function -> DAY OPENPAR date_exp CLOSEPAR .)
    EQUAL_NULL      reduce using rule 63 (date_function -> DAY OPENPAR date_exp CLOSEPAR .)
    SEMICOLON       reduce using rule 63 (date_function -> DAY OPENPAR date_exp CLOSEPAR .)
    COMMA           reduce using rule 63 (date_function -> DAY OPENPAR date_exp CLOSEPAR .)
    CLOSEPAR        reduce using rule 63 (date_function -> DAY OPENPAR date_exp CLOSEPAR .)


state 176

    (8) select_statement -> SELECT filter_rows_op columns FROM TABLE_NAME WHERE condition SEMICOLON .

    $end            reduce using rule 8 (select_statement -> SELECT filter_rows_op columns FROM TABLE_NAME WHERE condition SEMICOLON .)


state 177

    (5) insert_statement -> INSERT into_kw TABLE_NAME OPENPAR column_name CLOSEPAR VALUES OPENPAR . value_list CLOSEPAR
    (21) value_list -> . literals
    (22) value_list -> . value_list COMMA literals
    (23) literals -> . STRING_LIT
    (24) literals -> . INT_LIT
    (25) literals -> . DOUBLE_LIT
    (26) literals -> . DATE_LIT

    STRING_LIT      shift and go to state 115
    INT_LIT         shift and go to state 112
    DOUBLE_LIT      shift and go to state 114
    DATE_LIT        shift and go to state 113

    value_list                     shift and go to state 186
    literals                       shift and go to state 111

state 178

    (22) value_list -> value_list COMMA literals .

    CLOSEPAR        reduce using rule 22 (value_list -> value_list COMMA literals .)
    COMMA           reduce using rule 22 (value_list -> value_list COMMA literals .)


state 179

    (20) assignment_list -> assignment_list COMMA COLUMN_NAME EQUAL . literals
    (23) literals -> . STRING_LIT
    (24) literals -> . INT_LIT
    (25) literals -> . DOUBLE_LIT
    (26) literals -> . DATE_LIT

    STRING_LIT      shift and go to state 115
    INT_LIT         shift and go to state 112
    DOUBLE_LIT      shift and go to state 114
    DATE_LIT        shift and go to state 113

    literals                       shift and go to state 187

state 180

    (58) date_function -> ADDDATE OPENPAR date_exp COMMA date_exp . CLOSEPAR

    CLOSEPAR        shift and go to state 188


state 181

    (35) string_cond -> STRCMP OPENPAR string_exp COMMA string_exp . CLOSEPAR

    CLOSEPAR        shift and go to state 189


state 182

    (72) date_function -> SUBDATE OPENPAR date_exp COMMA INTERVAL . num_exp DATE_UNIT CLOSEPAR
    (41) num_exp -> . num_exp ADD num_factor
    (42) num_exp -> . num_exp SUBTRACT num_factor
    (43) num_exp -> . num_factor
    (44) num_factor -> . num_factor MULTIPLY num_term
    (45) num_factor -> . num_factor DIVIDE num_term
    (46) num_factor -> . num_factor DIVIDE_INT num_term
    (47) num_factor -> . num_factor MODULO num_term
    (48) num_factor -> . num_term
    (49) num_term -> . OPENPAR num_val CLOSEPAR
    (50) num_term -> . num_val
    (51) num_val -> . INT_LIT
    (52) num_val -> . DOUBLE_LIT
    (53) num_val -> . COLUMN_NAME

    OPENPAR         shift and go to state 38
    INT_LIT         shift and go to state 52
    DOUBLE_LIT      shift and go to state 41
    COLUMN_NAME     shift and go to state 39

    num_factor                     shift and go to state 40
    num_term                       shift and go to state 44
    num_val                        shift and go to state 32
    num_exp                        shift and go to state 190

state 183

    (38) num_cond -> num_exp BETWEEN num_exp AND num_exp .
    (41) num_exp -> num_exp . ADD num_factor
    (42) num_exp -> num_exp . SUBTRACT num_factor

    CLOSEPAR        reduce using rule 38 (num_cond -> num_exp BETWEEN num_exp AND num_exp .)
    SEMICOLON       reduce using rule 38 (num_cond -> num_exp BETWEEN num_exp AND num_exp .)
    ADD             shift and go to state 96
    SUBTRACT        shift and go to state 95


state 184

    (62) date_function -> DATEDIFF OPENPAR date_exp COMMA date_exp . CLOSEPAR

    CLOSEPAR        shift and go to state 191


state 185

    (69) date_function -> MAKEDATE OPENPAR num_exp COMMA num_exp . CLOSEPAR
    (41) num_exp -> num_exp . ADD num_factor
    (42) num_exp -> num_exp . SUBTRACT num_factor

    CLOSEPAR        shift and go to state 192
    ADD             shift and go to state 96
    SUBTRACT        shift and go to state 95


state 186

    (5) insert_statement -> INSERT into_kw TABLE_NAME OPENPAR column_name CLOSEPAR VALUES OPENPAR value_list . CLOSEPAR
    (22) value_list -> value_list . COMMA literals

    CLOSEPAR        shift and go to state 193
    COMMA           shift and go to state 153


state 187

    (20) assignment_list -> assignment_list COMMA COLUMN_NAME EQUAL literals .

    COMMA           reduce using rule 20 (assignment_list -> assignment_list COMMA COLUMN_NAME EQUAL literals .)
    $end            reduce using rule 20 (assignment_list -> assignment_list COMMA COLUMN_NAME EQUAL literals .)


state 188

    (58) date_function -> ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR .

    GE              reduce using rule 58 (date_function -> ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR .)
    GT              reduce using rule 58 (date_function -> ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR .)
    LE              reduce using rule 58 (date_function -> ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR .)
    LT              reduce using rule 58 (date_function -> ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR .)
    NE              reduce using rule 58 (date_function -> ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR .)
    EQUAL           reduce using rule 58 (date_function -> ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR .)
    EQUAL_NULL      reduce using rule 58 (date_function -> ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR .)
    SEMICOLON       reduce using rule 58 (date_function -> ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR .)
    COMMA           reduce using rule 58 (date_function -> ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR .)
    CLOSEPAR        reduce using rule 58 (date_function -> ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR .)


state 189

    (35) string_cond -> STRCMP OPENPAR string_exp COMMA string_exp CLOSEPAR .

    SEMICOLON       reduce using rule 35 (string_cond -> STRCMP OPENPAR string_exp COMMA string_exp CLOSEPAR .)
    CLOSEPAR        reduce using rule 35 (string_cond -> STRCMP OPENPAR string_exp COMMA string_exp CLOSEPAR .)


state 190

    (72) date_function -> SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp . DATE_UNIT CLOSEPAR
    (41) num_exp -> num_exp . ADD num_factor
    (42) num_exp -> num_exp . SUBTRACT num_factor

    DATE_UNIT       shift and go to state 194
    ADD             shift and go to state 96
    SUBTRACT        shift and go to state 95


state 191

    (62) date_function -> DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR .

    GE              reduce using rule 62 (date_function -> DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR .)
    GT              reduce using rule 62 (date_function -> DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR .)
    LE              reduce using rule 62 (date_function -> DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR .)
    LT              reduce using rule 62 (date_function -> DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR .)
    NE              reduce using rule 62 (date_function -> DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR .)
    EQUAL           reduce using rule 62 (date_function -> DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR .)
    EQUAL_NULL      reduce using rule 62 (date_function -> DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR .)
    SEMICOLON       reduce using rule 62 (date_function -> DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR .)
    COMMA           reduce using rule 62 (date_function -> DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR .)
    CLOSEPAR        reduce using rule 62 (date_function -> DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR .)


state 192

    (69) date_function -> MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR .

    GE              reduce using rule 69 (date_function -> MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR .)
    GT              reduce using rule 69 (date_function -> MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR .)
    LE              reduce using rule 69 (date_function -> MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR .)
    LT              reduce using rule 69 (date_function -> MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR .)
    NE              reduce using rule 69 (date_function -> MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR .)
    EQUAL           reduce using rule 69 (date_function -> MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR .)
    EQUAL_NULL      reduce using rule 69 (date_function -> MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR .)
    SEMICOLON       reduce using rule 69 (date_function -> MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR .)
    COMMA           reduce using rule 69 (date_function -> MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR .)
    CLOSEPAR        reduce using rule 69 (date_function -> MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR .)


state 193

    (5) insert_statement -> INSERT into_kw TABLE_NAME OPENPAR column_name CLOSEPAR VALUES OPENPAR value_list CLOSEPAR .

    $end            reduce using rule 5 (insert_statement -> INSERT into_kw TABLE_NAME OPENPAR column_name CLOSEPAR VALUES OPENPAR value_list CLOSEPAR .)


state 194

    (72) date_function -> SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT . CLOSEPAR

    CLOSEPAR        shift and go to state 195


state 195

    (72) date_function -> SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR .

    GE              reduce using rule 72 (date_function -> SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR .)
    GT              reduce using rule 72 (date_function -> SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR .)
    LE              reduce using rule 72 (date_function -> SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR .)
    LT              reduce using rule 72 (date_function -> SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR .)
    NE              reduce using rule 72 (date_function -> SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR .)
    EQUAL           reduce using rule 72 (date_function -> SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR .)
    EQUAL_NULL      reduce using rule 72 (date_function -> SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR .)
    SEMICOLON       reduce using rule 72 (date_function -> SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR .)
    COMMA           reduce using rule 72 (date_function -> SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR .)
    CLOSEPAR        reduce using rule 72 (date_function -> SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR .)

