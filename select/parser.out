Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> insert_statement
Rule 2     statement -> select_statement
Rule 3     statement -> delete_statement
Rule 4     insert_statement -> INSERT into_kw TABLE_NAME VALUES OPENPAR value_list CLOSEPAR SEMICOLON
Rule 5     insert_statement -> INSERT into_kw TABLE_NAME OPENPAR column_name CLOSEPAR VALUES OPENPAR value_list CLOSEPAR SEMICOLON
Rule 6     insert_statement -> INSERT into_kw TABLE_NAME SET assignment_list SEMICOLON
Rule 7     select_statement -> SELECT filter_rows_op columns FROM TABLE_NAME SEMICOLON
Rule 8     select_statement -> SELECT filter_rows_op columns FROM TABLE_NAME WHERE condition SEMICOLON
Rule 9     delete_statement -> DELETE FROM TABLE_NAME SEMICOLON
Rule 10    delete_statement -> DELETE FROM TABLE_NAME WHERE condition SEMICOLON
Rule 11    into_kw -> INTO
Rule 12    into_kw -> empty
Rule 13    filter_rows_op -> FILTER_ROWS
Rule 14    filter_rows_op -> empty
Rule 15    columns -> ASTERISK
Rule 16    columns -> column_name
Rule 17    column_name -> COLUMN_NAME
Rule 18    column_name -> column_name COMMA COLUMN_NAME
Rule 19    assignment_list -> COLUMN_NAME EQUAL literals
Rule 20    assignment_list -> assignment_list COMMA COLUMN_NAME EQUAL literals
Rule 21    value_list -> literals
Rule 22    value_list -> value_list COMMA literals
Rule 23    literals -> STRING_LIT
Rule 24    literals -> INT_LIT
Rule 25    literals -> DOUBLE_LIT
Rule 26    condition -> string_cond
Rule 27    condition -> num_cond
Rule 28    condition -> NOT OPENPAR string_cond CLOSEPAR
Rule 29    condition -> NOT OPENPAR num_cond CLOSEPAR
Rule 30    string_cond -> string_exp LIKE string_exp
Rule 31    string_cond -> string_exp NOT LIKE string_exp
Rule 32    string_cond -> STRCMP OPENPAR string_exp COMMA string_exp CLOSEPAR
Rule 33    string_exp -> STRING_LIT
Rule 34    num_cond -> num_exp comparison_op num_exp
Rule 35    num_cond -> num_exp BETWEEN num_exp AND num_exp
Rule 36    num_cond -> num_exp NOT NULL
Rule 37    num_cond -> num_exp IS NULL
Rule 38    num_exp -> num_exp ADD num_factor
Rule 39    num_exp -> num_factor SUBTRACT num_exp
Rule 40    num_exp -> num_factor
Rule 41    num_factor -> num_factor ASTERISK num_term
Rule 42    num_factor -> num_factor DIVIDE num_term
Rule 43    num_factor -> num_factor DIVIDE_INT num_term
Rule 44    num_factor -> num_factor MODULO num_term
Rule 45    num_factor -> num_term
Rule 46    num_term -> OPENPAR num_exp CLOSEPAR
Rule 47    num_term -> num_val
Rule 48    num_val -> INT_LIT
Rule 49    num_val -> DOUBLE_LIT
Rule 50    num_val -> COLUMN_NAME
Rule 51    comparison_op -> GE
Rule 52    comparison_op -> GT
Rule 53    comparison_op -> LE
Rule 54    comparison_op -> LT
Rule 55    comparison_op -> NE
Rule 56    comparison_op -> EQUAL
Rule 57    comparison_op -> EQUAL_NULL
Rule 58    empty -> <empty>

Terminals, with rules where they appear

ADD                  : 38
AND                  : 35
ASTERISK             : 15 41
BETWEEN              : 35
CLOSEPAR             : 4 5 5 28 29 32 46
COLUMN_NAME          : 17 18 19 20 50
COMMA                : 18 20 22 32
DELETE               : 9 10
DIVIDE               : 42
DIVIDE_INT           : 43
DOUBLE_LIT           : 25 49
EQUAL                : 19 20 56
EQUAL_NULL           : 57
FILTER_ROWS          : 13
FROM                 : 7 8 9 10
GE                   : 51
GT                   : 52
INSERT               : 4 5 6
INTO                 : 11
INT_LIT              : 24 48
IS                   : 37
LE                   : 53
LIKE                 : 30 31
LT                   : 54
MODULO               : 44
NE                   : 55
NOT                  : 28 29 31 36
NULL                 : 36 37
OPENPAR              : 4 5 5 28 29 32 46
SELECT               : 7 8
SEMICOLON            : 4 5 6 7 8 9 10
SET                  : 6
STRCMP               : 32
STRING_LIT           : 23 33
SUBTRACT             : 39
TABLE_NAME           : 4 5 6 7 8 9 10
VALUES               : 4 5
WHERE                : 8 10
error                : 

Nonterminals, with rules where they appear

assignment_list      : 6 20
column_name          : 5 16 18
columns              : 7 8
comparison_op        : 34
condition            : 8 10
delete_statement     : 3
empty                : 12 14
filter_rows_op       : 7 8
insert_statement     : 1
into_kw              : 4 5 6
literals             : 19 20 21 22
num_cond             : 27 29
num_exp              : 34 34 35 35 35 36 37 38 39 46
num_factor           : 38 39 40 41 42 43 44
num_term             : 41 42 43 44 45
num_val              : 47
select_statement     : 2
statement            : 0
string_cond          : 26 28
string_exp           : 30 30 31 31 32 32
value_list           : 4 5 22

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . insert_statement
    (2) statement -> . select_statement
    (3) statement -> . delete_statement
    (4) insert_statement -> . INSERT into_kw TABLE_NAME VALUES OPENPAR value_list CLOSEPAR SEMICOLON
    (5) insert_statement -> . INSERT into_kw TABLE_NAME OPENPAR column_name CLOSEPAR VALUES OPENPAR value_list CLOSEPAR SEMICOLON
    (6) insert_statement -> . INSERT into_kw TABLE_NAME SET assignment_list SEMICOLON
    (7) select_statement -> . SELECT filter_rows_op columns FROM TABLE_NAME SEMICOLON
    (8) select_statement -> . SELECT filter_rows_op columns FROM TABLE_NAME WHERE condition SEMICOLON
    (9) delete_statement -> . DELETE FROM TABLE_NAME SEMICOLON
    (10) delete_statement -> . DELETE FROM TABLE_NAME WHERE condition SEMICOLON

    INSERT          shift and go to state 1
    SELECT          shift and go to state 4
    DELETE          shift and go to state 3

    delete_statement               shift and go to state 6
    insert_statement               shift and go to state 5
    select_statement               shift and go to state 2
    statement                      shift and go to state 7

state 1

    (4) insert_statement -> INSERT . into_kw TABLE_NAME VALUES OPENPAR value_list CLOSEPAR SEMICOLON
    (5) insert_statement -> INSERT . into_kw TABLE_NAME OPENPAR column_name CLOSEPAR VALUES OPENPAR value_list CLOSEPAR SEMICOLON
    (6) insert_statement -> INSERT . into_kw TABLE_NAME SET assignment_list SEMICOLON
    (11) into_kw -> . INTO
    (12) into_kw -> . empty
    (58) empty -> .

    INTO            shift and go to state 10
    TABLE_NAME      reduce using rule 58 (empty -> .)

    into_kw                        shift and go to state 9
    empty                          shift and go to state 8

state 2

    (2) statement -> select_statement .

    $end            reduce using rule 2 (statement -> select_statement .)


state 3

    (9) delete_statement -> DELETE . FROM TABLE_NAME SEMICOLON
    (10) delete_statement -> DELETE . FROM TABLE_NAME WHERE condition SEMICOLON

    FROM            shift and go to state 11


state 4

    (7) select_statement -> SELECT . filter_rows_op columns FROM TABLE_NAME SEMICOLON
    (8) select_statement -> SELECT . filter_rows_op columns FROM TABLE_NAME WHERE condition SEMICOLON
    (13) filter_rows_op -> . FILTER_ROWS
    (14) filter_rows_op -> . empty
    (58) empty -> .

    FILTER_ROWS     shift and go to state 12
    ASTERISK        reduce using rule 58 (empty -> .)
    COLUMN_NAME     reduce using rule 58 (empty -> .)

    filter_rows_op                 shift and go to state 14
    empty                          shift and go to state 13

state 5

    (1) statement -> insert_statement .

    $end            reduce using rule 1 (statement -> insert_statement .)


state 6

    (3) statement -> delete_statement .

    $end            reduce using rule 3 (statement -> delete_statement .)


state 7

    (0) S' -> statement .



state 8

    (12) into_kw -> empty .

    TABLE_NAME      reduce using rule 12 (into_kw -> empty .)


state 9

    (4) insert_statement -> INSERT into_kw . TABLE_NAME VALUES OPENPAR value_list CLOSEPAR SEMICOLON
    (5) insert_statement -> INSERT into_kw . TABLE_NAME OPENPAR column_name CLOSEPAR VALUES OPENPAR value_list CLOSEPAR SEMICOLON
    (6) insert_statement -> INSERT into_kw . TABLE_NAME SET assignment_list SEMICOLON

    TABLE_NAME      shift and go to state 15


state 10

    (11) into_kw -> INTO .

    TABLE_NAME      reduce using rule 11 (into_kw -> INTO .)


state 11

    (9) delete_statement -> DELETE FROM . TABLE_NAME SEMICOLON
    (10) delete_statement -> DELETE FROM . TABLE_NAME WHERE condition SEMICOLON

    TABLE_NAME      shift and go to state 16


state 12

    (13) filter_rows_op -> FILTER_ROWS .

    ASTERISK        reduce using rule 13 (filter_rows_op -> FILTER_ROWS .)
    COLUMN_NAME     reduce using rule 13 (filter_rows_op -> FILTER_ROWS .)


state 13

    (14) filter_rows_op -> empty .

    ASTERISK        reduce using rule 14 (filter_rows_op -> empty .)
    COLUMN_NAME     reduce using rule 14 (filter_rows_op -> empty .)


state 14

    (7) select_statement -> SELECT filter_rows_op . columns FROM TABLE_NAME SEMICOLON
    (8) select_statement -> SELECT filter_rows_op . columns FROM TABLE_NAME WHERE condition SEMICOLON
    (15) columns -> . ASTERISK
    (16) columns -> . column_name
    (17) column_name -> . COLUMN_NAME
    (18) column_name -> . column_name COMMA COLUMN_NAME

    ASTERISK        shift and go to state 19
    COLUMN_NAME     shift and go to state 17

    column_name                    shift and go to state 18
    columns                        shift and go to state 20

state 15

    (4) insert_statement -> INSERT into_kw TABLE_NAME . VALUES OPENPAR value_list CLOSEPAR SEMICOLON
    (5) insert_statement -> INSERT into_kw TABLE_NAME . OPENPAR column_name CLOSEPAR VALUES OPENPAR value_list CLOSEPAR SEMICOLON
    (6) insert_statement -> INSERT into_kw TABLE_NAME . SET assignment_list SEMICOLON

    VALUES          shift and go to state 22
    OPENPAR         shift and go to state 23
    SET             shift and go to state 21


state 16

    (9) delete_statement -> DELETE FROM TABLE_NAME . SEMICOLON
    (10) delete_statement -> DELETE FROM TABLE_NAME . WHERE condition SEMICOLON

    SEMICOLON       shift and go to state 24
    WHERE           shift and go to state 25


state 17

    (17) column_name -> COLUMN_NAME .

    CLOSEPAR        reduce using rule 17 (column_name -> COLUMN_NAME .)
    COMMA           reduce using rule 17 (column_name -> COLUMN_NAME .)
    FROM            reduce using rule 17 (column_name -> COLUMN_NAME .)


state 18

    (16) columns -> column_name .
    (18) column_name -> column_name . COMMA COLUMN_NAME

    FROM            reduce using rule 16 (columns -> column_name .)
    COMMA           shift and go to state 26


state 19

    (15) columns -> ASTERISK .

    FROM            reduce using rule 15 (columns -> ASTERISK .)


state 20

    (7) select_statement -> SELECT filter_rows_op columns . FROM TABLE_NAME SEMICOLON
    (8) select_statement -> SELECT filter_rows_op columns . FROM TABLE_NAME WHERE condition SEMICOLON

    FROM            shift and go to state 27


state 21

    (6) insert_statement -> INSERT into_kw TABLE_NAME SET . assignment_list SEMICOLON
    (19) assignment_list -> . COLUMN_NAME EQUAL literals
    (20) assignment_list -> . assignment_list COMMA COLUMN_NAME EQUAL literals

    COLUMN_NAME     shift and go to state 29

    assignment_list                shift and go to state 28

state 22

    (4) insert_statement -> INSERT into_kw TABLE_NAME VALUES . OPENPAR value_list CLOSEPAR SEMICOLON

    OPENPAR         shift and go to state 30


state 23

    (5) insert_statement -> INSERT into_kw TABLE_NAME OPENPAR . column_name CLOSEPAR VALUES OPENPAR value_list CLOSEPAR SEMICOLON
    (17) column_name -> . COLUMN_NAME
    (18) column_name -> . column_name COMMA COLUMN_NAME

    COLUMN_NAME     shift and go to state 17

    column_name                    shift and go to state 31

state 24

    (9) delete_statement -> DELETE FROM TABLE_NAME SEMICOLON .

    $end            reduce using rule 9 (delete_statement -> DELETE FROM TABLE_NAME SEMICOLON .)


state 25

    (10) delete_statement -> DELETE FROM TABLE_NAME WHERE . condition SEMICOLON
    (26) condition -> . string_cond
    (27) condition -> . num_cond
    (28) condition -> . NOT OPENPAR string_cond CLOSEPAR
    (29) condition -> . NOT OPENPAR num_cond CLOSEPAR
    (30) string_cond -> . string_exp LIKE string_exp
    (31) string_cond -> . string_exp NOT LIKE string_exp
    (32) string_cond -> . STRCMP OPENPAR string_exp COMMA string_exp CLOSEPAR
    (34) num_cond -> . num_exp comparison_op num_exp
    (35) num_cond -> . num_exp BETWEEN num_exp AND num_exp
    (36) num_cond -> . num_exp NOT NULL
    (37) num_cond -> . num_exp IS NULL
    (33) string_exp -> . STRING_LIT
    (38) num_exp -> . num_exp ADD num_factor
    (39) num_exp -> . num_factor SUBTRACT num_exp
    (40) num_exp -> . num_factor
    (41) num_factor -> . num_factor ASTERISK num_term
    (42) num_factor -> . num_factor DIVIDE num_term
    (43) num_factor -> . num_factor DIVIDE_INT num_term
    (44) num_factor -> . num_factor MODULO num_term
    (45) num_factor -> . num_term
    (46) num_term -> . OPENPAR num_exp CLOSEPAR
    (47) num_term -> . num_val
    (48) num_val -> . INT_LIT
    (49) num_val -> . DOUBLE_LIT
    (50) num_val -> . COLUMN_NAME

    NOT             shift and go to state 41
    STRCMP          shift and go to state 39
    STRING_LIT      shift and go to state 44
    OPENPAR         shift and go to state 35
    INT_LIT         shift and go to state 33
    DOUBLE_LIT      shift and go to state 37
    COLUMN_NAME     shift and go to state 34

    string_cond                    shift and go to state 32
    condition                      shift and go to state 38
    string_exp                     shift and go to state 40
    num_term                       shift and go to state 46
    num_cond                       shift and go to state 43
    num_factor                     shift and go to state 42
    num_exp                        shift and go to state 36
    num_val                        shift and go to state 45

state 26

    (18) column_name -> column_name COMMA . COLUMN_NAME

    COLUMN_NAME     shift and go to state 47


state 27

    (7) select_statement -> SELECT filter_rows_op columns FROM . TABLE_NAME SEMICOLON
    (8) select_statement -> SELECT filter_rows_op columns FROM . TABLE_NAME WHERE condition SEMICOLON

    TABLE_NAME      shift and go to state 48


state 28

    (6) insert_statement -> INSERT into_kw TABLE_NAME SET assignment_list . SEMICOLON
    (20) assignment_list -> assignment_list . COMMA COLUMN_NAME EQUAL literals

    SEMICOLON       shift and go to state 50
    COMMA           shift and go to state 49


state 29

    (19) assignment_list -> COLUMN_NAME . EQUAL literals

    EQUAL           shift and go to state 51


state 30

    (4) insert_statement -> INSERT into_kw TABLE_NAME VALUES OPENPAR . value_list CLOSEPAR SEMICOLON
    (21) value_list -> . literals
    (22) value_list -> . value_list COMMA literals
    (23) literals -> . STRING_LIT
    (24) literals -> . INT_LIT
    (25) literals -> . DOUBLE_LIT

    STRING_LIT      shift and go to state 56
    INT_LIT         shift and go to state 53
    DOUBLE_LIT      shift and go to state 55

    value_list                     shift and go to state 52
    literals                       shift and go to state 54

state 31

    (5) insert_statement -> INSERT into_kw TABLE_NAME OPENPAR column_name . CLOSEPAR VALUES OPENPAR value_list CLOSEPAR SEMICOLON
    (18) column_name -> column_name . COMMA COLUMN_NAME

    CLOSEPAR        shift and go to state 57
    COMMA           shift and go to state 26


state 32

    (26) condition -> string_cond .

    SEMICOLON       reduce using rule 26 (condition -> string_cond .)


state 33

    (48) num_val -> INT_LIT .

    SUBTRACT        reduce using rule 48 (num_val -> INT_LIT .)
    ASTERISK        reduce using rule 48 (num_val -> INT_LIT .)
    DIVIDE          reduce using rule 48 (num_val -> INT_LIT .)
    DIVIDE_INT      reduce using rule 48 (num_val -> INT_LIT .)
    MODULO          reduce using rule 48 (num_val -> INT_LIT .)
    BETWEEN         reduce using rule 48 (num_val -> INT_LIT .)
    NOT             reduce using rule 48 (num_val -> INT_LIT .)
    IS              reduce using rule 48 (num_val -> INT_LIT .)
    ADD             reduce using rule 48 (num_val -> INT_LIT .)
    GE              reduce using rule 48 (num_val -> INT_LIT .)
    GT              reduce using rule 48 (num_val -> INT_LIT .)
    LE              reduce using rule 48 (num_val -> INT_LIT .)
    LT              reduce using rule 48 (num_val -> INT_LIT .)
    NE              reduce using rule 48 (num_val -> INT_LIT .)
    EQUAL           reduce using rule 48 (num_val -> INT_LIT .)
    EQUAL_NULL      reduce using rule 48 (num_val -> INT_LIT .)
    CLOSEPAR        reduce using rule 48 (num_val -> INT_LIT .)
    AND             reduce using rule 48 (num_val -> INT_LIT .)
    SEMICOLON       reduce using rule 48 (num_val -> INT_LIT .)


state 34

    (50) num_val -> COLUMN_NAME .

    SUBTRACT        reduce using rule 50 (num_val -> COLUMN_NAME .)
    ASTERISK        reduce using rule 50 (num_val -> COLUMN_NAME .)
    DIVIDE          reduce using rule 50 (num_val -> COLUMN_NAME .)
    DIVIDE_INT      reduce using rule 50 (num_val -> COLUMN_NAME .)
    MODULO          reduce using rule 50 (num_val -> COLUMN_NAME .)
    BETWEEN         reduce using rule 50 (num_val -> COLUMN_NAME .)
    NOT             reduce using rule 50 (num_val -> COLUMN_NAME .)
    IS              reduce using rule 50 (num_val -> COLUMN_NAME .)
    ADD             reduce using rule 50 (num_val -> COLUMN_NAME .)
    GE              reduce using rule 50 (num_val -> COLUMN_NAME .)
    GT              reduce using rule 50 (num_val -> COLUMN_NAME .)
    LE              reduce using rule 50 (num_val -> COLUMN_NAME .)
    LT              reduce using rule 50 (num_val -> COLUMN_NAME .)
    NE              reduce using rule 50 (num_val -> COLUMN_NAME .)
    EQUAL           reduce using rule 50 (num_val -> COLUMN_NAME .)
    EQUAL_NULL      reduce using rule 50 (num_val -> COLUMN_NAME .)
    CLOSEPAR        reduce using rule 50 (num_val -> COLUMN_NAME .)
    AND             reduce using rule 50 (num_val -> COLUMN_NAME .)
    SEMICOLON       reduce using rule 50 (num_val -> COLUMN_NAME .)


state 35

    (46) num_term -> OPENPAR . num_exp CLOSEPAR
    (38) num_exp -> . num_exp ADD num_factor
    (39) num_exp -> . num_factor SUBTRACT num_exp
    (40) num_exp -> . num_factor
    (41) num_factor -> . num_factor ASTERISK num_term
    (42) num_factor -> . num_factor DIVIDE num_term
    (43) num_factor -> . num_factor DIVIDE_INT num_term
    (44) num_factor -> . num_factor MODULO num_term
    (45) num_factor -> . num_term
    (46) num_term -> . OPENPAR num_exp CLOSEPAR
    (47) num_term -> . num_val
    (48) num_val -> . INT_LIT
    (49) num_val -> . DOUBLE_LIT
    (50) num_val -> . COLUMN_NAME

    OPENPAR         shift and go to state 35
    INT_LIT         shift and go to state 33
    DOUBLE_LIT      shift and go to state 37
    COLUMN_NAME     shift and go to state 34

    num_val                        shift and go to state 45
    num_factor                     shift and go to state 42
    num_exp                        shift and go to state 58
    num_term                       shift and go to state 46

state 36

    (34) num_cond -> num_exp . comparison_op num_exp
    (35) num_cond -> num_exp . BETWEEN num_exp AND num_exp
    (36) num_cond -> num_exp . NOT NULL
    (37) num_cond -> num_exp . IS NULL
    (38) num_exp -> num_exp . ADD num_factor
    (51) comparison_op -> . GE
    (52) comparison_op -> . GT
    (53) comparison_op -> . LE
    (54) comparison_op -> . LT
    (55) comparison_op -> . NE
    (56) comparison_op -> . EQUAL
    (57) comparison_op -> . EQUAL_NULL

    BETWEEN         shift and go to state 59
    NOT             shift and go to state 68
    IS              shift and go to state 70
    ADD             shift and go to state 64
    GE              shift and go to state 65
    GT              shift and go to state 61
    LE              shift and go to state 60
    LT              shift and go to state 66
    NE              shift and go to state 62
    EQUAL           shift and go to state 63
    EQUAL_NULL      shift and go to state 67

    comparison_op                  shift and go to state 69

state 37

    (49) num_val -> DOUBLE_LIT .

    SUBTRACT        reduce using rule 49 (num_val -> DOUBLE_LIT .)
    ASTERISK        reduce using rule 49 (num_val -> DOUBLE_LIT .)
    DIVIDE          reduce using rule 49 (num_val -> DOUBLE_LIT .)
    DIVIDE_INT      reduce using rule 49 (num_val -> DOUBLE_LIT .)
    MODULO          reduce using rule 49 (num_val -> DOUBLE_LIT .)
    BETWEEN         reduce using rule 49 (num_val -> DOUBLE_LIT .)
    NOT             reduce using rule 49 (num_val -> DOUBLE_LIT .)
    IS              reduce using rule 49 (num_val -> DOUBLE_LIT .)
    ADD             reduce using rule 49 (num_val -> DOUBLE_LIT .)
    GE              reduce using rule 49 (num_val -> DOUBLE_LIT .)
    GT              reduce using rule 49 (num_val -> DOUBLE_LIT .)
    LE              reduce using rule 49 (num_val -> DOUBLE_LIT .)
    LT              reduce using rule 49 (num_val -> DOUBLE_LIT .)
    NE              reduce using rule 49 (num_val -> DOUBLE_LIT .)
    EQUAL           reduce using rule 49 (num_val -> DOUBLE_LIT .)
    EQUAL_NULL      reduce using rule 49 (num_val -> DOUBLE_LIT .)
    CLOSEPAR        reduce using rule 49 (num_val -> DOUBLE_LIT .)
    AND             reduce using rule 49 (num_val -> DOUBLE_LIT .)
    SEMICOLON       reduce using rule 49 (num_val -> DOUBLE_LIT .)


state 38

    (10) delete_statement -> DELETE FROM TABLE_NAME WHERE condition . SEMICOLON

    SEMICOLON       shift and go to state 71


state 39

    (32) string_cond -> STRCMP . OPENPAR string_exp COMMA string_exp CLOSEPAR

    OPENPAR         shift and go to state 72


state 40

    (30) string_cond -> string_exp . LIKE string_exp
    (31) string_cond -> string_exp . NOT LIKE string_exp

    LIKE            shift and go to state 74
    NOT             shift and go to state 73


state 41

    (28) condition -> NOT . OPENPAR string_cond CLOSEPAR
    (29) condition -> NOT . OPENPAR num_cond CLOSEPAR

    OPENPAR         shift and go to state 75


state 42

    (39) num_exp -> num_factor . SUBTRACT num_exp
    (40) num_exp -> num_factor .
    (41) num_factor -> num_factor . ASTERISK num_term
    (42) num_factor -> num_factor . DIVIDE num_term
    (43) num_factor -> num_factor . DIVIDE_INT num_term
    (44) num_factor -> num_factor . MODULO num_term

    SUBTRACT        shift and go to state 76
    BETWEEN         reduce using rule 40 (num_exp -> num_factor .)
    NOT             reduce using rule 40 (num_exp -> num_factor .)
    IS              reduce using rule 40 (num_exp -> num_factor .)
    ADD             reduce using rule 40 (num_exp -> num_factor .)
    GE              reduce using rule 40 (num_exp -> num_factor .)
    GT              reduce using rule 40 (num_exp -> num_factor .)
    LE              reduce using rule 40 (num_exp -> num_factor .)
    LT              reduce using rule 40 (num_exp -> num_factor .)
    NE              reduce using rule 40 (num_exp -> num_factor .)
    EQUAL           reduce using rule 40 (num_exp -> num_factor .)
    EQUAL_NULL      reduce using rule 40 (num_exp -> num_factor .)
    CLOSEPAR        reduce using rule 40 (num_exp -> num_factor .)
    AND             reduce using rule 40 (num_exp -> num_factor .)
    SEMICOLON       reduce using rule 40 (num_exp -> num_factor .)
    ASTERISK        shift and go to state 79
    DIVIDE          shift and go to state 77
    DIVIDE_INT      shift and go to state 78
    MODULO          shift and go to state 80


state 43

    (27) condition -> num_cond .

    SEMICOLON       reduce using rule 27 (condition -> num_cond .)


state 44

    (33) string_exp -> STRING_LIT .

    LIKE            reduce using rule 33 (string_exp -> STRING_LIT .)
    NOT             reduce using rule 33 (string_exp -> STRING_LIT .)
    SEMICOLON       reduce using rule 33 (string_exp -> STRING_LIT .)
    CLOSEPAR        reduce using rule 33 (string_exp -> STRING_LIT .)
    COMMA           reduce using rule 33 (string_exp -> STRING_LIT .)


state 45

    (47) num_term -> num_val .

    SUBTRACT        reduce using rule 47 (num_term -> num_val .)
    ASTERISK        reduce using rule 47 (num_term -> num_val .)
    DIVIDE          reduce using rule 47 (num_term -> num_val .)
    DIVIDE_INT      reduce using rule 47 (num_term -> num_val .)
    MODULO          reduce using rule 47 (num_term -> num_val .)
    BETWEEN         reduce using rule 47 (num_term -> num_val .)
    NOT             reduce using rule 47 (num_term -> num_val .)
    IS              reduce using rule 47 (num_term -> num_val .)
    ADD             reduce using rule 47 (num_term -> num_val .)
    GE              reduce using rule 47 (num_term -> num_val .)
    GT              reduce using rule 47 (num_term -> num_val .)
    LE              reduce using rule 47 (num_term -> num_val .)
    LT              reduce using rule 47 (num_term -> num_val .)
    NE              reduce using rule 47 (num_term -> num_val .)
    EQUAL           reduce using rule 47 (num_term -> num_val .)
    EQUAL_NULL      reduce using rule 47 (num_term -> num_val .)
    CLOSEPAR        reduce using rule 47 (num_term -> num_val .)
    AND             reduce using rule 47 (num_term -> num_val .)
    SEMICOLON       reduce using rule 47 (num_term -> num_val .)


state 46

    (45) num_factor -> num_term .

    ASTERISK        reduce using rule 45 (num_factor -> num_term .)
    DIVIDE          reduce using rule 45 (num_factor -> num_term .)
    DIVIDE_INT      reduce using rule 45 (num_factor -> num_term .)
    MODULO          reduce using rule 45 (num_factor -> num_term .)
    BETWEEN         reduce using rule 45 (num_factor -> num_term .)
    NOT             reduce using rule 45 (num_factor -> num_term .)
    IS              reduce using rule 45 (num_factor -> num_term .)
    ADD             reduce using rule 45 (num_factor -> num_term .)
    GE              reduce using rule 45 (num_factor -> num_term .)
    GT              reduce using rule 45 (num_factor -> num_term .)
    LE              reduce using rule 45 (num_factor -> num_term .)
    LT              reduce using rule 45 (num_factor -> num_term .)
    NE              reduce using rule 45 (num_factor -> num_term .)
    EQUAL           reduce using rule 45 (num_factor -> num_term .)
    EQUAL_NULL      reduce using rule 45 (num_factor -> num_term .)
    CLOSEPAR        reduce using rule 45 (num_factor -> num_term .)
    AND             reduce using rule 45 (num_factor -> num_term .)
    SEMICOLON       reduce using rule 45 (num_factor -> num_term .)
    SUBTRACT        reduce using rule 45 (num_factor -> num_term .)


state 47

    (18) column_name -> column_name COMMA COLUMN_NAME .

    CLOSEPAR        reduce using rule 18 (column_name -> column_name COMMA COLUMN_NAME .)
    COMMA           reduce using rule 18 (column_name -> column_name COMMA COLUMN_NAME .)
    FROM            reduce using rule 18 (column_name -> column_name COMMA COLUMN_NAME .)


state 48

    (7) select_statement -> SELECT filter_rows_op columns FROM TABLE_NAME . SEMICOLON
    (8) select_statement -> SELECT filter_rows_op columns FROM TABLE_NAME . WHERE condition SEMICOLON

    SEMICOLON       shift and go to state 82
    WHERE           shift and go to state 81


state 49

    (20) assignment_list -> assignment_list COMMA . COLUMN_NAME EQUAL literals

    COLUMN_NAME     shift and go to state 83


state 50

    (6) insert_statement -> INSERT into_kw TABLE_NAME SET assignment_list SEMICOLON .

    $end            reduce using rule 6 (insert_statement -> INSERT into_kw TABLE_NAME SET assignment_list SEMICOLON .)


state 51

    (19) assignment_list -> COLUMN_NAME EQUAL . literals
    (23) literals -> . STRING_LIT
    (24) literals -> . INT_LIT
    (25) literals -> . DOUBLE_LIT

    STRING_LIT      shift and go to state 56
    INT_LIT         shift and go to state 53
    DOUBLE_LIT      shift and go to state 55

    literals                       shift and go to state 84

state 52

    (4) insert_statement -> INSERT into_kw TABLE_NAME VALUES OPENPAR value_list . CLOSEPAR SEMICOLON
    (22) value_list -> value_list . COMMA literals

    CLOSEPAR        shift and go to state 86
    COMMA           shift and go to state 85


state 53

    (24) literals -> INT_LIT .

    CLOSEPAR        reduce using rule 24 (literals -> INT_LIT .)
    COMMA           reduce using rule 24 (literals -> INT_LIT .)
    SEMICOLON       reduce using rule 24 (literals -> INT_LIT .)


state 54

    (21) value_list -> literals .

    CLOSEPAR        reduce using rule 21 (value_list -> literals .)
    COMMA           reduce using rule 21 (value_list -> literals .)


state 55

    (25) literals -> DOUBLE_LIT .

    CLOSEPAR        reduce using rule 25 (literals -> DOUBLE_LIT .)
    COMMA           reduce using rule 25 (literals -> DOUBLE_LIT .)
    SEMICOLON       reduce using rule 25 (literals -> DOUBLE_LIT .)


state 56

    (23) literals -> STRING_LIT .

    CLOSEPAR        reduce using rule 23 (literals -> STRING_LIT .)
    COMMA           reduce using rule 23 (literals -> STRING_LIT .)
    SEMICOLON       reduce using rule 23 (literals -> STRING_LIT .)


state 57

    (5) insert_statement -> INSERT into_kw TABLE_NAME OPENPAR column_name CLOSEPAR . VALUES OPENPAR value_list CLOSEPAR SEMICOLON

    VALUES          shift and go to state 87


state 58

    (46) num_term -> OPENPAR num_exp . CLOSEPAR
    (38) num_exp -> num_exp . ADD num_factor

    CLOSEPAR        shift and go to state 88
    ADD             shift and go to state 64


state 59

    (35) num_cond -> num_exp BETWEEN . num_exp AND num_exp
    (38) num_exp -> . num_exp ADD num_factor
    (39) num_exp -> . num_factor SUBTRACT num_exp
    (40) num_exp -> . num_factor
    (41) num_factor -> . num_factor ASTERISK num_term
    (42) num_factor -> . num_factor DIVIDE num_term
    (43) num_factor -> . num_factor DIVIDE_INT num_term
    (44) num_factor -> . num_factor MODULO num_term
    (45) num_factor -> . num_term
    (46) num_term -> . OPENPAR num_exp CLOSEPAR
    (47) num_term -> . num_val
    (48) num_val -> . INT_LIT
    (49) num_val -> . DOUBLE_LIT
    (50) num_val -> . COLUMN_NAME

    OPENPAR         shift and go to state 35
    INT_LIT         shift and go to state 33
    DOUBLE_LIT      shift and go to state 37
    COLUMN_NAME     shift and go to state 34

    num_val                        shift and go to state 45
    num_factor                     shift and go to state 42
    num_exp                        shift and go to state 89
    num_term                       shift and go to state 46

state 60

    (53) comparison_op -> LE .

    OPENPAR         reduce using rule 53 (comparison_op -> LE .)
    INT_LIT         reduce using rule 53 (comparison_op -> LE .)
    DOUBLE_LIT      reduce using rule 53 (comparison_op -> LE .)
    COLUMN_NAME     reduce using rule 53 (comparison_op -> LE .)


state 61

    (52) comparison_op -> GT .

    OPENPAR         reduce using rule 52 (comparison_op -> GT .)
    INT_LIT         reduce using rule 52 (comparison_op -> GT .)
    DOUBLE_LIT      reduce using rule 52 (comparison_op -> GT .)
    COLUMN_NAME     reduce using rule 52 (comparison_op -> GT .)


state 62

    (55) comparison_op -> NE .

    OPENPAR         reduce using rule 55 (comparison_op -> NE .)
    INT_LIT         reduce using rule 55 (comparison_op -> NE .)
    DOUBLE_LIT      reduce using rule 55 (comparison_op -> NE .)
    COLUMN_NAME     reduce using rule 55 (comparison_op -> NE .)


state 63

    (56) comparison_op -> EQUAL .

    OPENPAR         reduce using rule 56 (comparison_op -> EQUAL .)
    INT_LIT         reduce using rule 56 (comparison_op -> EQUAL .)
    DOUBLE_LIT      reduce using rule 56 (comparison_op -> EQUAL .)
    COLUMN_NAME     reduce using rule 56 (comparison_op -> EQUAL .)


state 64

    (38) num_exp -> num_exp ADD . num_factor
    (41) num_factor -> . num_factor ASTERISK num_term
    (42) num_factor -> . num_factor DIVIDE num_term
    (43) num_factor -> . num_factor DIVIDE_INT num_term
    (44) num_factor -> . num_factor MODULO num_term
    (45) num_factor -> . num_term
    (46) num_term -> . OPENPAR num_exp CLOSEPAR
    (47) num_term -> . num_val
    (48) num_val -> . INT_LIT
    (49) num_val -> . DOUBLE_LIT
    (50) num_val -> . COLUMN_NAME

    OPENPAR         shift and go to state 35
    INT_LIT         shift and go to state 33
    DOUBLE_LIT      shift and go to state 37
    COLUMN_NAME     shift and go to state 34

    num_val                        shift and go to state 45
    num_factor                     shift and go to state 90
    num_term                       shift and go to state 46

state 65

    (51) comparison_op -> GE .

    OPENPAR         reduce using rule 51 (comparison_op -> GE .)
    INT_LIT         reduce using rule 51 (comparison_op -> GE .)
    DOUBLE_LIT      reduce using rule 51 (comparison_op -> GE .)
    COLUMN_NAME     reduce using rule 51 (comparison_op -> GE .)


state 66

    (54) comparison_op -> LT .

    OPENPAR         reduce using rule 54 (comparison_op -> LT .)
    INT_LIT         reduce using rule 54 (comparison_op -> LT .)
    DOUBLE_LIT      reduce using rule 54 (comparison_op -> LT .)
    COLUMN_NAME     reduce using rule 54 (comparison_op -> LT .)


state 67

    (57) comparison_op -> EQUAL_NULL .

    OPENPAR         reduce using rule 57 (comparison_op -> EQUAL_NULL .)
    INT_LIT         reduce using rule 57 (comparison_op -> EQUAL_NULL .)
    DOUBLE_LIT      reduce using rule 57 (comparison_op -> EQUAL_NULL .)
    COLUMN_NAME     reduce using rule 57 (comparison_op -> EQUAL_NULL .)


state 68

    (36) num_cond -> num_exp NOT . NULL

    NULL            shift and go to state 91


state 69

    (34) num_cond -> num_exp comparison_op . num_exp
    (38) num_exp -> . num_exp ADD num_factor
    (39) num_exp -> . num_factor SUBTRACT num_exp
    (40) num_exp -> . num_factor
    (41) num_factor -> . num_factor ASTERISK num_term
    (42) num_factor -> . num_factor DIVIDE num_term
    (43) num_factor -> . num_factor DIVIDE_INT num_term
    (44) num_factor -> . num_factor MODULO num_term
    (45) num_factor -> . num_term
    (46) num_term -> . OPENPAR num_exp CLOSEPAR
    (47) num_term -> . num_val
    (48) num_val -> . INT_LIT
    (49) num_val -> . DOUBLE_LIT
    (50) num_val -> . COLUMN_NAME

    OPENPAR         shift and go to state 35
    INT_LIT         shift and go to state 33
    DOUBLE_LIT      shift and go to state 37
    COLUMN_NAME     shift and go to state 34

    num_val                        shift and go to state 45
    num_factor                     shift and go to state 42
    num_exp                        shift and go to state 92
    num_term                       shift and go to state 46

state 70

    (37) num_cond -> num_exp IS . NULL

    NULL            shift and go to state 93


state 71

    (10) delete_statement -> DELETE FROM TABLE_NAME WHERE condition SEMICOLON .

    $end            reduce using rule 10 (delete_statement -> DELETE FROM TABLE_NAME WHERE condition SEMICOLON .)


state 72

    (32) string_cond -> STRCMP OPENPAR . string_exp COMMA string_exp CLOSEPAR
    (33) string_exp -> . STRING_LIT

    STRING_LIT      shift and go to state 44

    string_exp                     shift and go to state 94

state 73

    (31) string_cond -> string_exp NOT . LIKE string_exp

    LIKE            shift and go to state 95


state 74

    (30) string_cond -> string_exp LIKE . string_exp
    (33) string_exp -> . STRING_LIT

    STRING_LIT      shift and go to state 44

    string_exp                     shift and go to state 96

state 75

    (28) condition -> NOT OPENPAR . string_cond CLOSEPAR
    (29) condition -> NOT OPENPAR . num_cond CLOSEPAR
    (30) string_cond -> . string_exp LIKE string_exp
    (31) string_cond -> . string_exp NOT LIKE string_exp
    (32) string_cond -> . STRCMP OPENPAR string_exp COMMA string_exp CLOSEPAR
    (34) num_cond -> . num_exp comparison_op num_exp
    (35) num_cond -> . num_exp BETWEEN num_exp AND num_exp
    (36) num_cond -> . num_exp NOT NULL
    (37) num_cond -> . num_exp IS NULL
    (33) string_exp -> . STRING_LIT
    (38) num_exp -> . num_exp ADD num_factor
    (39) num_exp -> . num_factor SUBTRACT num_exp
    (40) num_exp -> . num_factor
    (41) num_factor -> . num_factor ASTERISK num_term
    (42) num_factor -> . num_factor DIVIDE num_term
    (43) num_factor -> . num_factor DIVIDE_INT num_term
    (44) num_factor -> . num_factor MODULO num_term
    (45) num_factor -> . num_term
    (46) num_term -> . OPENPAR num_exp CLOSEPAR
    (47) num_term -> . num_val
    (48) num_val -> . INT_LIT
    (49) num_val -> . DOUBLE_LIT
    (50) num_val -> . COLUMN_NAME

    STRCMP          shift and go to state 39
    STRING_LIT      shift and go to state 44
    OPENPAR         shift and go to state 35
    INT_LIT         shift and go to state 33
    DOUBLE_LIT      shift and go to state 37
    COLUMN_NAME     shift and go to state 34

    string_cond                    shift and go to state 97
    string_exp                     shift and go to state 40
    num_term                       shift and go to state 46
    num_cond                       shift and go to state 98
    num_factor                     shift and go to state 42
    num_exp                        shift and go to state 36
    num_val                        shift and go to state 45

state 76

    (39) num_exp -> num_factor SUBTRACT . num_exp
    (38) num_exp -> . num_exp ADD num_factor
    (39) num_exp -> . num_factor SUBTRACT num_exp
    (40) num_exp -> . num_factor
    (41) num_factor -> . num_factor ASTERISK num_term
    (42) num_factor -> . num_factor DIVIDE num_term
    (43) num_factor -> . num_factor DIVIDE_INT num_term
    (44) num_factor -> . num_factor MODULO num_term
    (45) num_factor -> . num_term
    (46) num_term -> . OPENPAR num_exp CLOSEPAR
    (47) num_term -> . num_val
    (48) num_val -> . INT_LIT
    (49) num_val -> . DOUBLE_LIT
    (50) num_val -> . COLUMN_NAME

    OPENPAR         shift and go to state 35
    INT_LIT         shift and go to state 33
    DOUBLE_LIT      shift and go to state 37
    COLUMN_NAME     shift and go to state 34

    num_val                        shift and go to state 45
    num_factor                     shift and go to state 42
    num_exp                        shift and go to state 99
    num_term                       shift and go to state 46

state 77

    (42) num_factor -> num_factor DIVIDE . num_term
    (46) num_term -> . OPENPAR num_exp CLOSEPAR
    (47) num_term -> . num_val
    (48) num_val -> . INT_LIT
    (49) num_val -> . DOUBLE_LIT
    (50) num_val -> . COLUMN_NAME

    OPENPAR         shift and go to state 35
    INT_LIT         shift and go to state 33
    DOUBLE_LIT      shift and go to state 37
    COLUMN_NAME     shift and go to state 34

    num_val                        shift and go to state 45
    num_term                       shift and go to state 100

state 78

    (43) num_factor -> num_factor DIVIDE_INT . num_term
    (46) num_term -> . OPENPAR num_exp CLOSEPAR
    (47) num_term -> . num_val
    (48) num_val -> . INT_LIT
    (49) num_val -> . DOUBLE_LIT
    (50) num_val -> . COLUMN_NAME

    OPENPAR         shift and go to state 35
    INT_LIT         shift and go to state 33
    DOUBLE_LIT      shift and go to state 37
    COLUMN_NAME     shift and go to state 34

    num_val                        shift and go to state 45
    num_term                       shift and go to state 101

state 79

    (41) num_factor -> num_factor ASTERISK . num_term
    (46) num_term -> . OPENPAR num_exp CLOSEPAR
    (47) num_term -> . num_val
    (48) num_val -> . INT_LIT
    (49) num_val -> . DOUBLE_LIT
    (50) num_val -> . COLUMN_NAME

    OPENPAR         shift and go to state 35
    INT_LIT         shift and go to state 33
    DOUBLE_LIT      shift and go to state 37
    COLUMN_NAME     shift and go to state 34

    num_val                        shift and go to state 45
    num_term                       shift and go to state 102

state 80

    (44) num_factor -> num_factor MODULO . num_term
    (46) num_term -> . OPENPAR num_exp CLOSEPAR
    (47) num_term -> . num_val
    (48) num_val -> . INT_LIT
    (49) num_val -> . DOUBLE_LIT
    (50) num_val -> . COLUMN_NAME

    OPENPAR         shift and go to state 35
    INT_LIT         shift and go to state 33
    DOUBLE_LIT      shift and go to state 37
    COLUMN_NAME     shift and go to state 34

    num_val                        shift and go to state 45
    num_term                       shift and go to state 103

state 81

    (8) select_statement -> SELECT filter_rows_op columns FROM TABLE_NAME WHERE . condition SEMICOLON
    (26) condition -> . string_cond
    (27) condition -> . num_cond
    (28) condition -> . NOT OPENPAR string_cond CLOSEPAR
    (29) condition -> . NOT OPENPAR num_cond CLOSEPAR
    (30) string_cond -> . string_exp LIKE string_exp
    (31) string_cond -> . string_exp NOT LIKE string_exp
    (32) string_cond -> . STRCMP OPENPAR string_exp COMMA string_exp CLOSEPAR
    (34) num_cond -> . num_exp comparison_op num_exp
    (35) num_cond -> . num_exp BETWEEN num_exp AND num_exp
    (36) num_cond -> . num_exp NOT NULL
    (37) num_cond -> . num_exp IS NULL
    (33) string_exp -> . STRING_LIT
    (38) num_exp -> . num_exp ADD num_factor
    (39) num_exp -> . num_factor SUBTRACT num_exp
    (40) num_exp -> . num_factor
    (41) num_factor -> . num_factor ASTERISK num_term
    (42) num_factor -> . num_factor DIVIDE num_term
    (43) num_factor -> . num_factor DIVIDE_INT num_term
    (44) num_factor -> . num_factor MODULO num_term
    (45) num_factor -> . num_term
    (46) num_term -> . OPENPAR num_exp CLOSEPAR
    (47) num_term -> . num_val
    (48) num_val -> . INT_LIT
    (49) num_val -> . DOUBLE_LIT
    (50) num_val -> . COLUMN_NAME

    NOT             shift and go to state 41
    STRCMP          shift and go to state 39
    STRING_LIT      shift and go to state 44
    OPENPAR         shift and go to state 35
    INT_LIT         shift and go to state 33
    DOUBLE_LIT      shift and go to state 37
    COLUMN_NAME     shift and go to state 34

    string_cond                    shift and go to state 32
    condition                      shift and go to state 104
    num_val                        shift and go to state 45
    string_exp                     shift and go to state 40
    num_term                       shift and go to state 46
    num_factor                     shift and go to state 42
    num_cond                       shift and go to state 43
    num_exp                        shift and go to state 36

state 82

    (7) select_statement -> SELECT filter_rows_op columns FROM TABLE_NAME SEMICOLON .

    $end            reduce using rule 7 (select_statement -> SELECT filter_rows_op columns FROM TABLE_NAME SEMICOLON .)


state 83

    (20) assignment_list -> assignment_list COMMA COLUMN_NAME . EQUAL literals

    EQUAL           shift and go to state 105


state 84

    (19) assignment_list -> COLUMN_NAME EQUAL literals .

    SEMICOLON       reduce using rule 19 (assignment_list -> COLUMN_NAME EQUAL literals .)
    COMMA           reduce using rule 19 (assignment_list -> COLUMN_NAME EQUAL literals .)


state 85

    (22) value_list -> value_list COMMA . literals
    (23) literals -> . STRING_LIT
    (24) literals -> . INT_LIT
    (25) literals -> . DOUBLE_LIT

    STRING_LIT      shift and go to state 56
    INT_LIT         shift and go to state 53
    DOUBLE_LIT      shift and go to state 55

    literals                       shift and go to state 106

state 86

    (4) insert_statement -> INSERT into_kw TABLE_NAME VALUES OPENPAR value_list CLOSEPAR . SEMICOLON

    SEMICOLON       shift and go to state 107


state 87

    (5) insert_statement -> INSERT into_kw TABLE_NAME OPENPAR column_name CLOSEPAR VALUES . OPENPAR value_list CLOSEPAR SEMICOLON

    OPENPAR         shift and go to state 108


state 88

    (46) num_term -> OPENPAR num_exp CLOSEPAR .

    SUBTRACT        reduce using rule 46 (num_term -> OPENPAR num_exp CLOSEPAR .)
    ASTERISK        reduce using rule 46 (num_term -> OPENPAR num_exp CLOSEPAR .)
    DIVIDE          reduce using rule 46 (num_term -> OPENPAR num_exp CLOSEPAR .)
    DIVIDE_INT      reduce using rule 46 (num_term -> OPENPAR num_exp CLOSEPAR .)
    MODULO          reduce using rule 46 (num_term -> OPENPAR num_exp CLOSEPAR .)
    BETWEEN         reduce using rule 46 (num_term -> OPENPAR num_exp CLOSEPAR .)
    NOT             reduce using rule 46 (num_term -> OPENPAR num_exp CLOSEPAR .)
    IS              reduce using rule 46 (num_term -> OPENPAR num_exp CLOSEPAR .)
    ADD             reduce using rule 46 (num_term -> OPENPAR num_exp CLOSEPAR .)
    GE              reduce using rule 46 (num_term -> OPENPAR num_exp CLOSEPAR .)
    GT              reduce using rule 46 (num_term -> OPENPAR num_exp CLOSEPAR .)
    LE              reduce using rule 46 (num_term -> OPENPAR num_exp CLOSEPAR .)
    LT              reduce using rule 46 (num_term -> OPENPAR num_exp CLOSEPAR .)
    NE              reduce using rule 46 (num_term -> OPENPAR num_exp CLOSEPAR .)
    EQUAL           reduce using rule 46 (num_term -> OPENPAR num_exp CLOSEPAR .)
    EQUAL_NULL      reduce using rule 46 (num_term -> OPENPAR num_exp CLOSEPAR .)
    CLOSEPAR        reduce using rule 46 (num_term -> OPENPAR num_exp CLOSEPAR .)
    AND             reduce using rule 46 (num_term -> OPENPAR num_exp CLOSEPAR .)
    SEMICOLON       reduce using rule 46 (num_term -> OPENPAR num_exp CLOSEPAR .)


state 89

    (35) num_cond -> num_exp BETWEEN num_exp . AND num_exp
    (38) num_exp -> num_exp . ADD num_factor

    AND             shift and go to state 109
    ADD             shift and go to state 64


state 90

    (38) num_exp -> num_exp ADD num_factor .
    (41) num_factor -> num_factor . ASTERISK num_term
    (42) num_factor -> num_factor . DIVIDE num_term
    (43) num_factor -> num_factor . DIVIDE_INT num_term
    (44) num_factor -> num_factor . MODULO num_term

    BETWEEN         reduce using rule 38 (num_exp -> num_exp ADD num_factor .)
    NOT             reduce using rule 38 (num_exp -> num_exp ADD num_factor .)
    IS              reduce using rule 38 (num_exp -> num_exp ADD num_factor .)
    ADD             reduce using rule 38 (num_exp -> num_exp ADD num_factor .)
    GE              reduce using rule 38 (num_exp -> num_exp ADD num_factor .)
    GT              reduce using rule 38 (num_exp -> num_exp ADD num_factor .)
    LE              reduce using rule 38 (num_exp -> num_exp ADD num_factor .)
    LT              reduce using rule 38 (num_exp -> num_exp ADD num_factor .)
    NE              reduce using rule 38 (num_exp -> num_exp ADD num_factor .)
    EQUAL           reduce using rule 38 (num_exp -> num_exp ADD num_factor .)
    EQUAL_NULL      reduce using rule 38 (num_exp -> num_exp ADD num_factor .)
    CLOSEPAR        reduce using rule 38 (num_exp -> num_exp ADD num_factor .)
    AND             reduce using rule 38 (num_exp -> num_exp ADD num_factor .)
    SEMICOLON       reduce using rule 38 (num_exp -> num_exp ADD num_factor .)
    ASTERISK        shift and go to state 79
    DIVIDE          shift and go to state 77
    DIVIDE_INT      shift and go to state 78
    MODULO          shift and go to state 80


state 91

    (36) num_cond -> num_exp NOT NULL .

    CLOSEPAR        reduce using rule 36 (num_cond -> num_exp NOT NULL .)
    SEMICOLON       reduce using rule 36 (num_cond -> num_exp NOT NULL .)


state 92

    (34) num_cond -> num_exp comparison_op num_exp .
    (38) num_exp -> num_exp . ADD num_factor

    CLOSEPAR        reduce using rule 34 (num_cond -> num_exp comparison_op num_exp .)
    SEMICOLON       reduce using rule 34 (num_cond -> num_exp comparison_op num_exp .)
    ADD             shift and go to state 64


state 93

    (37) num_cond -> num_exp IS NULL .

    CLOSEPAR        reduce using rule 37 (num_cond -> num_exp IS NULL .)
    SEMICOLON       reduce using rule 37 (num_cond -> num_exp IS NULL .)


state 94

    (32) string_cond -> STRCMP OPENPAR string_exp . COMMA string_exp CLOSEPAR

    COMMA           shift and go to state 110


state 95

    (31) string_cond -> string_exp NOT LIKE . string_exp
    (33) string_exp -> . STRING_LIT

    STRING_LIT      shift and go to state 44

    string_exp                     shift and go to state 111

state 96

    (30) string_cond -> string_exp LIKE string_exp .

    SEMICOLON       reduce using rule 30 (string_cond -> string_exp LIKE string_exp .)
    CLOSEPAR        reduce using rule 30 (string_cond -> string_exp LIKE string_exp .)


state 97

    (28) condition -> NOT OPENPAR string_cond . CLOSEPAR

    CLOSEPAR        shift and go to state 112


state 98

    (29) condition -> NOT OPENPAR num_cond . CLOSEPAR

    CLOSEPAR        shift and go to state 113


state 99

    (39) num_exp -> num_factor SUBTRACT num_exp .
    (38) num_exp -> num_exp . ADD num_factor

    BETWEEN         reduce using rule 39 (num_exp -> num_factor SUBTRACT num_exp .)
    NOT             reduce using rule 39 (num_exp -> num_factor SUBTRACT num_exp .)
    IS              reduce using rule 39 (num_exp -> num_factor SUBTRACT num_exp .)
    ADD             reduce using rule 39 (num_exp -> num_factor SUBTRACT num_exp .)
    GE              reduce using rule 39 (num_exp -> num_factor SUBTRACT num_exp .)
    GT              reduce using rule 39 (num_exp -> num_factor SUBTRACT num_exp .)
    LE              reduce using rule 39 (num_exp -> num_factor SUBTRACT num_exp .)
    LT              reduce using rule 39 (num_exp -> num_factor SUBTRACT num_exp .)
    NE              reduce using rule 39 (num_exp -> num_factor SUBTRACT num_exp .)
    EQUAL           reduce using rule 39 (num_exp -> num_factor SUBTRACT num_exp .)
    EQUAL_NULL      reduce using rule 39 (num_exp -> num_factor SUBTRACT num_exp .)
    CLOSEPAR        reduce using rule 39 (num_exp -> num_factor SUBTRACT num_exp .)
    AND             reduce using rule 39 (num_exp -> num_factor SUBTRACT num_exp .)
    SEMICOLON       reduce using rule 39 (num_exp -> num_factor SUBTRACT num_exp .)

  ! ADD             [ shift and go to state 64 ]


state 100

    (42) num_factor -> num_factor DIVIDE num_term .

    ASTERISK        reduce using rule 42 (num_factor -> num_factor DIVIDE num_term .)
    DIVIDE          reduce using rule 42 (num_factor -> num_factor DIVIDE num_term .)
    DIVIDE_INT      reduce using rule 42 (num_factor -> num_factor DIVIDE num_term .)
    MODULO          reduce using rule 42 (num_factor -> num_factor DIVIDE num_term .)
    BETWEEN         reduce using rule 42 (num_factor -> num_factor DIVIDE num_term .)
    NOT             reduce using rule 42 (num_factor -> num_factor DIVIDE num_term .)
    IS              reduce using rule 42 (num_factor -> num_factor DIVIDE num_term .)
    ADD             reduce using rule 42 (num_factor -> num_factor DIVIDE num_term .)
    GE              reduce using rule 42 (num_factor -> num_factor DIVIDE num_term .)
    GT              reduce using rule 42 (num_factor -> num_factor DIVIDE num_term .)
    LE              reduce using rule 42 (num_factor -> num_factor DIVIDE num_term .)
    LT              reduce using rule 42 (num_factor -> num_factor DIVIDE num_term .)
    NE              reduce using rule 42 (num_factor -> num_factor DIVIDE num_term .)
    EQUAL           reduce using rule 42 (num_factor -> num_factor DIVIDE num_term .)
    EQUAL_NULL      reduce using rule 42 (num_factor -> num_factor DIVIDE num_term .)
    CLOSEPAR        reduce using rule 42 (num_factor -> num_factor DIVIDE num_term .)
    AND             reduce using rule 42 (num_factor -> num_factor DIVIDE num_term .)
    SEMICOLON       reduce using rule 42 (num_factor -> num_factor DIVIDE num_term .)
    SUBTRACT        reduce using rule 42 (num_factor -> num_factor DIVIDE num_term .)


state 101

    (43) num_factor -> num_factor DIVIDE_INT num_term .

    ASTERISK        reduce using rule 43 (num_factor -> num_factor DIVIDE_INT num_term .)
    DIVIDE          reduce using rule 43 (num_factor -> num_factor DIVIDE_INT num_term .)
    DIVIDE_INT      reduce using rule 43 (num_factor -> num_factor DIVIDE_INT num_term .)
    MODULO          reduce using rule 43 (num_factor -> num_factor DIVIDE_INT num_term .)
    BETWEEN         reduce using rule 43 (num_factor -> num_factor DIVIDE_INT num_term .)
    NOT             reduce using rule 43 (num_factor -> num_factor DIVIDE_INT num_term .)
    IS              reduce using rule 43 (num_factor -> num_factor DIVIDE_INT num_term .)
    ADD             reduce using rule 43 (num_factor -> num_factor DIVIDE_INT num_term .)
    GE              reduce using rule 43 (num_factor -> num_factor DIVIDE_INT num_term .)
    GT              reduce using rule 43 (num_factor -> num_factor DIVIDE_INT num_term .)
    LE              reduce using rule 43 (num_factor -> num_factor DIVIDE_INT num_term .)
    LT              reduce using rule 43 (num_factor -> num_factor DIVIDE_INT num_term .)
    NE              reduce using rule 43 (num_factor -> num_factor DIVIDE_INT num_term .)
    EQUAL           reduce using rule 43 (num_factor -> num_factor DIVIDE_INT num_term .)
    EQUAL_NULL      reduce using rule 43 (num_factor -> num_factor DIVIDE_INT num_term .)
    CLOSEPAR        reduce using rule 43 (num_factor -> num_factor DIVIDE_INT num_term .)
    AND             reduce using rule 43 (num_factor -> num_factor DIVIDE_INT num_term .)
    SEMICOLON       reduce using rule 43 (num_factor -> num_factor DIVIDE_INT num_term .)
    SUBTRACT        reduce using rule 43 (num_factor -> num_factor DIVIDE_INT num_term .)


state 102

    (41) num_factor -> num_factor ASTERISK num_term .

    ASTERISK        reduce using rule 41 (num_factor -> num_factor ASTERISK num_term .)
    DIVIDE          reduce using rule 41 (num_factor -> num_factor ASTERISK num_term .)
    DIVIDE_INT      reduce using rule 41 (num_factor -> num_factor ASTERISK num_term .)
    MODULO          reduce using rule 41 (num_factor -> num_factor ASTERISK num_term .)
    BETWEEN         reduce using rule 41 (num_factor -> num_factor ASTERISK num_term .)
    NOT             reduce using rule 41 (num_factor -> num_factor ASTERISK num_term .)
    IS              reduce using rule 41 (num_factor -> num_factor ASTERISK num_term .)
    ADD             reduce using rule 41 (num_factor -> num_factor ASTERISK num_term .)
    GE              reduce using rule 41 (num_factor -> num_factor ASTERISK num_term .)
    GT              reduce using rule 41 (num_factor -> num_factor ASTERISK num_term .)
    LE              reduce using rule 41 (num_factor -> num_factor ASTERISK num_term .)
    LT              reduce using rule 41 (num_factor -> num_factor ASTERISK num_term .)
    NE              reduce using rule 41 (num_factor -> num_factor ASTERISK num_term .)
    EQUAL           reduce using rule 41 (num_factor -> num_factor ASTERISK num_term .)
    EQUAL_NULL      reduce using rule 41 (num_factor -> num_factor ASTERISK num_term .)
    CLOSEPAR        reduce using rule 41 (num_factor -> num_factor ASTERISK num_term .)
    AND             reduce using rule 41 (num_factor -> num_factor ASTERISK num_term .)
    SEMICOLON       reduce using rule 41 (num_factor -> num_factor ASTERISK num_term .)
    SUBTRACT        reduce using rule 41 (num_factor -> num_factor ASTERISK num_term .)


state 103

    (44) num_factor -> num_factor MODULO num_term .

    ASTERISK        reduce using rule 44 (num_factor -> num_factor MODULO num_term .)
    DIVIDE          reduce using rule 44 (num_factor -> num_factor MODULO num_term .)
    DIVIDE_INT      reduce using rule 44 (num_factor -> num_factor MODULO num_term .)
    MODULO          reduce using rule 44 (num_factor -> num_factor MODULO num_term .)
    BETWEEN         reduce using rule 44 (num_factor -> num_factor MODULO num_term .)
    NOT             reduce using rule 44 (num_factor -> num_factor MODULO num_term .)
    IS              reduce using rule 44 (num_factor -> num_factor MODULO num_term .)
    ADD             reduce using rule 44 (num_factor -> num_factor MODULO num_term .)
    GE              reduce using rule 44 (num_factor -> num_factor MODULO num_term .)
    GT              reduce using rule 44 (num_factor -> num_factor MODULO num_term .)
    LE              reduce using rule 44 (num_factor -> num_factor MODULO num_term .)
    LT              reduce using rule 44 (num_factor -> num_factor MODULO num_term .)
    NE              reduce using rule 44 (num_factor -> num_factor MODULO num_term .)
    EQUAL           reduce using rule 44 (num_factor -> num_factor MODULO num_term .)
    EQUAL_NULL      reduce using rule 44 (num_factor -> num_factor MODULO num_term .)
    CLOSEPAR        reduce using rule 44 (num_factor -> num_factor MODULO num_term .)
    AND             reduce using rule 44 (num_factor -> num_factor MODULO num_term .)
    SEMICOLON       reduce using rule 44 (num_factor -> num_factor MODULO num_term .)
    SUBTRACT        reduce using rule 44 (num_factor -> num_factor MODULO num_term .)


state 104

    (8) select_statement -> SELECT filter_rows_op columns FROM TABLE_NAME WHERE condition . SEMICOLON

    SEMICOLON       shift and go to state 114


state 105

    (20) assignment_list -> assignment_list COMMA COLUMN_NAME EQUAL . literals
    (23) literals -> . STRING_LIT
    (24) literals -> . INT_LIT
    (25) literals -> . DOUBLE_LIT

    STRING_LIT      shift and go to state 56
    INT_LIT         shift and go to state 53
    DOUBLE_LIT      shift and go to state 55

    literals                       shift and go to state 115

state 106

    (22) value_list -> value_list COMMA literals .

    CLOSEPAR        reduce using rule 22 (value_list -> value_list COMMA literals .)
    COMMA           reduce using rule 22 (value_list -> value_list COMMA literals .)


state 107

    (4) insert_statement -> INSERT into_kw TABLE_NAME VALUES OPENPAR value_list CLOSEPAR SEMICOLON .

    $end            reduce using rule 4 (insert_statement -> INSERT into_kw TABLE_NAME VALUES OPENPAR value_list CLOSEPAR SEMICOLON .)


state 108

    (5) insert_statement -> INSERT into_kw TABLE_NAME OPENPAR column_name CLOSEPAR VALUES OPENPAR . value_list CLOSEPAR SEMICOLON
    (21) value_list -> . literals
    (22) value_list -> . value_list COMMA literals
    (23) literals -> . STRING_LIT
    (24) literals -> . INT_LIT
    (25) literals -> . DOUBLE_LIT

    STRING_LIT      shift and go to state 56
    INT_LIT         shift and go to state 53
    DOUBLE_LIT      shift and go to state 55

    value_list                     shift and go to state 116
    literals                       shift and go to state 54

state 109

    (35) num_cond -> num_exp BETWEEN num_exp AND . num_exp
    (38) num_exp -> . num_exp ADD num_factor
    (39) num_exp -> . num_factor SUBTRACT num_exp
    (40) num_exp -> . num_factor
    (41) num_factor -> . num_factor ASTERISK num_term
    (42) num_factor -> . num_factor DIVIDE num_term
    (43) num_factor -> . num_factor DIVIDE_INT num_term
    (44) num_factor -> . num_factor MODULO num_term
    (45) num_factor -> . num_term
    (46) num_term -> . OPENPAR num_exp CLOSEPAR
    (47) num_term -> . num_val
    (48) num_val -> . INT_LIT
    (49) num_val -> . DOUBLE_LIT
    (50) num_val -> . COLUMN_NAME

    OPENPAR         shift and go to state 35
    INT_LIT         shift and go to state 33
    DOUBLE_LIT      shift and go to state 37
    COLUMN_NAME     shift and go to state 34

    num_val                        shift and go to state 45
    num_factor                     shift and go to state 42
    num_exp                        shift and go to state 117
    num_term                       shift and go to state 46

state 110

    (32) string_cond -> STRCMP OPENPAR string_exp COMMA . string_exp CLOSEPAR
    (33) string_exp -> . STRING_LIT

    STRING_LIT      shift and go to state 44

    string_exp                     shift and go to state 118

state 111

    (31) string_cond -> string_exp NOT LIKE string_exp .

    SEMICOLON       reduce using rule 31 (string_cond -> string_exp NOT LIKE string_exp .)
    CLOSEPAR        reduce using rule 31 (string_cond -> string_exp NOT LIKE string_exp .)


state 112

    (28) condition -> NOT OPENPAR string_cond CLOSEPAR .

    SEMICOLON       reduce using rule 28 (condition -> NOT OPENPAR string_cond CLOSEPAR .)


state 113

    (29) condition -> NOT OPENPAR num_cond CLOSEPAR .

    SEMICOLON       reduce using rule 29 (condition -> NOT OPENPAR num_cond CLOSEPAR .)


state 114

    (8) select_statement -> SELECT filter_rows_op columns FROM TABLE_NAME WHERE condition SEMICOLON .

    $end            reduce using rule 8 (select_statement -> SELECT filter_rows_op columns FROM TABLE_NAME WHERE condition SEMICOLON .)


state 115

    (20) assignment_list -> assignment_list COMMA COLUMN_NAME EQUAL literals .

    SEMICOLON       reduce using rule 20 (assignment_list -> assignment_list COMMA COLUMN_NAME EQUAL literals .)
    COMMA           reduce using rule 20 (assignment_list -> assignment_list COMMA COLUMN_NAME EQUAL literals .)


state 116

    (5) insert_statement -> INSERT into_kw TABLE_NAME OPENPAR column_name CLOSEPAR VALUES OPENPAR value_list . CLOSEPAR SEMICOLON
    (22) value_list -> value_list . COMMA literals

    CLOSEPAR        shift and go to state 119
    COMMA           shift and go to state 85


state 117

    (35) num_cond -> num_exp BETWEEN num_exp AND num_exp .
    (38) num_exp -> num_exp . ADD num_factor

    CLOSEPAR        reduce using rule 35 (num_cond -> num_exp BETWEEN num_exp AND num_exp .)
    SEMICOLON       reduce using rule 35 (num_cond -> num_exp BETWEEN num_exp AND num_exp .)
    ADD             shift and go to state 64


state 118

    (32) string_cond -> STRCMP OPENPAR string_exp COMMA string_exp . CLOSEPAR

    CLOSEPAR        shift and go to state 120


state 119

    (5) insert_statement -> INSERT into_kw TABLE_NAME OPENPAR column_name CLOSEPAR VALUES OPENPAR value_list CLOSEPAR . SEMICOLON

    SEMICOLON       shift and go to state 121


state 120

    (32) string_cond -> STRCMP OPENPAR string_exp COMMA string_exp CLOSEPAR .

    SEMICOLON       reduce using rule 32 (string_cond -> STRCMP OPENPAR string_exp COMMA string_exp CLOSEPAR .)
    CLOSEPAR        reduce using rule 32 (string_cond -> STRCMP OPENPAR string_exp COMMA string_exp CLOSEPAR .)


state 121

    (5) insert_statement -> INSERT into_kw TABLE_NAME OPENPAR column_name CLOSEPAR VALUES OPENPAR value_list CLOSEPAR SEMICOLON .

    $end            reduce using rule 5 (insert_statement -> INSERT into_kw TABLE_NAME OPENPAR column_name CLOSEPAR VALUES OPENPAR value_list CLOSEPAR SEMICOLON .)

