Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> SELECT filter_rows_op columns FROM TABLE_NAME SEMICOLON
Rule 2     statement -> SELECT filter_rows_op columns FROM TABLE_NAME WHERE condition SEMICOLON
Rule 3     filter_rows_op -> FILTER_ROWS
Rule 4     filter_rows_op -> empty
Rule 5     columns -> ASTERISK
Rule 6     columns -> column_name
Rule 7     column_name -> COLUMN_NAME
Rule 8     column_name -> column_name COMMA COLUMN_NAME
Rule 9     condition -> string_cond
Rule 10    condition -> num_cond
Rule 11    condition -> date_cond
Rule 12    condition -> NOT OPENPAR string_cond CLOSEPAR
Rule 13    condition -> NOT OPENPAR num_cond CLOSEPAR
Rule 14    condition -> NOT OPENPAR date_cond CLOSEPAR
Rule 15    string_cond -> string_exp LIKE string_exp
Rule 16    string_cond -> string_exp NOT LIKE string_exp
Rule 17    string_cond -> STRCMP OPENPAR string_exp COMMA string_exp CLOSEPAR
Rule 18    string_exp -> STRING_LIT
Rule 19    num_cond -> num_exp comparison_op num_exp
Rule 20    num_cond -> num_exp BETWEEN num_exp AND num_exp
Rule 21    num_cond -> num_exp NOT NULL
Rule 22    num_cond -> num_exp IS NULL
Rule 23    num_exp -> num_exp ADD num_factor
Rule 24    num_exp -> num_exp SUBTRACT num_factor
Rule 25    num_exp -> num_factor
Rule 26    num_factor -> num_factor MULTIPLY num_term
Rule 27    num_factor -> num_factor DIVIDE num_term
Rule 28    num_factor -> num_factor DIVIDE_INT num_term
Rule 29    num_factor -> num_factor MODULO num_term
Rule 30    num_factor -> num_term
Rule 31    num_term -> OPENPAR num_val CLOSEPAR
Rule 32    num_term -> num_val
Rule 33    num_val -> INT_LIT
Rule 34    num_val -> DOUBLE_LIT
Rule 35    num_val -> COLUMN_NAME
Rule 36    date_cond -> date_exp comparison_op date_exp
Rule 37    date_cond -> date_exp
Rule 38    date_exp -> date_function
Rule 39    date_exp -> DATE_LIT
Rule 40    date_function -> ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR
Rule 41    date_function -> CURDATE OPENPAR CLOSEPAR
Rule 42    date_function -> CURRENT_DATE OPENPAR CLOSEPAR
Rule 43    date_function -> CURRENT_DATE
Rule 44    date_function -> DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR
Rule 45    date_function -> DAY OPENPAR date_exp CLOSEPAR
Rule 46    date_function -> DAYNAME OPENPAR date_exp CLOSEPAR
Rule 47    date_function -> DAYOFMONTH OPENPAR date_exp CLOSEPAR
Rule 48    date_function -> DAYOFWEEK OPENPAR date_exp CLOSEPAR
Rule 49    date_function -> DAYOFYEAR OPENPAR date_exp CLOSEPAR
Rule 50    date_function -> LAST_DAY OPENPAR date_exp CLOSEPAR
Rule 51    date_function -> MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR
Rule 52    date_function -> MONTH OPENPAR date_exp CLOSEPAR
Rule 53    date_function -> MONTHNAME OPENPAR date_exp CLOSEPAR
Rule 54    date_function -> SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR
Rule 55    date_function -> YEAR OPENPAR date_exp CLOSEPAR
Rule 56    comparison_op -> GE
Rule 57    comparison_op -> GT
Rule 58    comparison_op -> LE
Rule 59    comparison_op -> LT
Rule 60    comparison_op -> NE
Rule 61    comparison_op -> EQUAL
Rule 62    comparison_op -> EQUAL_NULL
Rule 63    empty -> <empty>

Terminals, with rules where they appear

ADD                  : 23
ADDDATE              : 40
AND                  : 20
ASTERISK             : 5
BETWEEN              : 20
CLOSEPAR             : 12 13 14 17 31 40 41 42 44 45 46 47 48 49 50 51 52 53 54 55
COLUMN_NAME          : 7 8 35
COMMA                : 8 17 40 44 51 54
CURDATE              : 41
CURRENT_DATE         : 42 43
DATEDIFF             : 44
DATE_LIT             : 39
DATE_UNIT            : 54
DAY                  : 45
DAYNAME              : 46
DAYOFMONTH           : 47
DAYOFWEEK            : 48
DAYOFYEAR            : 49
DIVIDE               : 27
DIVIDE_INT           : 28
DOUBLE_LIT           : 34
EQUAL                : 61
EQUAL_NULL           : 62
FILTER_ROWS          : 3
FROM                 : 1 2
GE                   : 56
GT                   : 57
INTERVAL             : 54
INT_LIT              : 33
IS                   : 22
LAST_DAY             : 50
LE                   : 58
LIKE                 : 15 16
LT                   : 59
MAKEDATE             : 51
MODULO               : 29
MONTH                : 52
MONTHNAME            : 53
MULTIPLY             : 26
NE                   : 60
NOT                  : 12 13 14 16 21
NULL                 : 21 22
OPENPAR              : 12 13 14 17 31 40 41 42 44 45 46 47 48 49 50 51 52 53 54 55
SELECT               : 1 2
SEMICOLON            : 1 2
STRCMP               : 17
STRING_LIT           : 18
SUBDATE              : 54
SUBTRACT             : 24
TABLE_NAME           : 1 2
WHERE                : 2
YEAR                 : 55
error                : 

Nonterminals, with rules where they appear

column_name          : 6 8
columns              : 1 2
comparison_op        : 19 36
condition            : 2
date_cond            : 11 14
date_exp             : 36 36 37 40 40 44 44 45 46 47 48 49 50 52 53 54 55
date_function        : 38
empty                : 4
filter_rows_op       : 1 2
num_cond             : 10 13
num_exp              : 19 19 20 20 20 21 22 23 24 51 51 54
num_factor           : 23 24 25 26 27 28 29
num_term             : 26 27 28 29 30
num_val              : 31 32
statement            : 0
string_cond          : 9 12
string_exp           : 15 15 16 16 17 17

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . SELECT filter_rows_op columns FROM TABLE_NAME SEMICOLON
    (2) statement -> . SELECT filter_rows_op columns FROM TABLE_NAME WHERE condition SEMICOLON

    SELECT          shift and go to state 2

    statement                      shift and go to state 1

state 1

    (0) S' -> statement .



state 2

    (1) statement -> SELECT . filter_rows_op columns FROM TABLE_NAME SEMICOLON
    (2) statement -> SELECT . filter_rows_op columns FROM TABLE_NAME WHERE condition SEMICOLON
    (3) filter_rows_op -> . FILTER_ROWS
    (4) filter_rows_op -> . empty
    (63) empty -> .

    FILTER_ROWS     shift and go to state 4
    ASTERISK        reduce using rule 63 (empty -> .)
    COLUMN_NAME     reduce using rule 63 (empty -> .)

    empty                          shift and go to state 3
    filter_rows_op                 shift and go to state 5

state 3

    (4) filter_rows_op -> empty .

    ASTERISK        reduce using rule 4 (filter_rows_op -> empty .)
    COLUMN_NAME     reduce using rule 4 (filter_rows_op -> empty .)


state 4

    (3) filter_rows_op -> FILTER_ROWS .

    ASTERISK        reduce using rule 3 (filter_rows_op -> FILTER_ROWS .)
    COLUMN_NAME     reduce using rule 3 (filter_rows_op -> FILTER_ROWS .)


state 5

    (1) statement -> SELECT filter_rows_op . columns FROM TABLE_NAME SEMICOLON
    (2) statement -> SELECT filter_rows_op . columns FROM TABLE_NAME WHERE condition SEMICOLON
    (5) columns -> . ASTERISK
    (6) columns -> . column_name
    (7) column_name -> . COLUMN_NAME
    (8) column_name -> . column_name COMMA COLUMN_NAME

    ASTERISK        shift and go to state 7
    COLUMN_NAME     shift and go to state 8

    column_name                    shift and go to state 6
    columns                        shift and go to state 9

state 6

    (6) columns -> column_name .
    (8) column_name -> column_name . COMMA COLUMN_NAME

    FROM            reduce using rule 6 (columns -> column_name .)
    COMMA           shift and go to state 10


state 7

    (5) columns -> ASTERISK .

    FROM            reduce using rule 5 (columns -> ASTERISK .)


state 8

    (7) column_name -> COLUMN_NAME .

    COMMA           reduce using rule 7 (column_name -> COLUMN_NAME .)
    FROM            reduce using rule 7 (column_name -> COLUMN_NAME .)


state 9

    (1) statement -> SELECT filter_rows_op columns . FROM TABLE_NAME SEMICOLON
    (2) statement -> SELECT filter_rows_op columns . FROM TABLE_NAME WHERE condition SEMICOLON

    FROM            shift and go to state 11


state 10

    (8) column_name -> column_name COMMA . COLUMN_NAME

    COLUMN_NAME     shift and go to state 12


state 11

    (1) statement -> SELECT filter_rows_op columns FROM . TABLE_NAME SEMICOLON
    (2) statement -> SELECT filter_rows_op columns FROM . TABLE_NAME WHERE condition SEMICOLON

    TABLE_NAME      shift and go to state 13


state 12

    (8) column_name -> column_name COMMA COLUMN_NAME .

    COMMA           reduce using rule 8 (column_name -> column_name COMMA COLUMN_NAME .)
    FROM            reduce using rule 8 (column_name -> column_name COMMA COLUMN_NAME .)


state 13

    (1) statement -> SELECT filter_rows_op columns FROM TABLE_NAME . SEMICOLON
    (2) statement -> SELECT filter_rows_op columns FROM TABLE_NAME . WHERE condition SEMICOLON

    SEMICOLON       shift and go to state 15
    WHERE           shift and go to state 14


state 14

    (2) statement -> SELECT filter_rows_op columns FROM TABLE_NAME WHERE . condition SEMICOLON
    (9) condition -> . string_cond
    (10) condition -> . num_cond
    (11) condition -> . date_cond
    (12) condition -> . NOT OPENPAR string_cond CLOSEPAR
    (13) condition -> . NOT OPENPAR num_cond CLOSEPAR
    (14) condition -> . NOT OPENPAR date_cond CLOSEPAR
    (15) string_cond -> . string_exp LIKE string_exp
    (16) string_cond -> . string_exp NOT LIKE string_exp
    (17) string_cond -> . STRCMP OPENPAR string_exp COMMA string_exp CLOSEPAR
    (19) num_cond -> . num_exp comparison_op num_exp
    (20) num_cond -> . num_exp BETWEEN num_exp AND num_exp
    (21) num_cond -> . num_exp NOT NULL
    (22) num_cond -> . num_exp IS NULL
    (36) date_cond -> . date_exp comparison_op date_exp
    (37) date_cond -> . date_exp
    (18) string_exp -> . STRING_LIT
    (23) num_exp -> . num_exp ADD num_factor
    (24) num_exp -> . num_exp SUBTRACT num_factor
    (25) num_exp -> . num_factor
    (38) date_exp -> . date_function
    (39) date_exp -> . DATE_LIT
    (26) num_factor -> . num_factor MULTIPLY num_term
    (27) num_factor -> . num_factor DIVIDE num_term
    (28) num_factor -> . num_factor DIVIDE_INT num_term
    (29) num_factor -> . num_factor MODULO num_term
    (30) num_factor -> . num_term
    (40) date_function -> . ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR
    (41) date_function -> . CURDATE OPENPAR CLOSEPAR
    (42) date_function -> . CURRENT_DATE OPENPAR CLOSEPAR
    (43) date_function -> . CURRENT_DATE
    (44) date_function -> . DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR
    (45) date_function -> . DAY OPENPAR date_exp CLOSEPAR
    (46) date_function -> . DAYNAME OPENPAR date_exp CLOSEPAR
    (47) date_function -> . DAYOFMONTH OPENPAR date_exp CLOSEPAR
    (48) date_function -> . DAYOFWEEK OPENPAR date_exp CLOSEPAR
    (49) date_function -> . DAYOFYEAR OPENPAR date_exp CLOSEPAR
    (50) date_function -> . LAST_DAY OPENPAR date_exp CLOSEPAR
    (51) date_function -> . MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR
    (52) date_function -> . MONTH OPENPAR date_exp CLOSEPAR
    (53) date_function -> . MONTHNAME OPENPAR date_exp CLOSEPAR
    (54) date_function -> . SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR
    (55) date_function -> . YEAR OPENPAR date_exp CLOSEPAR
    (31) num_term -> . OPENPAR num_val CLOSEPAR
    (32) num_term -> . num_val
    (33) num_val -> . INT_LIT
    (34) num_val -> . DOUBLE_LIT
    (35) num_val -> . COLUMN_NAME

    NOT             shift and go to state 21
    STRCMP          shift and go to state 26
    STRING_LIT      shift and go to state 34
    DATE_LIT        shift and go to state 41
    ADDDATE         shift and go to state 48
    CURDATE         shift and go to state 39
    CURRENT_DATE    shift and go to state 49
    DATEDIFF        shift and go to state 23
    DAY             shift and go to state 30
    DAYNAME         shift and go to state 33
    DAYOFMONTH      shift and go to state 18
    DAYOFWEEK       shift and go to state 47
    DAYOFYEAR       shift and go to state 42
    LAST_DAY        shift and go to state 28
    MAKEDATE        shift and go to state 36
    MONTH           shift and go to state 37
    MONTHNAME       shift and go to state 32
    SUBDATE         shift and go to state 22
    YEAR            shift and go to state 17
    OPENPAR         shift and go to state 43
    INT_LIT         shift and go to state 20
    DOUBLE_LIT      shift and go to state 31
    COLUMN_NAME     shift and go to state 38

    num_factor                     shift and go to state 16
    condition                      shift and go to state 44
    num_val                        shift and go to state 46
    num_cond                       shift and go to state 24
    date_exp                       shift and go to state 25
    string_cond                    shift and go to state 19
    num_term                       shift and go to state 35
    string_exp                     shift and go to state 27
    date_function                  shift and go to state 45
    num_exp                        shift and go to state 29
    date_cond                      shift and go to state 40

state 15

    (1) statement -> SELECT filter_rows_op columns FROM TABLE_NAME SEMICOLON .

    $end            reduce using rule 1 (statement -> SELECT filter_rows_op columns FROM TABLE_NAME SEMICOLON .)


state 16

    (25) num_exp -> num_factor .
    (26) num_factor -> num_factor . MULTIPLY num_term
    (27) num_factor -> num_factor . DIVIDE num_term
    (28) num_factor -> num_factor . DIVIDE_INT num_term
    (29) num_factor -> num_factor . MODULO num_term

    DATE_UNIT       reduce using rule 25 (num_exp -> num_factor .)
    ADD             reduce using rule 25 (num_exp -> num_factor .)
    SUBTRACT        reduce using rule 25 (num_exp -> num_factor .)
    AND             reduce using rule 25 (num_exp -> num_factor .)
    SEMICOLON       reduce using rule 25 (num_exp -> num_factor .)
    CLOSEPAR        reduce using rule 25 (num_exp -> num_factor .)
    COMMA           reduce using rule 25 (num_exp -> num_factor .)
    BETWEEN         reduce using rule 25 (num_exp -> num_factor .)
    NOT             reduce using rule 25 (num_exp -> num_factor .)
    IS              reduce using rule 25 (num_exp -> num_factor .)
    GE              reduce using rule 25 (num_exp -> num_factor .)
    GT              reduce using rule 25 (num_exp -> num_factor .)
    LE              reduce using rule 25 (num_exp -> num_factor .)
    LT              reduce using rule 25 (num_exp -> num_factor .)
    NE              reduce using rule 25 (num_exp -> num_factor .)
    EQUAL           reduce using rule 25 (num_exp -> num_factor .)
    EQUAL_NULL      reduce using rule 25 (num_exp -> num_factor .)
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 51
    DIVIDE_INT      shift and go to state 52
    MODULO          shift and go to state 50


state 17

    (55) date_function -> YEAR . OPENPAR date_exp CLOSEPAR

    OPENPAR         shift and go to state 54


state 18

    (47) date_function -> DAYOFMONTH . OPENPAR date_exp CLOSEPAR

    OPENPAR         shift and go to state 55


state 19

    (9) condition -> string_cond .

    SEMICOLON       reduce using rule 9 (condition -> string_cond .)


state 20

    (33) num_val -> INT_LIT .

    MULTIPLY        reduce using rule 33 (num_val -> INT_LIT .)
    DIVIDE          reduce using rule 33 (num_val -> INT_LIT .)
    DIVIDE_INT      reduce using rule 33 (num_val -> INT_LIT .)
    MODULO          reduce using rule 33 (num_val -> INT_LIT .)
    COMMA           reduce using rule 33 (num_val -> INT_LIT .)
    ADD             reduce using rule 33 (num_val -> INT_LIT .)
    SUBTRACT        reduce using rule 33 (num_val -> INT_LIT .)
    BETWEEN         reduce using rule 33 (num_val -> INT_LIT .)
    NOT             reduce using rule 33 (num_val -> INT_LIT .)
    IS              reduce using rule 33 (num_val -> INT_LIT .)
    GE              reduce using rule 33 (num_val -> INT_LIT .)
    GT              reduce using rule 33 (num_val -> INT_LIT .)
    LE              reduce using rule 33 (num_val -> INT_LIT .)
    LT              reduce using rule 33 (num_val -> INT_LIT .)
    NE              reduce using rule 33 (num_val -> INT_LIT .)
    EQUAL           reduce using rule 33 (num_val -> INT_LIT .)
    EQUAL_NULL      reduce using rule 33 (num_val -> INT_LIT .)
    SEMICOLON       reduce using rule 33 (num_val -> INT_LIT .)
    CLOSEPAR        reduce using rule 33 (num_val -> INT_LIT .)
    AND             reduce using rule 33 (num_val -> INT_LIT .)
    DATE_UNIT       reduce using rule 33 (num_val -> INT_LIT .)


state 21

    (12) condition -> NOT . OPENPAR string_cond CLOSEPAR
    (13) condition -> NOT . OPENPAR num_cond CLOSEPAR
    (14) condition -> NOT . OPENPAR date_cond CLOSEPAR

    OPENPAR         shift and go to state 56


state 22

    (54) date_function -> SUBDATE . OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR

    OPENPAR         shift and go to state 57


state 23

    (44) date_function -> DATEDIFF . OPENPAR date_exp COMMA date_exp CLOSEPAR

    OPENPAR         shift and go to state 58


state 24

    (10) condition -> num_cond .

    SEMICOLON       reduce using rule 10 (condition -> num_cond .)


state 25

    (36) date_cond -> date_exp . comparison_op date_exp
    (37) date_cond -> date_exp .
    (56) comparison_op -> . GE
    (57) comparison_op -> . GT
    (58) comparison_op -> . LE
    (59) comparison_op -> . LT
    (60) comparison_op -> . NE
    (61) comparison_op -> . EQUAL
    (62) comparison_op -> . EQUAL_NULL

    CLOSEPAR        reduce using rule 37 (date_cond -> date_exp .)
    SEMICOLON       reduce using rule 37 (date_cond -> date_exp .)
    GE              shift and go to state 59
    GT              shift and go to state 62
    LE              shift and go to state 64
    LT              shift and go to state 65
    NE              shift and go to state 63
    EQUAL           shift and go to state 66
    EQUAL_NULL      shift and go to state 60

    comparison_op                  shift and go to state 61

state 26

    (17) string_cond -> STRCMP . OPENPAR string_exp COMMA string_exp CLOSEPAR

    OPENPAR         shift and go to state 67


state 27

    (15) string_cond -> string_exp . LIKE string_exp
    (16) string_cond -> string_exp . NOT LIKE string_exp

    LIKE            shift and go to state 68
    NOT             shift and go to state 69


state 28

    (50) date_function -> LAST_DAY . OPENPAR date_exp CLOSEPAR

    OPENPAR         shift and go to state 70


state 29

    (19) num_cond -> num_exp . comparison_op num_exp
    (20) num_cond -> num_exp . BETWEEN num_exp AND num_exp
    (21) num_cond -> num_exp . NOT NULL
    (22) num_cond -> num_exp . IS NULL
    (23) num_exp -> num_exp . ADD num_factor
    (24) num_exp -> num_exp . SUBTRACT num_factor
    (56) comparison_op -> . GE
    (57) comparison_op -> . GT
    (58) comparison_op -> . LE
    (59) comparison_op -> . LT
    (60) comparison_op -> . NE
    (61) comparison_op -> . EQUAL
    (62) comparison_op -> . EQUAL_NULL

    BETWEEN         shift and go to state 74
    NOT             shift and go to state 72
    IS              shift and go to state 73
    ADD             shift and go to state 76
    SUBTRACT        shift and go to state 75
    GE              shift and go to state 59
    GT              shift and go to state 62
    LE              shift and go to state 64
    LT              shift and go to state 65
    NE              shift and go to state 63
    EQUAL           shift and go to state 66
    EQUAL_NULL      shift and go to state 60

    comparison_op                  shift and go to state 71

state 30

    (45) date_function -> DAY . OPENPAR date_exp CLOSEPAR

    OPENPAR         shift and go to state 77


state 31

    (34) num_val -> DOUBLE_LIT .

    MULTIPLY        reduce using rule 34 (num_val -> DOUBLE_LIT .)
    DIVIDE          reduce using rule 34 (num_val -> DOUBLE_LIT .)
    DIVIDE_INT      reduce using rule 34 (num_val -> DOUBLE_LIT .)
    MODULO          reduce using rule 34 (num_val -> DOUBLE_LIT .)
    COMMA           reduce using rule 34 (num_val -> DOUBLE_LIT .)
    ADD             reduce using rule 34 (num_val -> DOUBLE_LIT .)
    SUBTRACT        reduce using rule 34 (num_val -> DOUBLE_LIT .)
    BETWEEN         reduce using rule 34 (num_val -> DOUBLE_LIT .)
    NOT             reduce using rule 34 (num_val -> DOUBLE_LIT .)
    IS              reduce using rule 34 (num_val -> DOUBLE_LIT .)
    GE              reduce using rule 34 (num_val -> DOUBLE_LIT .)
    GT              reduce using rule 34 (num_val -> DOUBLE_LIT .)
    LE              reduce using rule 34 (num_val -> DOUBLE_LIT .)
    LT              reduce using rule 34 (num_val -> DOUBLE_LIT .)
    NE              reduce using rule 34 (num_val -> DOUBLE_LIT .)
    EQUAL           reduce using rule 34 (num_val -> DOUBLE_LIT .)
    EQUAL_NULL      reduce using rule 34 (num_val -> DOUBLE_LIT .)
    SEMICOLON       reduce using rule 34 (num_val -> DOUBLE_LIT .)
    CLOSEPAR        reduce using rule 34 (num_val -> DOUBLE_LIT .)
    AND             reduce using rule 34 (num_val -> DOUBLE_LIT .)
    DATE_UNIT       reduce using rule 34 (num_val -> DOUBLE_LIT .)


state 32

    (53) date_function -> MONTHNAME . OPENPAR date_exp CLOSEPAR

    OPENPAR         shift and go to state 78


state 33

    (46) date_function -> DAYNAME . OPENPAR date_exp CLOSEPAR

    OPENPAR         shift and go to state 79


state 34

    (18) string_exp -> STRING_LIT .

    COMMA           reduce using rule 18 (string_exp -> STRING_LIT .)
    SEMICOLON       reduce using rule 18 (string_exp -> STRING_LIT .)
    CLOSEPAR        reduce using rule 18 (string_exp -> STRING_LIT .)
    LIKE            reduce using rule 18 (string_exp -> STRING_LIT .)
    NOT             reduce using rule 18 (string_exp -> STRING_LIT .)


state 35

    (30) num_factor -> num_term .

    MULTIPLY        reduce using rule 30 (num_factor -> num_term .)
    DIVIDE          reduce using rule 30 (num_factor -> num_term .)
    DIVIDE_INT      reduce using rule 30 (num_factor -> num_term .)
    MODULO          reduce using rule 30 (num_factor -> num_term .)
    BETWEEN         reduce using rule 30 (num_factor -> num_term .)
    NOT             reduce using rule 30 (num_factor -> num_term .)
    IS              reduce using rule 30 (num_factor -> num_term .)
    ADD             reduce using rule 30 (num_factor -> num_term .)
    SUBTRACT        reduce using rule 30 (num_factor -> num_term .)
    GE              reduce using rule 30 (num_factor -> num_term .)
    GT              reduce using rule 30 (num_factor -> num_term .)
    LE              reduce using rule 30 (num_factor -> num_term .)
    LT              reduce using rule 30 (num_factor -> num_term .)
    NE              reduce using rule 30 (num_factor -> num_term .)
    EQUAL           reduce using rule 30 (num_factor -> num_term .)
    EQUAL_NULL      reduce using rule 30 (num_factor -> num_term .)
    SEMICOLON       reduce using rule 30 (num_factor -> num_term .)
    CLOSEPAR        reduce using rule 30 (num_factor -> num_term .)
    AND             reduce using rule 30 (num_factor -> num_term .)
    COMMA           reduce using rule 30 (num_factor -> num_term .)
    DATE_UNIT       reduce using rule 30 (num_factor -> num_term .)


state 36

    (51) date_function -> MAKEDATE . OPENPAR num_exp COMMA num_exp CLOSEPAR

    OPENPAR         shift and go to state 80


state 37

    (52) date_function -> MONTH . OPENPAR date_exp CLOSEPAR

    OPENPAR         shift and go to state 81


state 38

    (35) num_val -> COLUMN_NAME .

    MULTIPLY        reduce using rule 35 (num_val -> COLUMN_NAME .)
    DIVIDE          reduce using rule 35 (num_val -> COLUMN_NAME .)
    DIVIDE_INT      reduce using rule 35 (num_val -> COLUMN_NAME .)
    MODULO          reduce using rule 35 (num_val -> COLUMN_NAME .)
    COMMA           reduce using rule 35 (num_val -> COLUMN_NAME .)
    ADD             reduce using rule 35 (num_val -> COLUMN_NAME .)
    SUBTRACT        reduce using rule 35 (num_val -> COLUMN_NAME .)
    BETWEEN         reduce using rule 35 (num_val -> COLUMN_NAME .)
    NOT             reduce using rule 35 (num_val -> COLUMN_NAME .)
    IS              reduce using rule 35 (num_val -> COLUMN_NAME .)
    GE              reduce using rule 35 (num_val -> COLUMN_NAME .)
    GT              reduce using rule 35 (num_val -> COLUMN_NAME .)
    LE              reduce using rule 35 (num_val -> COLUMN_NAME .)
    LT              reduce using rule 35 (num_val -> COLUMN_NAME .)
    NE              reduce using rule 35 (num_val -> COLUMN_NAME .)
    EQUAL           reduce using rule 35 (num_val -> COLUMN_NAME .)
    EQUAL_NULL      reduce using rule 35 (num_val -> COLUMN_NAME .)
    SEMICOLON       reduce using rule 35 (num_val -> COLUMN_NAME .)
    CLOSEPAR        reduce using rule 35 (num_val -> COLUMN_NAME .)
    AND             reduce using rule 35 (num_val -> COLUMN_NAME .)
    DATE_UNIT       reduce using rule 35 (num_val -> COLUMN_NAME .)


state 39

    (41) date_function -> CURDATE . OPENPAR CLOSEPAR

    OPENPAR         shift and go to state 82


state 40

    (11) condition -> date_cond .

    SEMICOLON       reduce using rule 11 (condition -> date_cond .)


state 41

    (39) date_exp -> DATE_LIT .

    CLOSEPAR        reduce using rule 39 (date_exp -> DATE_LIT .)
    GE              reduce using rule 39 (date_exp -> DATE_LIT .)
    GT              reduce using rule 39 (date_exp -> DATE_LIT .)
    LE              reduce using rule 39 (date_exp -> DATE_LIT .)
    LT              reduce using rule 39 (date_exp -> DATE_LIT .)
    NE              reduce using rule 39 (date_exp -> DATE_LIT .)
    EQUAL           reduce using rule 39 (date_exp -> DATE_LIT .)
    EQUAL_NULL      reduce using rule 39 (date_exp -> DATE_LIT .)
    COMMA           reduce using rule 39 (date_exp -> DATE_LIT .)
    SEMICOLON       reduce using rule 39 (date_exp -> DATE_LIT .)


state 42

    (49) date_function -> DAYOFYEAR . OPENPAR date_exp CLOSEPAR

    OPENPAR         shift and go to state 83


state 43

    (31) num_term -> OPENPAR . num_val CLOSEPAR
    (33) num_val -> . INT_LIT
    (34) num_val -> . DOUBLE_LIT
    (35) num_val -> . COLUMN_NAME

    INT_LIT         shift and go to state 20
    DOUBLE_LIT      shift and go to state 31
    COLUMN_NAME     shift and go to state 38

    num_val                        shift and go to state 84

state 44

    (2) statement -> SELECT filter_rows_op columns FROM TABLE_NAME WHERE condition . SEMICOLON

    SEMICOLON       shift and go to state 85


state 45

    (38) date_exp -> date_function .

    CLOSEPAR        reduce using rule 38 (date_exp -> date_function .)
    GE              reduce using rule 38 (date_exp -> date_function .)
    GT              reduce using rule 38 (date_exp -> date_function .)
    LE              reduce using rule 38 (date_exp -> date_function .)
    LT              reduce using rule 38 (date_exp -> date_function .)
    NE              reduce using rule 38 (date_exp -> date_function .)
    EQUAL           reduce using rule 38 (date_exp -> date_function .)
    EQUAL_NULL      reduce using rule 38 (date_exp -> date_function .)
    COMMA           reduce using rule 38 (date_exp -> date_function .)
    SEMICOLON       reduce using rule 38 (date_exp -> date_function .)


state 46

    (32) num_term -> num_val .

    MULTIPLY        reduce using rule 32 (num_term -> num_val .)
    DIVIDE          reduce using rule 32 (num_term -> num_val .)
    DIVIDE_INT      reduce using rule 32 (num_term -> num_val .)
    MODULO          reduce using rule 32 (num_term -> num_val .)
    CLOSEPAR        reduce using rule 32 (num_term -> num_val .)
    ADD             reduce using rule 32 (num_term -> num_val .)
    SUBTRACT        reduce using rule 32 (num_term -> num_val .)
    COMMA           reduce using rule 32 (num_term -> num_val .)
    BETWEEN         reduce using rule 32 (num_term -> num_val .)
    NOT             reduce using rule 32 (num_term -> num_val .)
    IS              reduce using rule 32 (num_term -> num_val .)
    GE              reduce using rule 32 (num_term -> num_val .)
    GT              reduce using rule 32 (num_term -> num_val .)
    LE              reduce using rule 32 (num_term -> num_val .)
    LT              reduce using rule 32 (num_term -> num_val .)
    NE              reduce using rule 32 (num_term -> num_val .)
    EQUAL           reduce using rule 32 (num_term -> num_val .)
    EQUAL_NULL      reduce using rule 32 (num_term -> num_val .)
    SEMICOLON       reduce using rule 32 (num_term -> num_val .)
    AND             reduce using rule 32 (num_term -> num_val .)
    DATE_UNIT       reduce using rule 32 (num_term -> num_val .)


state 47

    (48) date_function -> DAYOFWEEK . OPENPAR date_exp CLOSEPAR

    OPENPAR         shift and go to state 86


state 48

    (40) date_function -> ADDDATE . OPENPAR date_exp COMMA date_exp CLOSEPAR

    OPENPAR         shift and go to state 87


state 49

    (42) date_function -> CURRENT_DATE . OPENPAR CLOSEPAR
    (43) date_function -> CURRENT_DATE .

    OPENPAR         shift and go to state 88
    CLOSEPAR        reduce using rule 43 (date_function -> CURRENT_DATE .)
    GE              reduce using rule 43 (date_function -> CURRENT_DATE .)
    GT              reduce using rule 43 (date_function -> CURRENT_DATE .)
    LE              reduce using rule 43 (date_function -> CURRENT_DATE .)
    LT              reduce using rule 43 (date_function -> CURRENT_DATE .)
    NE              reduce using rule 43 (date_function -> CURRENT_DATE .)
    EQUAL           reduce using rule 43 (date_function -> CURRENT_DATE .)
    EQUAL_NULL      reduce using rule 43 (date_function -> CURRENT_DATE .)
    SEMICOLON       reduce using rule 43 (date_function -> CURRENT_DATE .)
    COMMA           reduce using rule 43 (date_function -> CURRENT_DATE .)


state 50

    (29) num_factor -> num_factor MODULO . num_term
    (31) num_term -> . OPENPAR num_val CLOSEPAR
    (32) num_term -> . num_val
    (33) num_val -> . INT_LIT
    (34) num_val -> . DOUBLE_LIT
    (35) num_val -> . COLUMN_NAME

    OPENPAR         shift and go to state 43
    INT_LIT         shift and go to state 20
    DOUBLE_LIT      shift and go to state 31
    COLUMN_NAME     shift and go to state 38

    num_val                        shift and go to state 46
    num_term                       shift and go to state 89

state 51

    (27) num_factor -> num_factor DIVIDE . num_term
    (31) num_term -> . OPENPAR num_val CLOSEPAR
    (32) num_term -> . num_val
    (33) num_val -> . INT_LIT
    (34) num_val -> . DOUBLE_LIT
    (35) num_val -> . COLUMN_NAME

    OPENPAR         shift and go to state 43
    INT_LIT         shift and go to state 20
    DOUBLE_LIT      shift and go to state 31
    COLUMN_NAME     shift and go to state 38

    num_val                        shift and go to state 46
    num_term                       shift and go to state 90

state 52

    (28) num_factor -> num_factor DIVIDE_INT . num_term
    (31) num_term -> . OPENPAR num_val CLOSEPAR
    (32) num_term -> . num_val
    (33) num_val -> . INT_LIT
    (34) num_val -> . DOUBLE_LIT
    (35) num_val -> . COLUMN_NAME

    OPENPAR         shift and go to state 43
    INT_LIT         shift and go to state 20
    DOUBLE_LIT      shift and go to state 31
    COLUMN_NAME     shift and go to state 38

    num_val                        shift and go to state 46
    num_term                       shift and go to state 91

state 53

    (26) num_factor -> num_factor MULTIPLY . num_term
    (31) num_term -> . OPENPAR num_val CLOSEPAR
    (32) num_term -> . num_val
    (33) num_val -> . INT_LIT
    (34) num_val -> . DOUBLE_LIT
    (35) num_val -> . COLUMN_NAME

    OPENPAR         shift and go to state 43
    INT_LIT         shift and go to state 20
    DOUBLE_LIT      shift and go to state 31
    COLUMN_NAME     shift and go to state 38

    num_val                        shift and go to state 46
    num_term                       shift and go to state 92

state 54

    (55) date_function -> YEAR OPENPAR . date_exp CLOSEPAR
    (38) date_exp -> . date_function
    (39) date_exp -> . DATE_LIT
    (40) date_function -> . ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR
    (41) date_function -> . CURDATE OPENPAR CLOSEPAR
    (42) date_function -> . CURRENT_DATE OPENPAR CLOSEPAR
    (43) date_function -> . CURRENT_DATE
    (44) date_function -> . DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR
    (45) date_function -> . DAY OPENPAR date_exp CLOSEPAR
    (46) date_function -> . DAYNAME OPENPAR date_exp CLOSEPAR
    (47) date_function -> . DAYOFMONTH OPENPAR date_exp CLOSEPAR
    (48) date_function -> . DAYOFWEEK OPENPAR date_exp CLOSEPAR
    (49) date_function -> . DAYOFYEAR OPENPAR date_exp CLOSEPAR
    (50) date_function -> . LAST_DAY OPENPAR date_exp CLOSEPAR
    (51) date_function -> . MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR
    (52) date_function -> . MONTH OPENPAR date_exp CLOSEPAR
    (53) date_function -> . MONTHNAME OPENPAR date_exp CLOSEPAR
    (54) date_function -> . SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR
    (55) date_function -> . YEAR OPENPAR date_exp CLOSEPAR

    DATE_LIT        shift and go to state 41
    ADDDATE         shift and go to state 48
    CURDATE         shift and go to state 39
    CURRENT_DATE    shift and go to state 49
    DATEDIFF        shift and go to state 23
    DAY             shift and go to state 30
    DAYNAME         shift and go to state 33
    DAYOFMONTH      shift and go to state 18
    DAYOFWEEK       shift and go to state 47
    DAYOFYEAR       shift and go to state 42
    LAST_DAY        shift and go to state 28
    MAKEDATE        shift and go to state 36
    MONTH           shift and go to state 37
    MONTHNAME       shift and go to state 32
    SUBDATE         shift and go to state 22
    YEAR            shift and go to state 17

    date_exp                       shift and go to state 93
    date_function                  shift and go to state 45

state 55

    (47) date_function -> DAYOFMONTH OPENPAR . date_exp CLOSEPAR
    (38) date_exp -> . date_function
    (39) date_exp -> . DATE_LIT
    (40) date_function -> . ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR
    (41) date_function -> . CURDATE OPENPAR CLOSEPAR
    (42) date_function -> . CURRENT_DATE OPENPAR CLOSEPAR
    (43) date_function -> . CURRENT_DATE
    (44) date_function -> . DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR
    (45) date_function -> . DAY OPENPAR date_exp CLOSEPAR
    (46) date_function -> . DAYNAME OPENPAR date_exp CLOSEPAR
    (47) date_function -> . DAYOFMONTH OPENPAR date_exp CLOSEPAR
    (48) date_function -> . DAYOFWEEK OPENPAR date_exp CLOSEPAR
    (49) date_function -> . DAYOFYEAR OPENPAR date_exp CLOSEPAR
    (50) date_function -> . LAST_DAY OPENPAR date_exp CLOSEPAR
    (51) date_function -> . MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR
    (52) date_function -> . MONTH OPENPAR date_exp CLOSEPAR
    (53) date_function -> . MONTHNAME OPENPAR date_exp CLOSEPAR
    (54) date_function -> . SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR
    (55) date_function -> . YEAR OPENPAR date_exp CLOSEPAR

    DATE_LIT        shift and go to state 41
    ADDDATE         shift and go to state 48
    CURDATE         shift and go to state 39
    CURRENT_DATE    shift and go to state 49
    DATEDIFF        shift and go to state 23
    DAY             shift and go to state 30
    DAYNAME         shift and go to state 33
    DAYOFMONTH      shift and go to state 18
    DAYOFWEEK       shift and go to state 47
    DAYOFYEAR       shift and go to state 42
    LAST_DAY        shift and go to state 28
    MAKEDATE        shift and go to state 36
    MONTH           shift and go to state 37
    MONTHNAME       shift and go to state 32
    SUBDATE         shift and go to state 22
    YEAR            shift and go to state 17

    date_exp                       shift and go to state 94
    date_function                  shift and go to state 45

state 56

    (12) condition -> NOT OPENPAR . string_cond CLOSEPAR
    (13) condition -> NOT OPENPAR . num_cond CLOSEPAR
    (14) condition -> NOT OPENPAR . date_cond CLOSEPAR
    (15) string_cond -> . string_exp LIKE string_exp
    (16) string_cond -> . string_exp NOT LIKE string_exp
    (17) string_cond -> . STRCMP OPENPAR string_exp COMMA string_exp CLOSEPAR
    (19) num_cond -> . num_exp comparison_op num_exp
    (20) num_cond -> . num_exp BETWEEN num_exp AND num_exp
    (21) num_cond -> . num_exp NOT NULL
    (22) num_cond -> . num_exp IS NULL
    (36) date_cond -> . date_exp comparison_op date_exp
    (37) date_cond -> . date_exp
    (18) string_exp -> . STRING_LIT
    (23) num_exp -> . num_exp ADD num_factor
    (24) num_exp -> . num_exp SUBTRACT num_factor
    (25) num_exp -> . num_factor
    (38) date_exp -> . date_function
    (39) date_exp -> . DATE_LIT
    (26) num_factor -> . num_factor MULTIPLY num_term
    (27) num_factor -> . num_factor DIVIDE num_term
    (28) num_factor -> . num_factor DIVIDE_INT num_term
    (29) num_factor -> . num_factor MODULO num_term
    (30) num_factor -> . num_term
    (40) date_function -> . ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR
    (41) date_function -> . CURDATE OPENPAR CLOSEPAR
    (42) date_function -> . CURRENT_DATE OPENPAR CLOSEPAR
    (43) date_function -> . CURRENT_DATE
    (44) date_function -> . DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR
    (45) date_function -> . DAY OPENPAR date_exp CLOSEPAR
    (46) date_function -> . DAYNAME OPENPAR date_exp CLOSEPAR
    (47) date_function -> . DAYOFMONTH OPENPAR date_exp CLOSEPAR
    (48) date_function -> . DAYOFWEEK OPENPAR date_exp CLOSEPAR
    (49) date_function -> . DAYOFYEAR OPENPAR date_exp CLOSEPAR
    (50) date_function -> . LAST_DAY OPENPAR date_exp CLOSEPAR
    (51) date_function -> . MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR
    (52) date_function -> . MONTH OPENPAR date_exp CLOSEPAR
    (53) date_function -> . MONTHNAME OPENPAR date_exp CLOSEPAR
    (54) date_function -> . SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR
    (55) date_function -> . YEAR OPENPAR date_exp CLOSEPAR
    (31) num_term -> . OPENPAR num_val CLOSEPAR
    (32) num_term -> . num_val
    (33) num_val -> . INT_LIT
    (34) num_val -> . DOUBLE_LIT
    (35) num_val -> . COLUMN_NAME

    STRCMP          shift and go to state 26
    STRING_LIT      shift and go to state 34
    DATE_LIT        shift and go to state 41
    ADDDATE         shift and go to state 48
    CURDATE         shift and go to state 39
    CURRENT_DATE    shift and go to state 49
    DATEDIFF        shift and go to state 23
    DAY             shift and go to state 30
    DAYNAME         shift and go to state 33
    DAYOFMONTH      shift and go to state 18
    DAYOFWEEK       shift and go to state 47
    DAYOFYEAR       shift and go to state 42
    LAST_DAY        shift and go to state 28
    MAKEDATE        shift and go to state 36
    MONTH           shift and go to state 37
    MONTHNAME       shift and go to state 32
    SUBDATE         shift and go to state 22
    YEAR            shift and go to state 17
    OPENPAR         shift and go to state 43
    INT_LIT         shift and go to state 20
    DOUBLE_LIT      shift and go to state 31
    COLUMN_NAME     shift and go to state 38

    num_factor                     shift and go to state 16
    string_exp                     shift and go to state 27
    string_cond                    shift and go to state 95
    num_val                        shift and go to state 46
    num_exp                        shift and go to state 29
    num_cond                       shift and go to state 97
    num_term                       shift and go to state 35
    date_exp                       shift and go to state 25
    date_function                  shift and go to state 45
    date_cond                      shift and go to state 96

state 57

    (54) date_function -> SUBDATE OPENPAR . date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR
    (38) date_exp -> . date_function
    (39) date_exp -> . DATE_LIT
    (40) date_function -> . ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR
    (41) date_function -> . CURDATE OPENPAR CLOSEPAR
    (42) date_function -> . CURRENT_DATE OPENPAR CLOSEPAR
    (43) date_function -> . CURRENT_DATE
    (44) date_function -> . DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR
    (45) date_function -> . DAY OPENPAR date_exp CLOSEPAR
    (46) date_function -> . DAYNAME OPENPAR date_exp CLOSEPAR
    (47) date_function -> . DAYOFMONTH OPENPAR date_exp CLOSEPAR
    (48) date_function -> . DAYOFWEEK OPENPAR date_exp CLOSEPAR
    (49) date_function -> . DAYOFYEAR OPENPAR date_exp CLOSEPAR
    (50) date_function -> . LAST_DAY OPENPAR date_exp CLOSEPAR
    (51) date_function -> . MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR
    (52) date_function -> . MONTH OPENPAR date_exp CLOSEPAR
    (53) date_function -> . MONTHNAME OPENPAR date_exp CLOSEPAR
    (54) date_function -> . SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR
    (55) date_function -> . YEAR OPENPAR date_exp CLOSEPAR

    DATE_LIT        shift and go to state 41
    ADDDATE         shift and go to state 48
    CURDATE         shift and go to state 39
    CURRENT_DATE    shift and go to state 49
    DATEDIFF        shift and go to state 23
    DAY             shift and go to state 30
    DAYNAME         shift and go to state 33
    DAYOFMONTH      shift and go to state 18
    DAYOFWEEK       shift and go to state 47
    DAYOFYEAR       shift and go to state 42
    LAST_DAY        shift and go to state 28
    MAKEDATE        shift and go to state 36
    MONTH           shift and go to state 37
    MONTHNAME       shift and go to state 32
    SUBDATE         shift and go to state 22
    YEAR            shift and go to state 17

    date_exp                       shift and go to state 98
    date_function                  shift and go to state 45

state 58

    (44) date_function -> DATEDIFF OPENPAR . date_exp COMMA date_exp CLOSEPAR
    (38) date_exp -> . date_function
    (39) date_exp -> . DATE_LIT
    (40) date_function -> . ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR
    (41) date_function -> . CURDATE OPENPAR CLOSEPAR
    (42) date_function -> . CURRENT_DATE OPENPAR CLOSEPAR
    (43) date_function -> . CURRENT_DATE
    (44) date_function -> . DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR
    (45) date_function -> . DAY OPENPAR date_exp CLOSEPAR
    (46) date_function -> . DAYNAME OPENPAR date_exp CLOSEPAR
    (47) date_function -> . DAYOFMONTH OPENPAR date_exp CLOSEPAR
    (48) date_function -> . DAYOFWEEK OPENPAR date_exp CLOSEPAR
    (49) date_function -> . DAYOFYEAR OPENPAR date_exp CLOSEPAR
    (50) date_function -> . LAST_DAY OPENPAR date_exp CLOSEPAR
    (51) date_function -> . MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR
    (52) date_function -> . MONTH OPENPAR date_exp CLOSEPAR
    (53) date_function -> . MONTHNAME OPENPAR date_exp CLOSEPAR
    (54) date_function -> . SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR
    (55) date_function -> . YEAR OPENPAR date_exp CLOSEPAR

    DATE_LIT        shift and go to state 41
    ADDDATE         shift and go to state 48
    CURDATE         shift and go to state 39
    CURRENT_DATE    shift and go to state 49
    DATEDIFF        shift and go to state 23
    DAY             shift and go to state 30
    DAYNAME         shift and go to state 33
    DAYOFMONTH      shift and go to state 18
    DAYOFWEEK       shift and go to state 47
    DAYOFYEAR       shift and go to state 42
    LAST_DAY        shift and go to state 28
    MAKEDATE        shift and go to state 36
    MONTH           shift and go to state 37
    MONTHNAME       shift and go to state 32
    SUBDATE         shift and go to state 22
    YEAR            shift and go to state 17

    date_exp                       shift and go to state 99
    date_function                  shift and go to state 45

state 59

    (56) comparison_op -> GE .

    DATE_LIT        reduce using rule 56 (comparison_op -> GE .)
    ADDDATE         reduce using rule 56 (comparison_op -> GE .)
    CURDATE         reduce using rule 56 (comparison_op -> GE .)
    CURRENT_DATE    reduce using rule 56 (comparison_op -> GE .)
    DATEDIFF        reduce using rule 56 (comparison_op -> GE .)
    DAY             reduce using rule 56 (comparison_op -> GE .)
    DAYNAME         reduce using rule 56 (comparison_op -> GE .)
    DAYOFMONTH      reduce using rule 56 (comparison_op -> GE .)
    DAYOFWEEK       reduce using rule 56 (comparison_op -> GE .)
    DAYOFYEAR       reduce using rule 56 (comparison_op -> GE .)
    LAST_DAY        reduce using rule 56 (comparison_op -> GE .)
    MAKEDATE        reduce using rule 56 (comparison_op -> GE .)
    MONTH           reduce using rule 56 (comparison_op -> GE .)
    MONTHNAME       reduce using rule 56 (comparison_op -> GE .)
    SUBDATE         reduce using rule 56 (comparison_op -> GE .)
    YEAR            reduce using rule 56 (comparison_op -> GE .)
    OPENPAR         reduce using rule 56 (comparison_op -> GE .)
    INT_LIT         reduce using rule 56 (comparison_op -> GE .)
    DOUBLE_LIT      reduce using rule 56 (comparison_op -> GE .)
    COLUMN_NAME     reduce using rule 56 (comparison_op -> GE .)


state 60

    (62) comparison_op -> EQUAL_NULL .

    DATE_LIT        reduce using rule 62 (comparison_op -> EQUAL_NULL .)
    ADDDATE         reduce using rule 62 (comparison_op -> EQUAL_NULL .)
    CURDATE         reduce using rule 62 (comparison_op -> EQUAL_NULL .)
    CURRENT_DATE    reduce using rule 62 (comparison_op -> EQUAL_NULL .)
    DATEDIFF        reduce using rule 62 (comparison_op -> EQUAL_NULL .)
    DAY             reduce using rule 62 (comparison_op -> EQUAL_NULL .)
    DAYNAME         reduce using rule 62 (comparison_op -> EQUAL_NULL .)
    DAYOFMONTH      reduce using rule 62 (comparison_op -> EQUAL_NULL .)
    DAYOFWEEK       reduce using rule 62 (comparison_op -> EQUAL_NULL .)
    DAYOFYEAR       reduce using rule 62 (comparison_op -> EQUAL_NULL .)
    LAST_DAY        reduce using rule 62 (comparison_op -> EQUAL_NULL .)
    MAKEDATE        reduce using rule 62 (comparison_op -> EQUAL_NULL .)
    MONTH           reduce using rule 62 (comparison_op -> EQUAL_NULL .)
    MONTHNAME       reduce using rule 62 (comparison_op -> EQUAL_NULL .)
    SUBDATE         reduce using rule 62 (comparison_op -> EQUAL_NULL .)
    YEAR            reduce using rule 62 (comparison_op -> EQUAL_NULL .)
    OPENPAR         reduce using rule 62 (comparison_op -> EQUAL_NULL .)
    INT_LIT         reduce using rule 62 (comparison_op -> EQUAL_NULL .)
    DOUBLE_LIT      reduce using rule 62 (comparison_op -> EQUAL_NULL .)
    COLUMN_NAME     reduce using rule 62 (comparison_op -> EQUAL_NULL .)


state 61

    (36) date_cond -> date_exp comparison_op . date_exp
    (38) date_exp -> . date_function
    (39) date_exp -> . DATE_LIT
    (40) date_function -> . ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR
    (41) date_function -> . CURDATE OPENPAR CLOSEPAR
    (42) date_function -> . CURRENT_DATE OPENPAR CLOSEPAR
    (43) date_function -> . CURRENT_DATE
    (44) date_function -> . DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR
    (45) date_function -> . DAY OPENPAR date_exp CLOSEPAR
    (46) date_function -> . DAYNAME OPENPAR date_exp CLOSEPAR
    (47) date_function -> . DAYOFMONTH OPENPAR date_exp CLOSEPAR
    (48) date_function -> . DAYOFWEEK OPENPAR date_exp CLOSEPAR
    (49) date_function -> . DAYOFYEAR OPENPAR date_exp CLOSEPAR
    (50) date_function -> . LAST_DAY OPENPAR date_exp CLOSEPAR
    (51) date_function -> . MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR
    (52) date_function -> . MONTH OPENPAR date_exp CLOSEPAR
    (53) date_function -> . MONTHNAME OPENPAR date_exp CLOSEPAR
    (54) date_function -> . SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR
    (55) date_function -> . YEAR OPENPAR date_exp CLOSEPAR

    DATE_LIT        shift and go to state 41
    ADDDATE         shift and go to state 48
    CURDATE         shift and go to state 39
    CURRENT_DATE    shift and go to state 49
    DATEDIFF        shift and go to state 23
    DAY             shift and go to state 30
    DAYNAME         shift and go to state 33
    DAYOFMONTH      shift and go to state 18
    DAYOFWEEK       shift and go to state 47
    DAYOFYEAR       shift and go to state 42
    LAST_DAY        shift and go to state 28
    MAKEDATE        shift and go to state 36
    MONTH           shift and go to state 37
    MONTHNAME       shift and go to state 32
    SUBDATE         shift and go to state 22
    YEAR            shift and go to state 17

    date_exp                       shift and go to state 100
    date_function                  shift and go to state 45

state 62

    (57) comparison_op -> GT .

    DATE_LIT        reduce using rule 57 (comparison_op -> GT .)
    ADDDATE         reduce using rule 57 (comparison_op -> GT .)
    CURDATE         reduce using rule 57 (comparison_op -> GT .)
    CURRENT_DATE    reduce using rule 57 (comparison_op -> GT .)
    DATEDIFF        reduce using rule 57 (comparison_op -> GT .)
    DAY             reduce using rule 57 (comparison_op -> GT .)
    DAYNAME         reduce using rule 57 (comparison_op -> GT .)
    DAYOFMONTH      reduce using rule 57 (comparison_op -> GT .)
    DAYOFWEEK       reduce using rule 57 (comparison_op -> GT .)
    DAYOFYEAR       reduce using rule 57 (comparison_op -> GT .)
    LAST_DAY        reduce using rule 57 (comparison_op -> GT .)
    MAKEDATE        reduce using rule 57 (comparison_op -> GT .)
    MONTH           reduce using rule 57 (comparison_op -> GT .)
    MONTHNAME       reduce using rule 57 (comparison_op -> GT .)
    SUBDATE         reduce using rule 57 (comparison_op -> GT .)
    YEAR            reduce using rule 57 (comparison_op -> GT .)
    OPENPAR         reduce using rule 57 (comparison_op -> GT .)
    INT_LIT         reduce using rule 57 (comparison_op -> GT .)
    DOUBLE_LIT      reduce using rule 57 (comparison_op -> GT .)
    COLUMN_NAME     reduce using rule 57 (comparison_op -> GT .)


state 63

    (60) comparison_op -> NE .

    DATE_LIT        reduce using rule 60 (comparison_op -> NE .)
    ADDDATE         reduce using rule 60 (comparison_op -> NE .)
    CURDATE         reduce using rule 60 (comparison_op -> NE .)
    CURRENT_DATE    reduce using rule 60 (comparison_op -> NE .)
    DATEDIFF        reduce using rule 60 (comparison_op -> NE .)
    DAY             reduce using rule 60 (comparison_op -> NE .)
    DAYNAME         reduce using rule 60 (comparison_op -> NE .)
    DAYOFMONTH      reduce using rule 60 (comparison_op -> NE .)
    DAYOFWEEK       reduce using rule 60 (comparison_op -> NE .)
    DAYOFYEAR       reduce using rule 60 (comparison_op -> NE .)
    LAST_DAY        reduce using rule 60 (comparison_op -> NE .)
    MAKEDATE        reduce using rule 60 (comparison_op -> NE .)
    MONTH           reduce using rule 60 (comparison_op -> NE .)
    MONTHNAME       reduce using rule 60 (comparison_op -> NE .)
    SUBDATE         reduce using rule 60 (comparison_op -> NE .)
    YEAR            reduce using rule 60 (comparison_op -> NE .)
    OPENPAR         reduce using rule 60 (comparison_op -> NE .)
    INT_LIT         reduce using rule 60 (comparison_op -> NE .)
    DOUBLE_LIT      reduce using rule 60 (comparison_op -> NE .)
    COLUMN_NAME     reduce using rule 60 (comparison_op -> NE .)


state 64

    (58) comparison_op -> LE .

    DATE_LIT        reduce using rule 58 (comparison_op -> LE .)
    ADDDATE         reduce using rule 58 (comparison_op -> LE .)
    CURDATE         reduce using rule 58 (comparison_op -> LE .)
    CURRENT_DATE    reduce using rule 58 (comparison_op -> LE .)
    DATEDIFF        reduce using rule 58 (comparison_op -> LE .)
    DAY             reduce using rule 58 (comparison_op -> LE .)
    DAYNAME         reduce using rule 58 (comparison_op -> LE .)
    DAYOFMONTH      reduce using rule 58 (comparison_op -> LE .)
    DAYOFWEEK       reduce using rule 58 (comparison_op -> LE .)
    DAYOFYEAR       reduce using rule 58 (comparison_op -> LE .)
    LAST_DAY        reduce using rule 58 (comparison_op -> LE .)
    MAKEDATE        reduce using rule 58 (comparison_op -> LE .)
    MONTH           reduce using rule 58 (comparison_op -> LE .)
    MONTHNAME       reduce using rule 58 (comparison_op -> LE .)
    SUBDATE         reduce using rule 58 (comparison_op -> LE .)
    YEAR            reduce using rule 58 (comparison_op -> LE .)
    OPENPAR         reduce using rule 58 (comparison_op -> LE .)
    INT_LIT         reduce using rule 58 (comparison_op -> LE .)
    DOUBLE_LIT      reduce using rule 58 (comparison_op -> LE .)
    COLUMN_NAME     reduce using rule 58 (comparison_op -> LE .)


state 65

    (59) comparison_op -> LT .

    DATE_LIT        reduce using rule 59 (comparison_op -> LT .)
    ADDDATE         reduce using rule 59 (comparison_op -> LT .)
    CURDATE         reduce using rule 59 (comparison_op -> LT .)
    CURRENT_DATE    reduce using rule 59 (comparison_op -> LT .)
    DATEDIFF        reduce using rule 59 (comparison_op -> LT .)
    DAY             reduce using rule 59 (comparison_op -> LT .)
    DAYNAME         reduce using rule 59 (comparison_op -> LT .)
    DAYOFMONTH      reduce using rule 59 (comparison_op -> LT .)
    DAYOFWEEK       reduce using rule 59 (comparison_op -> LT .)
    DAYOFYEAR       reduce using rule 59 (comparison_op -> LT .)
    LAST_DAY        reduce using rule 59 (comparison_op -> LT .)
    MAKEDATE        reduce using rule 59 (comparison_op -> LT .)
    MONTH           reduce using rule 59 (comparison_op -> LT .)
    MONTHNAME       reduce using rule 59 (comparison_op -> LT .)
    SUBDATE         reduce using rule 59 (comparison_op -> LT .)
    YEAR            reduce using rule 59 (comparison_op -> LT .)
    OPENPAR         reduce using rule 59 (comparison_op -> LT .)
    INT_LIT         reduce using rule 59 (comparison_op -> LT .)
    DOUBLE_LIT      reduce using rule 59 (comparison_op -> LT .)
    COLUMN_NAME     reduce using rule 59 (comparison_op -> LT .)


state 66

    (61) comparison_op -> EQUAL .

    DATE_LIT        reduce using rule 61 (comparison_op -> EQUAL .)
    ADDDATE         reduce using rule 61 (comparison_op -> EQUAL .)
    CURDATE         reduce using rule 61 (comparison_op -> EQUAL .)
    CURRENT_DATE    reduce using rule 61 (comparison_op -> EQUAL .)
    DATEDIFF        reduce using rule 61 (comparison_op -> EQUAL .)
    DAY             reduce using rule 61 (comparison_op -> EQUAL .)
    DAYNAME         reduce using rule 61 (comparison_op -> EQUAL .)
    DAYOFMONTH      reduce using rule 61 (comparison_op -> EQUAL .)
    DAYOFWEEK       reduce using rule 61 (comparison_op -> EQUAL .)
    DAYOFYEAR       reduce using rule 61 (comparison_op -> EQUAL .)
    LAST_DAY        reduce using rule 61 (comparison_op -> EQUAL .)
    MAKEDATE        reduce using rule 61 (comparison_op -> EQUAL .)
    MONTH           reduce using rule 61 (comparison_op -> EQUAL .)
    MONTHNAME       reduce using rule 61 (comparison_op -> EQUAL .)
    SUBDATE         reduce using rule 61 (comparison_op -> EQUAL .)
    YEAR            reduce using rule 61 (comparison_op -> EQUAL .)
    OPENPAR         reduce using rule 61 (comparison_op -> EQUAL .)
    INT_LIT         reduce using rule 61 (comparison_op -> EQUAL .)
    DOUBLE_LIT      reduce using rule 61 (comparison_op -> EQUAL .)
    COLUMN_NAME     reduce using rule 61 (comparison_op -> EQUAL .)


state 67

    (17) string_cond -> STRCMP OPENPAR . string_exp COMMA string_exp CLOSEPAR
    (18) string_exp -> . STRING_LIT

    STRING_LIT      shift and go to state 34

    string_exp                     shift and go to state 101

state 68

    (15) string_cond -> string_exp LIKE . string_exp
    (18) string_exp -> . STRING_LIT

    STRING_LIT      shift and go to state 34

    string_exp                     shift and go to state 102

state 69

    (16) string_cond -> string_exp NOT . LIKE string_exp

    LIKE            shift and go to state 103


state 70

    (50) date_function -> LAST_DAY OPENPAR . date_exp CLOSEPAR
    (38) date_exp -> . date_function
    (39) date_exp -> . DATE_LIT
    (40) date_function -> . ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR
    (41) date_function -> . CURDATE OPENPAR CLOSEPAR
    (42) date_function -> . CURRENT_DATE OPENPAR CLOSEPAR
    (43) date_function -> . CURRENT_DATE
    (44) date_function -> . DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR
    (45) date_function -> . DAY OPENPAR date_exp CLOSEPAR
    (46) date_function -> . DAYNAME OPENPAR date_exp CLOSEPAR
    (47) date_function -> . DAYOFMONTH OPENPAR date_exp CLOSEPAR
    (48) date_function -> . DAYOFWEEK OPENPAR date_exp CLOSEPAR
    (49) date_function -> . DAYOFYEAR OPENPAR date_exp CLOSEPAR
    (50) date_function -> . LAST_DAY OPENPAR date_exp CLOSEPAR
    (51) date_function -> . MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR
    (52) date_function -> . MONTH OPENPAR date_exp CLOSEPAR
    (53) date_function -> . MONTHNAME OPENPAR date_exp CLOSEPAR
    (54) date_function -> . SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR
    (55) date_function -> . YEAR OPENPAR date_exp CLOSEPAR

    DATE_LIT        shift and go to state 41
    ADDDATE         shift and go to state 48
    CURDATE         shift and go to state 39
    CURRENT_DATE    shift and go to state 49
    DATEDIFF        shift and go to state 23
    DAY             shift and go to state 30
    DAYNAME         shift and go to state 33
    DAYOFMONTH      shift and go to state 18
    DAYOFWEEK       shift and go to state 47
    DAYOFYEAR       shift and go to state 42
    LAST_DAY        shift and go to state 28
    MAKEDATE        shift and go to state 36
    MONTH           shift and go to state 37
    MONTHNAME       shift and go to state 32
    SUBDATE         shift and go to state 22
    YEAR            shift and go to state 17

    date_exp                       shift and go to state 104
    date_function                  shift and go to state 45

state 71

    (19) num_cond -> num_exp comparison_op . num_exp
    (23) num_exp -> . num_exp ADD num_factor
    (24) num_exp -> . num_exp SUBTRACT num_factor
    (25) num_exp -> . num_factor
    (26) num_factor -> . num_factor MULTIPLY num_term
    (27) num_factor -> . num_factor DIVIDE num_term
    (28) num_factor -> . num_factor DIVIDE_INT num_term
    (29) num_factor -> . num_factor MODULO num_term
    (30) num_factor -> . num_term
    (31) num_term -> . OPENPAR num_val CLOSEPAR
    (32) num_term -> . num_val
    (33) num_val -> . INT_LIT
    (34) num_val -> . DOUBLE_LIT
    (35) num_val -> . COLUMN_NAME

    OPENPAR         shift and go to state 43
    INT_LIT         shift and go to state 20
    DOUBLE_LIT      shift and go to state 31
    COLUMN_NAME     shift and go to state 38

    num_factor                     shift and go to state 16
    num_val                        shift and go to state 46
    num_term                       shift and go to state 35
    num_exp                        shift and go to state 105

state 72

    (21) num_cond -> num_exp NOT . NULL

    NULL            shift and go to state 106


state 73

    (22) num_cond -> num_exp IS . NULL

    NULL            shift and go to state 107


state 74

    (20) num_cond -> num_exp BETWEEN . num_exp AND num_exp
    (23) num_exp -> . num_exp ADD num_factor
    (24) num_exp -> . num_exp SUBTRACT num_factor
    (25) num_exp -> . num_factor
    (26) num_factor -> . num_factor MULTIPLY num_term
    (27) num_factor -> . num_factor DIVIDE num_term
    (28) num_factor -> . num_factor DIVIDE_INT num_term
    (29) num_factor -> . num_factor MODULO num_term
    (30) num_factor -> . num_term
    (31) num_term -> . OPENPAR num_val CLOSEPAR
    (32) num_term -> . num_val
    (33) num_val -> . INT_LIT
    (34) num_val -> . DOUBLE_LIT
    (35) num_val -> . COLUMN_NAME

    OPENPAR         shift and go to state 43
    INT_LIT         shift and go to state 20
    DOUBLE_LIT      shift and go to state 31
    COLUMN_NAME     shift and go to state 38

    num_factor                     shift and go to state 16
    num_val                        shift and go to state 46
    num_term                       shift and go to state 35
    num_exp                        shift and go to state 108

state 75

    (24) num_exp -> num_exp SUBTRACT . num_factor
    (26) num_factor -> . num_factor MULTIPLY num_term
    (27) num_factor -> . num_factor DIVIDE num_term
    (28) num_factor -> . num_factor DIVIDE_INT num_term
    (29) num_factor -> . num_factor MODULO num_term
    (30) num_factor -> . num_term
    (31) num_term -> . OPENPAR num_val CLOSEPAR
    (32) num_term -> . num_val
    (33) num_val -> . INT_LIT
    (34) num_val -> . DOUBLE_LIT
    (35) num_val -> . COLUMN_NAME

    OPENPAR         shift and go to state 43
    INT_LIT         shift and go to state 20
    DOUBLE_LIT      shift and go to state 31
    COLUMN_NAME     shift and go to state 38

    num_factor                     shift and go to state 109
    num_val                        shift and go to state 46
    num_term                       shift and go to state 35

state 76

    (23) num_exp -> num_exp ADD . num_factor
    (26) num_factor -> . num_factor MULTIPLY num_term
    (27) num_factor -> . num_factor DIVIDE num_term
    (28) num_factor -> . num_factor DIVIDE_INT num_term
    (29) num_factor -> . num_factor MODULO num_term
    (30) num_factor -> . num_term
    (31) num_term -> . OPENPAR num_val CLOSEPAR
    (32) num_term -> . num_val
    (33) num_val -> . INT_LIT
    (34) num_val -> . DOUBLE_LIT
    (35) num_val -> . COLUMN_NAME

    OPENPAR         shift and go to state 43
    INT_LIT         shift and go to state 20
    DOUBLE_LIT      shift and go to state 31
    COLUMN_NAME     shift and go to state 38

    num_factor                     shift and go to state 110
    num_val                        shift and go to state 46
    num_term                       shift and go to state 35

state 77

    (45) date_function -> DAY OPENPAR . date_exp CLOSEPAR
    (38) date_exp -> . date_function
    (39) date_exp -> . DATE_LIT
    (40) date_function -> . ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR
    (41) date_function -> . CURDATE OPENPAR CLOSEPAR
    (42) date_function -> . CURRENT_DATE OPENPAR CLOSEPAR
    (43) date_function -> . CURRENT_DATE
    (44) date_function -> . DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR
    (45) date_function -> . DAY OPENPAR date_exp CLOSEPAR
    (46) date_function -> . DAYNAME OPENPAR date_exp CLOSEPAR
    (47) date_function -> . DAYOFMONTH OPENPAR date_exp CLOSEPAR
    (48) date_function -> . DAYOFWEEK OPENPAR date_exp CLOSEPAR
    (49) date_function -> . DAYOFYEAR OPENPAR date_exp CLOSEPAR
    (50) date_function -> . LAST_DAY OPENPAR date_exp CLOSEPAR
    (51) date_function -> . MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR
    (52) date_function -> . MONTH OPENPAR date_exp CLOSEPAR
    (53) date_function -> . MONTHNAME OPENPAR date_exp CLOSEPAR
    (54) date_function -> . SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR
    (55) date_function -> . YEAR OPENPAR date_exp CLOSEPAR

    DATE_LIT        shift and go to state 41
    ADDDATE         shift and go to state 48
    CURDATE         shift and go to state 39
    CURRENT_DATE    shift and go to state 49
    DATEDIFF        shift and go to state 23
    DAY             shift and go to state 30
    DAYNAME         shift and go to state 33
    DAYOFMONTH      shift and go to state 18
    DAYOFWEEK       shift and go to state 47
    DAYOFYEAR       shift and go to state 42
    LAST_DAY        shift and go to state 28
    MAKEDATE        shift and go to state 36
    MONTH           shift and go to state 37
    MONTHNAME       shift and go to state 32
    SUBDATE         shift and go to state 22
    YEAR            shift and go to state 17

    date_exp                       shift and go to state 111
    date_function                  shift and go to state 45

state 78

    (53) date_function -> MONTHNAME OPENPAR . date_exp CLOSEPAR
    (38) date_exp -> . date_function
    (39) date_exp -> . DATE_LIT
    (40) date_function -> . ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR
    (41) date_function -> . CURDATE OPENPAR CLOSEPAR
    (42) date_function -> . CURRENT_DATE OPENPAR CLOSEPAR
    (43) date_function -> . CURRENT_DATE
    (44) date_function -> . DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR
    (45) date_function -> . DAY OPENPAR date_exp CLOSEPAR
    (46) date_function -> . DAYNAME OPENPAR date_exp CLOSEPAR
    (47) date_function -> . DAYOFMONTH OPENPAR date_exp CLOSEPAR
    (48) date_function -> . DAYOFWEEK OPENPAR date_exp CLOSEPAR
    (49) date_function -> . DAYOFYEAR OPENPAR date_exp CLOSEPAR
    (50) date_function -> . LAST_DAY OPENPAR date_exp CLOSEPAR
    (51) date_function -> . MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR
    (52) date_function -> . MONTH OPENPAR date_exp CLOSEPAR
    (53) date_function -> . MONTHNAME OPENPAR date_exp CLOSEPAR
    (54) date_function -> . SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR
    (55) date_function -> . YEAR OPENPAR date_exp CLOSEPAR

    DATE_LIT        shift and go to state 41
    ADDDATE         shift and go to state 48
    CURDATE         shift and go to state 39
    CURRENT_DATE    shift and go to state 49
    DATEDIFF        shift and go to state 23
    DAY             shift and go to state 30
    DAYNAME         shift and go to state 33
    DAYOFMONTH      shift and go to state 18
    DAYOFWEEK       shift and go to state 47
    DAYOFYEAR       shift and go to state 42
    LAST_DAY        shift and go to state 28
    MAKEDATE        shift and go to state 36
    MONTH           shift and go to state 37
    MONTHNAME       shift and go to state 32
    SUBDATE         shift and go to state 22
    YEAR            shift and go to state 17

    date_exp                       shift and go to state 112
    date_function                  shift and go to state 45

state 79

    (46) date_function -> DAYNAME OPENPAR . date_exp CLOSEPAR
    (38) date_exp -> . date_function
    (39) date_exp -> . DATE_LIT
    (40) date_function -> . ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR
    (41) date_function -> . CURDATE OPENPAR CLOSEPAR
    (42) date_function -> . CURRENT_DATE OPENPAR CLOSEPAR
    (43) date_function -> . CURRENT_DATE
    (44) date_function -> . DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR
    (45) date_function -> . DAY OPENPAR date_exp CLOSEPAR
    (46) date_function -> . DAYNAME OPENPAR date_exp CLOSEPAR
    (47) date_function -> . DAYOFMONTH OPENPAR date_exp CLOSEPAR
    (48) date_function -> . DAYOFWEEK OPENPAR date_exp CLOSEPAR
    (49) date_function -> . DAYOFYEAR OPENPAR date_exp CLOSEPAR
    (50) date_function -> . LAST_DAY OPENPAR date_exp CLOSEPAR
    (51) date_function -> . MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR
    (52) date_function -> . MONTH OPENPAR date_exp CLOSEPAR
    (53) date_function -> . MONTHNAME OPENPAR date_exp CLOSEPAR
    (54) date_function -> . SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR
    (55) date_function -> . YEAR OPENPAR date_exp CLOSEPAR

    DATE_LIT        shift and go to state 41
    ADDDATE         shift and go to state 48
    CURDATE         shift and go to state 39
    CURRENT_DATE    shift and go to state 49
    DATEDIFF        shift and go to state 23
    DAY             shift and go to state 30
    DAYNAME         shift and go to state 33
    DAYOFMONTH      shift and go to state 18
    DAYOFWEEK       shift and go to state 47
    DAYOFYEAR       shift and go to state 42
    LAST_DAY        shift and go to state 28
    MAKEDATE        shift and go to state 36
    MONTH           shift and go to state 37
    MONTHNAME       shift and go to state 32
    SUBDATE         shift and go to state 22
    YEAR            shift and go to state 17

    date_exp                       shift and go to state 113
    date_function                  shift and go to state 45

state 80

    (51) date_function -> MAKEDATE OPENPAR . num_exp COMMA num_exp CLOSEPAR
    (23) num_exp -> . num_exp ADD num_factor
    (24) num_exp -> . num_exp SUBTRACT num_factor
    (25) num_exp -> . num_factor
    (26) num_factor -> . num_factor MULTIPLY num_term
    (27) num_factor -> . num_factor DIVIDE num_term
    (28) num_factor -> . num_factor DIVIDE_INT num_term
    (29) num_factor -> . num_factor MODULO num_term
    (30) num_factor -> . num_term
    (31) num_term -> . OPENPAR num_val CLOSEPAR
    (32) num_term -> . num_val
    (33) num_val -> . INT_LIT
    (34) num_val -> . DOUBLE_LIT
    (35) num_val -> . COLUMN_NAME

    OPENPAR         shift and go to state 43
    INT_LIT         shift and go to state 20
    DOUBLE_LIT      shift and go to state 31
    COLUMN_NAME     shift and go to state 38

    num_factor                     shift and go to state 16
    num_val                        shift and go to state 46
    num_term                       shift and go to state 35
    num_exp                        shift and go to state 114

state 81

    (52) date_function -> MONTH OPENPAR . date_exp CLOSEPAR
    (38) date_exp -> . date_function
    (39) date_exp -> . DATE_LIT
    (40) date_function -> . ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR
    (41) date_function -> . CURDATE OPENPAR CLOSEPAR
    (42) date_function -> . CURRENT_DATE OPENPAR CLOSEPAR
    (43) date_function -> . CURRENT_DATE
    (44) date_function -> . DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR
    (45) date_function -> . DAY OPENPAR date_exp CLOSEPAR
    (46) date_function -> . DAYNAME OPENPAR date_exp CLOSEPAR
    (47) date_function -> . DAYOFMONTH OPENPAR date_exp CLOSEPAR
    (48) date_function -> . DAYOFWEEK OPENPAR date_exp CLOSEPAR
    (49) date_function -> . DAYOFYEAR OPENPAR date_exp CLOSEPAR
    (50) date_function -> . LAST_DAY OPENPAR date_exp CLOSEPAR
    (51) date_function -> . MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR
    (52) date_function -> . MONTH OPENPAR date_exp CLOSEPAR
    (53) date_function -> . MONTHNAME OPENPAR date_exp CLOSEPAR
    (54) date_function -> . SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR
    (55) date_function -> . YEAR OPENPAR date_exp CLOSEPAR

    DATE_LIT        shift and go to state 41
    ADDDATE         shift and go to state 48
    CURDATE         shift and go to state 39
    CURRENT_DATE    shift and go to state 49
    DATEDIFF        shift and go to state 23
    DAY             shift and go to state 30
    DAYNAME         shift and go to state 33
    DAYOFMONTH      shift and go to state 18
    DAYOFWEEK       shift and go to state 47
    DAYOFYEAR       shift and go to state 42
    LAST_DAY        shift and go to state 28
    MAKEDATE        shift and go to state 36
    MONTH           shift and go to state 37
    MONTHNAME       shift and go to state 32
    SUBDATE         shift and go to state 22
    YEAR            shift and go to state 17

    date_exp                       shift and go to state 115
    date_function                  shift and go to state 45

state 82

    (41) date_function -> CURDATE OPENPAR . CLOSEPAR

    CLOSEPAR        shift and go to state 116


state 83

    (49) date_function -> DAYOFYEAR OPENPAR . date_exp CLOSEPAR
    (38) date_exp -> . date_function
    (39) date_exp -> . DATE_LIT
    (40) date_function -> . ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR
    (41) date_function -> . CURDATE OPENPAR CLOSEPAR
    (42) date_function -> . CURRENT_DATE OPENPAR CLOSEPAR
    (43) date_function -> . CURRENT_DATE
    (44) date_function -> . DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR
    (45) date_function -> . DAY OPENPAR date_exp CLOSEPAR
    (46) date_function -> . DAYNAME OPENPAR date_exp CLOSEPAR
    (47) date_function -> . DAYOFMONTH OPENPAR date_exp CLOSEPAR
    (48) date_function -> . DAYOFWEEK OPENPAR date_exp CLOSEPAR
    (49) date_function -> . DAYOFYEAR OPENPAR date_exp CLOSEPAR
    (50) date_function -> . LAST_DAY OPENPAR date_exp CLOSEPAR
    (51) date_function -> . MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR
    (52) date_function -> . MONTH OPENPAR date_exp CLOSEPAR
    (53) date_function -> . MONTHNAME OPENPAR date_exp CLOSEPAR
    (54) date_function -> . SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR
    (55) date_function -> . YEAR OPENPAR date_exp CLOSEPAR

    DATE_LIT        shift and go to state 41
    ADDDATE         shift and go to state 48
    CURDATE         shift and go to state 39
    CURRENT_DATE    shift and go to state 49
    DATEDIFF        shift and go to state 23
    DAY             shift and go to state 30
    DAYNAME         shift and go to state 33
    DAYOFMONTH      shift and go to state 18
    DAYOFWEEK       shift and go to state 47
    DAYOFYEAR       shift and go to state 42
    LAST_DAY        shift and go to state 28
    MAKEDATE        shift and go to state 36
    MONTH           shift and go to state 37
    MONTHNAME       shift and go to state 32
    SUBDATE         shift and go to state 22
    YEAR            shift and go to state 17

    date_exp                       shift and go to state 117
    date_function                  shift and go to state 45

state 84

    (31) num_term -> OPENPAR num_val . CLOSEPAR

    CLOSEPAR        shift and go to state 118


state 85

    (2) statement -> SELECT filter_rows_op columns FROM TABLE_NAME WHERE condition SEMICOLON .

    $end            reduce using rule 2 (statement -> SELECT filter_rows_op columns FROM TABLE_NAME WHERE condition SEMICOLON .)


state 86

    (48) date_function -> DAYOFWEEK OPENPAR . date_exp CLOSEPAR
    (38) date_exp -> . date_function
    (39) date_exp -> . DATE_LIT
    (40) date_function -> . ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR
    (41) date_function -> . CURDATE OPENPAR CLOSEPAR
    (42) date_function -> . CURRENT_DATE OPENPAR CLOSEPAR
    (43) date_function -> . CURRENT_DATE
    (44) date_function -> . DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR
    (45) date_function -> . DAY OPENPAR date_exp CLOSEPAR
    (46) date_function -> . DAYNAME OPENPAR date_exp CLOSEPAR
    (47) date_function -> . DAYOFMONTH OPENPAR date_exp CLOSEPAR
    (48) date_function -> . DAYOFWEEK OPENPAR date_exp CLOSEPAR
    (49) date_function -> . DAYOFYEAR OPENPAR date_exp CLOSEPAR
    (50) date_function -> . LAST_DAY OPENPAR date_exp CLOSEPAR
    (51) date_function -> . MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR
    (52) date_function -> . MONTH OPENPAR date_exp CLOSEPAR
    (53) date_function -> . MONTHNAME OPENPAR date_exp CLOSEPAR
    (54) date_function -> . SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR
    (55) date_function -> . YEAR OPENPAR date_exp CLOSEPAR

    DATE_LIT        shift and go to state 41
    ADDDATE         shift and go to state 48
    CURDATE         shift and go to state 39
    CURRENT_DATE    shift and go to state 49
    DATEDIFF        shift and go to state 23
    DAY             shift and go to state 30
    DAYNAME         shift and go to state 33
    DAYOFMONTH      shift and go to state 18
    DAYOFWEEK       shift and go to state 47
    DAYOFYEAR       shift and go to state 42
    LAST_DAY        shift and go to state 28
    MAKEDATE        shift and go to state 36
    MONTH           shift and go to state 37
    MONTHNAME       shift and go to state 32
    SUBDATE         shift and go to state 22
    YEAR            shift and go to state 17

    date_exp                       shift and go to state 119
    date_function                  shift and go to state 45

state 87

    (40) date_function -> ADDDATE OPENPAR . date_exp COMMA date_exp CLOSEPAR
    (38) date_exp -> . date_function
    (39) date_exp -> . DATE_LIT
    (40) date_function -> . ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR
    (41) date_function -> . CURDATE OPENPAR CLOSEPAR
    (42) date_function -> . CURRENT_DATE OPENPAR CLOSEPAR
    (43) date_function -> . CURRENT_DATE
    (44) date_function -> . DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR
    (45) date_function -> . DAY OPENPAR date_exp CLOSEPAR
    (46) date_function -> . DAYNAME OPENPAR date_exp CLOSEPAR
    (47) date_function -> . DAYOFMONTH OPENPAR date_exp CLOSEPAR
    (48) date_function -> . DAYOFWEEK OPENPAR date_exp CLOSEPAR
    (49) date_function -> . DAYOFYEAR OPENPAR date_exp CLOSEPAR
    (50) date_function -> . LAST_DAY OPENPAR date_exp CLOSEPAR
    (51) date_function -> . MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR
    (52) date_function -> . MONTH OPENPAR date_exp CLOSEPAR
    (53) date_function -> . MONTHNAME OPENPAR date_exp CLOSEPAR
    (54) date_function -> . SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR
    (55) date_function -> . YEAR OPENPAR date_exp CLOSEPAR

    DATE_LIT        shift and go to state 41
    ADDDATE         shift and go to state 48
    CURDATE         shift and go to state 39
    CURRENT_DATE    shift and go to state 49
    DATEDIFF        shift and go to state 23
    DAY             shift and go to state 30
    DAYNAME         shift and go to state 33
    DAYOFMONTH      shift and go to state 18
    DAYOFWEEK       shift and go to state 47
    DAYOFYEAR       shift and go to state 42
    LAST_DAY        shift and go to state 28
    MAKEDATE        shift and go to state 36
    MONTH           shift and go to state 37
    MONTHNAME       shift and go to state 32
    SUBDATE         shift and go to state 22
    YEAR            shift and go to state 17

    date_exp                       shift and go to state 120
    date_function                  shift and go to state 45

state 88

    (42) date_function -> CURRENT_DATE OPENPAR . CLOSEPAR

    CLOSEPAR        shift and go to state 121


state 89

    (29) num_factor -> num_factor MODULO num_term .

    MULTIPLY        reduce using rule 29 (num_factor -> num_factor MODULO num_term .)
    DIVIDE          reduce using rule 29 (num_factor -> num_factor MODULO num_term .)
    DIVIDE_INT      reduce using rule 29 (num_factor -> num_factor MODULO num_term .)
    MODULO          reduce using rule 29 (num_factor -> num_factor MODULO num_term .)
    BETWEEN         reduce using rule 29 (num_factor -> num_factor MODULO num_term .)
    NOT             reduce using rule 29 (num_factor -> num_factor MODULO num_term .)
    IS              reduce using rule 29 (num_factor -> num_factor MODULO num_term .)
    ADD             reduce using rule 29 (num_factor -> num_factor MODULO num_term .)
    SUBTRACT        reduce using rule 29 (num_factor -> num_factor MODULO num_term .)
    GE              reduce using rule 29 (num_factor -> num_factor MODULO num_term .)
    GT              reduce using rule 29 (num_factor -> num_factor MODULO num_term .)
    LE              reduce using rule 29 (num_factor -> num_factor MODULO num_term .)
    LT              reduce using rule 29 (num_factor -> num_factor MODULO num_term .)
    NE              reduce using rule 29 (num_factor -> num_factor MODULO num_term .)
    EQUAL           reduce using rule 29 (num_factor -> num_factor MODULO num_term .)
    EQUAL_NULL      reduce using rule 29 (num_factor -> num_factor MODULO num_term .)
    SEMICOLON       reduce using rule 29 (num_factor -> num_factor MODULO num_term .)
    CLOSEPAR        reduce using rule 29 (num_factor -> num_factor MODULO num_term .)
    AND             reduce using rule 29 (num_factor -> num_factor MODULO num_term .)
    COMMA           reduce using rule 29 (num_factor -> num_factor MODULO num_term .)
    DATE_UNIT       reduce using rule 29 (num_factor -> num_factor MODULO num_term .)


state 90

    (27) num_factor -> num_factor DIVIDE num_term .

    MULTIPLY        reduce using rule 27 (num_factor -> num_factor DIVIDE num_term .)
    DIVIDE          reduce using rule 27 (num_factor -> num_factor DIVIDE num_term .)
    DIVIDE_INT      reduce using rule 27 (num_factor -> num_factor DIVIDE num_term .)
    MODULO          reduce using rule 27 (num_factor -> num_factor DIVIDE num_term .)
    BETWEEN         reduce using rule 27 (num_factor -> num_factor DIVIDE num_term .)
    NOT             reduce using rule 27 (num_factor -> num_factor DIVIDE num_term .)
    IS              reduce using rule 27 (num_factor -> num_factor DIVIDE num_term .)
    ADD             reduce using rule 27 (num_factor -> num_factor DIVIDE num_term .)
    SUBTRACT        reduce using rule 27 (num_factor -> num_factor DIVIDE num_term .)
    GE              reduce using rule 27 (num_factor -> num_factor DIVIDE num_term .)
    GT              reduce using rule 27 (num_factor -> num_factor DIVIDE num_term .)
    LE              reduce using rule 27 (num_factor -> num_factor DIVIDE num_term .)
    LT              reduce using rule 27 (num_factor -> num_factor DIVIDE num_term .)
    NE              reduce using rule 27 (num_factor -> num_factor DIVIDE num_term .)
    EQUAL           reduce using rule 27 (num_factor -> num_factor DIVIDE num_term .)
    EQUAL_NULL      reduce using rule 27 (num_factor -> num_factor DIVIDE num_term .)
    SEMICOLON       reduce using rule 27 (num_factor -> num_factor DIVIDE num_term .)
    CLOSEPAR        reduce using rule 27 (num_factor -> num_factor DIVIDE num_term .)
    AND             reduce using rule 27 (num_factor -> num_factor DIVIDE num_term .)
    COMMA           reduce using rule 27 (num_factor -> num_factor DIVIDE num_term .)
    DATE_UNIT       reduce using rule 27 (num_factor -> num_factor DIVIDE num_term .)


state 91

    (28) num_factor -> num_factor DIVIDE_INT num_term .

    MULTIPLY        reduce using rule 28 (num_factor -> num_factor DIVIDE_INT num_term .)
    DIVIDE          reduce using rule 28 (num_factor -> num_factor DIVIDE_INT num_term .)
    DIVIDE_INT      reduce using rule 28 (num_factor -> num_factor DIVIDE_INT num_term .)
    MODULO          reduce using rule 28 (num_factor -> num_factor DIVIDE_INT num_term .)
    BETWEEN         reduce using rule 28 (num_factor -> num_factor DIVIDE_INT num_term .)
    NOT             reduce using rule 28 (num_factor -> num_factor DIVIDE_INT num_term .)
    IS              reduce using rule 28 (num_factor -> num_factor DIVIDE_INT num_term .)
    ADD             reduce using rule 28 (num_factor -> num_factor DIVIDE_INT num_term .)
    SUBTRACT        reduce using rule 28 (num_factor -> num_factor DIVIDE_INT num_term .)
    GE              reduce using rule 28 (num_factor -> num_factor DIVIDE_INT num_term .)
    GT              reduce using rule 28 (num_factor -> num_factor DIVIDE_INT num_term .)
    LE              reduce using rule 28 (num_factor -> num_factor DIVIDE_INT num_term .)
    LT              reduce using rule 28 (num_factor -> num_factor DIVIDE_INT num_term .)
    NE              reduce using rule 28 (num_factor -> num_factor DIVIDE_INT num_term .)
    EQUAL           reduce using rule 28 (num_factor -> num_factor DIVIDE_INT num_term .)
    EQUAL_NULL      reduce using rule 28 (num_factor -> num_factor DIVIDE_INT num_term .)
    SEMICOLON       reduce using rule 28 (num_factor -> num_factor DIVIDE_INT num_term .)
    CLOSEPAR        reduce using rule 28 (num_factor -> num_factor DIVIDE_INT num_term .)
    AND             reduce using rule 28 (num_factor -> num_factor DIVIDE_INT num_term .)
    COMMA           reduce using rule 28 (num_factor -> num_factor DIVIDE_INT num_term .)
    DATE_UNIT       reduce using rule 28 (num_factor -> num_factor DIVIDE_INT num_term .)


state 92

    (26) num_factor -> num_factor MULTIPLY num_term .

    MULTIPLY        reduce using rule 26 (num_factor -> num_factor MULTIPLY num_term .)
    DIVIDE          reduce using rule 26 (num_factor -> num_factor MULTIPLY num_term .)
    DIVIDE_INT      reduce using rule 26 (num_factor -> num_factor MULTIPLY num_term .)
    MODULO          reduce using rule 26 (num_factor -> num_factor MULTIPLY num_term .)
    BETWEEN         reduce using rule 26 (num_factor -> num_factor MULTIPLY num_term .)
    NOT             reduce using rule 26 (num_factor -> num_factor MULTIPLY num_term .)
    IS              reduce using rule 26 (num_factor -> num_factor MULTIPLY num_term .)
    ADD             reduce using rule 26 (num_factor -> num_factor MULTIPLY num_term .)
    SUBTRACT        reduce using rule 26 (num_factor -> num_factor MULTIPLY num_term .)
    GE              reduce using rule 26 (num_factor -> num_factor MULTIPLY num_term .)
    GT              reduce using rule 26 (num_factor -> num_factor MULTIPLY num_term .)
    LE              reduce using rule 26 (num_factor -> num_factor MULTIPLY num_term .)
    LT              reduce using rule 26 (num_factor -> num_factor MULTIPLY num_term .)
    NE              reduce using rule 26 (num_factor -> num_factor MULTIPLY num_term .)
    EQUAL           reduce using rule 26 (num_factor -> num_factor MULTIPLY num_term .)
    EQUAL_NULL      reduce using rule 26 (num_factor -> num_factor MULTIPLY num_term .)
    SEMICOLON       reduce using rule 26 (num_factor -> num_factor MULTIPLY num_term .)
    CLOSEPAR        reduce using rule 26 (num_factor -> num_factor MULTIPLY num_term .)
    AND             reduce using rule 26 (num_factor -> num_factor MULTIPLY num_term .)
    COMMA           reduce using rule 26 (num_factor -> num_factor MULTIPLY num_term .)
    DATE_UNIT       reduce using rule 26 (num_factor -> num_factor MULTIPLY num_term .)


state 93

    (55) date_function -> YEAR OPENPAR date_exp . CLOSEPAR

    CLOSEPAR        shift and go to state 122


state 94

    (47) date_function -> DAYOFMONTH OPENPAR date_exp . CLOSEPAR

    CLOSEPAR        shift and go to state 123


state 95

    (12) condition -> NOT OPENPAR string_cond . CLOSEPAR

    CLOSEPAR        shift and go to state 124


state 96

    (14) condition -> NOT OPENPAR date_cond . CLOSEPAR

    CLOSEPAR        shift and go to state 125


state 97

    (13) condition -> NOT OPENPAR num_cond . CLOSEPAR

    CLOSEPAR        shift and go to state 126


state 98

    (54) date_function -> SUBDATE OPENPAR date_exp . COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR

    COMMA           shift and go to state 127


state 99

    (44) date_function -> DATEDIFF OPENPAR date_exp . COMMA date_exp CLOSEPAR

    COMMA           shift and go to state 128


state 100

    (36) date_cond -> date_exp comparison_op date_exp .

    CLOSEPAR        reduce using rule 36 (date_cond -> date_exp comparison_op date_exp .)
    SEMICOLON       reduce using rule 36 (date_cond -> date_exp comparison_op date_exp .)


state 101

    (17) string_cond -> STRCMP OPENPAR string_exp . COMMA string_exp CLOSEPAR

    COMMA           shift and go to state 129


state 102

    (15) string_cond -> string_exp LIKE string_exp .

    CLOSEPAR        reduce using rule 15 (string_cond -> string_exp LIKE string_exp .)
    SEMICOLON       reduce using rule 15 (string_cond -> string_exp LIKE string_exp .)


state 103

    (16) string_cond -> string_exp NOT LIKE . string_exp
    (18) string_exp -> . STRING_LIT

    STRING_LIT      shift and go to state 34

    string_exp                     shift and go to state 130

state 104

    (50) date_function -> LAST_DAY OPENPAR date_exp . CLOSEPAR

    CLOSEPAR        shift and go to state 131


state 105

    (19) num_cond -> num_exp comparison_op num_exp .
    (23) num_exp -> num_exp . ADD num_factor
    (24) num_exp -> num_exp . SUBTRACT num_factor

    CLOSEPAR        reduce using rule 19 (num_cond -> num_exp comparison_op num_exp .)
    SEMICOLON       reduce using rule 19 (num_cond -> num_exp comparison_op num_exp .)
    ADD             shift and go to state 76
    SUBTRACT        shift and go to state 75


state 106

    (21) num_cond -> num_exp NOT NULL .

    CLOSEPAR        reduce using rule 21 (num_cond -> num_exp NOT NULL .)
    SEMICOLON       reduce using rule 21 (num_cond -> num_exp NOT NULL .)


state 107

    (22) num_cond -> num_exp IS NULL .

    CLOSEPAR        reduce using rule 22 (num_cond -> num_exp IS NULL .)
    SEMICOLON       reduce using rule 22 (num_cond -> num_exp IS NULL .)


state 108

    (20) num_cond -> num_exp BETWEEN num_exp . AND num_exp
    (23) num_exp -> num_exp . ADD num_factor
    (24) num_exp -> num_exp . SUBTRACT num_factor

    AND             shift and go to state 132
    ADD             shift and go to state 76
    SUBTRACT        shift and go to state 75


state 109

    (24) num_exp -> num_exp SUBTRACT num_factor .
    (26) num_factor -> num_factor . MULTIPLY num_term
    (27) num_factor -> num_factor . DIVIDE num_term
    (28) num_factor -> num_factor . DIVIDE_INT num_term
    (29) num_factor -> num_factor . MODULO num_term

    DATE_UNIT       reduce using rule 24 (num_exp -> num_exp SUBTRACT num_factor .)
    ADD             reduce using rule 24 (num_exp -> num_exp SUBTRACT num_factor .)
    SUBTRACT        reduce using rule 24 (num_exp -> num_exp SUBTRACT num_factor .)
    AND             reduce using rule 24 (num_exp -> num_exp SUBTRACT num_factor .)
    SEMICOLON       reduce using rule 24 (num_exp -> num_exp SUBTRACT num_factor .)
    CLOSEPAR        reduce using rule 24 (num_exp -> num_exp SUBTRACT num_factor .)
    COMMA           reduce using rule 24 (num_exp -> num_exp SUBTRACT num_factor .)
    BETWEEN         reduce using rule 24 (num_exp -> num_exp SUBTRACT num_factor .)
    NOT             reduce using rule 24 (num_exp -> num_exp SUBTRACT num_factor .)
    IS              reduce using rule 24 (num_exp -> num_exp SUBTRACT num_factor .)
    GE              reduce using rule 24 (num_exp -> num_exp SUBTRACT num_factor .)
    GT              reduce using rule 24 (num_exp -> num_exp SUBTRACT num_factor .)
    LE              reduce using rule 24 (num_exp -> num_exp SUBTRACT num_factor .)
    LT              reduce using rule 24 (num_exp -> num_exp SUBTRACT num_factor .)
    NE              reduce using rule 24 (num_exp -> num_exp SUBTRACT num_factor .)
    EQUAL           reduce using rule 24 (num_exp -> num_exp SUBTRACT num_factor .)
    EQUAL_NULL      reduce using rule 24 (num_exp -> num_exp SUBTRACT num_factor .)
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 51
    DIVIDE_INT      shift and go to state 52
    MODULO          shift and go to state 50


state 110

    (23) num_exp -> num_exp ADD num_factor .
    (26) num_factor -> num_factor . MULTIPLY num_term
    (27) num_factor -> num_factor . DIVIDE num_term
    (28) num_factor -> num_factor . DIVIDE_INT num_term
    (29) num_factor -> num_factor . MODULO num_term

    DATE_UNIT       reduce using rule 23 (num_exp -> num_exp ADD num_factor .)
    ADD             reduce using rule 23 (num_exp -> num_exp ADD num_factor .)
    SUBTRACT        reduce using rule 23 (num_exp -> num_exp ADD num_factor .)
    AND             reduce using rule 23 (num_exp -> num_exp ADD num_factor .)
    SEMICOLON       reduce using rule 23 (num_exp -> num_exp ADD num_factor .)
    CLOSEPAR        reduce using rule 23 (num_exp -> num_exp ADD num_factor .)
    COMMA           reduce using rule 23 (num_exp -> num_exp ADD num_factor .)
    BETWEEN         reduce using rule 23 (num_exp -> num_exp ADD num_factor .)
    NOT             reduce using rule 23 (num_exp -> num_exp ADD num_factor .)
    IS              reduce using rule 23 (num_exp -> num_exp ADD num_factor .)
    GE              reduce using rule 23 (num_exp -> num_exp ADD num_factor .)
    GT              reduce using rule 23 (num_exp -> num_exp ADD num_factor .)
    LE              reduce using rule 23 (num_exp -> num_exp ADD num_factor .)
    LT              reduce using rule 23 (num_exp -> num_exp ADD num_factor .)
    NE              reduce using rule 23 (num_exp -> num_exp ADD num_factor .)
    EQUAL           reduce using rule 23 (num_exp -> num_exp ADD num_factor .)
    EQUAL_NULL      reduce using rule 23 (num_exp -> num_exp ADD num_factor .)
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 51
    DIVIDE_INT      shift and go to state 52
    MODULO          shift and go to state 50


state 111

    (45) date_function -> DAY OPENPAR date_exp . CLOSEPAR

    CLOSEPAR        shift and go to state 133


state 112

    (53) date_function -> MONTHNAME OPENPAR date_exp . CLOSEPAR

    CLOSEPAR        shift and go to state 134


state 113

    (46) date_function -> DAYNAME OPENPAR date_exp . CLOSEPAR

    CLOSEPAR        shift and go to state 135


state 114

    (51) date_function -> MAKEDATE OPENPAR num_exp . COMMA num_exp CLOSEPAR
    (23) num_exp -> num_exp . ADD num_factor
    (24) num_exp -> num_exp . SUBTRACT num_factor

    COMMA           shift and go to state 136
    ADD             shift and go to state 76
    SUBTRACT        shift and go to state 75


state 115

    (52) date_function -> MONTH OPENPAR date_exp . CLOSEPAR

    CLOSEPAR        shift and go to state 137


state 116

    (41) date_function -> CURDATE OPENPAR CLOSEPAR .

    CLOSEPAR        reduce using rule 41 (date_function -> CURDATE OPENPAR CLOSEPAR .)
    GE              reduce using rule 41 (date_function -> CURDATE OPENPAR CLOSEPAR .)
    GT              reduce using rule 41 (date_function -> CURDATE OPENPAR CLOSEPAR .)
    LE              reduce using rule 41 (date_function -> CURDATE OPENPAR CLOSEPAR .)
    LT              reduce using rule 41 (date_function -> CURDATE OPENPAR CLOSEPAR .)
    NE              reduce using rule 41 (date_function -> CURDATE OPENPAR CLOSEPAR .)
    EQUAL           reduce using rule 41 (date_function -> CURDATE OPENPAR CLOSEPAR .)
    EQUAL_NULL      reduce using rule 41 (date_function -> CURDATE OPENPAR CLOSEPAR .)
    SEMICOLON       reduce using rule 41 (date_function -> CURDATE OPENPAR CLOSEPAR .)
    COMMA           reduce using rule 41 (date_function -> CURDATE OPENPAR CLOSEPAR .)


state 117

    (49) date_function -> DAYOFYEAR OPENPAR date_exp . CLOSEPAR

    CLOSEPAR        shift and go to state 138


state 118

    (31) num_term -> OPENPAR num_val CLOSEPAR .

    MULTIPLY        reduce using rule 31 (num_term -> OPENPAR num_val CLOSEPAR .)
    DIVIDE          reduce using rule 31 (num_term -> OPENPAR num_val CLOSEPAR .)
    DIVIDE_INT      reduce using rule 31 (num_term -> OPENPAR num_val CLOSEPAR .)
    MODULO          reduce using rule 31 (num_term -> OPENPAR num_val CLOSEPAR .)
    CLOSEPAR        reduce using rule 31 (num_term -> OPENPAR num_val CLOSEPAR .)
    ADD             reduce using rule 31 (num_term -> OPENPAR num_val CLOSEPAR .)
    SUBTRACT        reduce using rule 31 (num_term -> OPENPAR num_val CLOSEPAR .)
    COMMA           reduce using rule 31 (num_term -> OPENPAR num_val CLOSEPAR .)
    BETWEEN         reduce using rule 31 (num_term -> OPENPAR num_val CLOSEPAR .)
    NOT             reduce using rule 31 (num_term -> OPENPAR num_val CLOSEPAR .)
    IS              reduce using rule 31 (num_term -> OPENPAR num_val CLOSEPAR .)
    GE              reduce using rule 31 (num_term -> OPENPAR num_val CLOSEPAR .)
    GT              reduce using rule 31 (num_term -> OPENPAR num_val CLOSEPAR .)
    LE              reduce using rule 31 (num_term -> OPENPAR num_val CLOSEPAR .)
    LT              reduce using rule 31 (num_term -> OPENPAR num_val CLOSEPAR .)
    NE              reduce using rule 31 (num_term -> OPENPAR num_val CLOSEPAR .)
    EQUAL           reduce using rule 31 (num_term -> OPENPAR num_val CLOSEPAR .)
    EQUAL_NULL      reduce using rule 31 (num_term -> OPENPAR num_val CLOSEPAR .)
    SEMICOLON       reduce using rule 31 (num_term -> OPENPAR num_val CLOSEPAR .)
    AND             reduce using rule 31 (num_term -> OPENPAR num_val CLOSEPAR .)
    DATE_UNIT       reduce using rule 31 (num_term -> OPENPAR num_val CLOSEPAR .)


state 119

    (48) date_function -> DAYOFWEEK OPENPAR date_exp . CLOSEPAR

    CLOSEPAR        shift and go to state 139


state 120

    (40) date_function -> ADDDATE OPENPAR date_exp . COMMA date_exp CLOSEPAR

    COMMA           shift and go to state 140


state 121

    (42) date_function -> CURRENT_DATE OPENPAR CLOSEPAR .

    CLOSEPAR        reduce using rule 42 (date_function -> CURRENT_DATE OPENPAR CLOSEPAR .)
    GE              reduce using rule 42 (date_function -> CURRENT_DATE OPENPAR CLOSEPAR .)
    GT              reduce using rule 42 (date_function -> CURRENT_DATE OPENPAR CLOSEPAR .)
    LE              reduce using rule 42 (date_function -> CURRENT_DATE OPENPAR CLOSEPAR .)
    LT              reduce using rule 42 (date_function -> CURRENT_DATE OPENPAR CLOSEPAR .)
    NE              reduce using rule 42 (date_function -> CURRENT_DATE OPENPAR CLOSEPAR .)
    EQUAL           reduce using rule 42 (date_function -> CURRENT_DATE OPENPAR CLOSEPAR .)
    EQUAL_NULL      reduce using rule 42 (date_function -> CURRENT_DATE OPENPAR CLOSEPAR .)
    SEMICOLON       reduce using rule 42 (date_function -> CURRENT_DATE OPENPAR CLOSEPAR .)
    COMMA           reduce using rule 42 (date_function -> CURRENT_DATE OPENPAR CLOSEPAR .)


state 122

    (55) date_function -> YEAR OPENPAR date_exp CLOSEPAR .

    CLOSEPAR        reduce using rule 55 (date_function -> YEAR OPENPAR date_exp CLOSEPAR .)
    GE              reduce using rule 55 (date_function -> YEAR OPENPAR date_exp CLOSEPAR .)
    GT              reduce using rule 55 (date_function -> YEAR OPENPAR date_exp CLOSEPAR .)
    LE              reduce using rule 55 (date_function -> YEAR OPENPAR date_exp CLOSEPAR .)
    LT              reduce using rule 55 (date_function -> YEAR OPENPAR date_exp CLOSEPAR .)
    NE              reduce using rule 55 (date_function -> YEAR OPENPAR date_exp CLOSEPAR .)
    EQUAL           reduce using rule 55 (date_function -> YEAR OPENPAR date_exp CLOSEPAR .)
    EQUAL_NULL      reduce using rule 55 (date_function -> YEAR OPENPAR date_exp CLOSEPAR .)
    SEMICOLON       reduce using rule 55 (date_function -> YEAR OPENPAR date_exp CLOSEPAR .)
    COMMA           reduce using rule 55 (date_function -> YEAR OPENPAR date_exp CLOSEPAR .)


state 123

    (47) date_function -> DAYOFMONTH OPENPAR date_exp CLOSEPAR .

    CLOSEPAR        reduce using rule 47 (date_function -> DAYOFMONTH OPENPAR date_exp CLOSEPAR .)
    GE              reduce using rule 47 (date_function -> DAYOFMONTH OPENPAR date_exp CLOSEPAR .)
    GT              reduce using rule 47 (date_function -> DAYOFMONTH OPENPAR date_exp CLOSEPAR .)
    LE              reduce using rule 47 (date_function -> DAYOFMONTH OPENPAR date_exp CLOSEPAR .)
    LT              reduce using rule 47 (date_function -> DAYOFMONTH OPENPAR date_exp CLOSEPAR .)
    NE              reduce using rule 47 (date_function -> DAYOFMONTH OPENPAR date_exp CLOSEPAR .)
    EQUAL           reduce using rule 47 (date_function -> DAYOFMONTH OPENPAR date_exp CLOSEPAR .)
    EQUAL_NULL      reduce using rule 47 (date_function -> DAYOFMONTH OPENPAR date_exp CLOSEPAR .)
    SEMICOLON       reduce using rule 47 (date_function -> DAYOFMONTH OPENPAR date_exp CLOSEPAR .)
    COMMA           reduce using rule 47 (date_function -> DAYOFMONTH OPENPAR date_exp CLOSEPAR .)


state 124

    (12) condition -> NOT OPENPAR string_cond CLOSEPAR .

    SEMICOLON       reduce using rule 12 (condition -> NOT OPENPAR string_cond CLOSEPAR .)


state 125

    (14) condition -> NOT OPENPAR date_cond CLOSEPAR .

    SEMICOLON       reduce using rule 14 (condition -> NOT OPENPAR date_cond CLOSEPAR .)


state 126

    (13) condition -> NOT OPENPAR num_cond CLOSEPAR .

    SEMICOLON       reduce using rule 13 (condition -> NOT OPENPAR num_cond CLOSEPAR .)


state 127

    (54) date_function -> SUBDATE OPENPAR date_exp COMMA . INTERVAL num_exp DATE_UNIT CLOSEPAR

    INTERVAL        shift and go to state 141


state 128

    (44) date_function -> DATEDIFF OPENPAR date_exp COMMA . date_exp CLOSEPAR
    (38) date_exp -> . date_function
    (39) date_exp -> . DATE_LIT
    (40) date_function -> . ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR
    (41) date_function -> . CURDATE OPENPAR CLOSEPAR
    (42) date_function -> . CURRENT_DATE OPENPAR CLOSEPAR
    (43) date_function -> . CURRENT_DATE
    (44) date_function -> . DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR
    (45) date_function -> . DAY OPENPAR date_exp CLOSEPAR
    (46) date_function -> . DAYNAME OPENPAR date_exp CLOSEPAR
    (47) date_function -> . DAYOFMONTH OPENPAR date_exp CLOSEPAR
    (48) date_function -> . DAYOFWEEK OPENPAR date_exp CLOSEPAR
    (49) date_function -> . DAYOFYEAR OPENPAR date_exp CLOSEPAR
    (50) date_function -> . LAST_DAY OPENPAR date_exp CLOSEPAR
    (51) date_function -> . MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR
    (52) date_function -> . MONTH OPENPAR date_exp CLOSEPAR
    (53) date_function -> . MONTHNAME OPENPAR date_exp CLOSEPAR
    (54) date_function -> . SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR
    (55) date_function -> . YEAR OPENPAR date_exp CLOSEPAR

    DATE_LIT        shift and go to state 41
    ADDDATE         shift and go to state 48
    CURDATE         shift and go to state 39
    CURRENT_DATE    shift and go to state 49
    DATEDIFF        shift and go to state 23
    DAY             shift and go to state 30
    DAYNAME         shift and go to state 33
    DAYOFMONTH      shift and go to state 18
    DAYOFWEEK       shift and go to state 47
    DAYOFYEAR       shift and go to state 42
    LAST_DAY        shift and go to state 28
    MAKEDATE        shift and go to state 36
    MONTH           shift and go to state 37
    MONTHNAME       shift and go to state 32
    SUBDATE         shift and go to state 22
    YEAR            shift and go to state 17

    date_exp                       shift and go to state 142
    date_function                  shift and go to state 45

state 129

    (17) string_cond -> STRCMP OPENPAR string_exp COMMA . string_exp CLOSEPAR
    (18) string_exp -> . STRING_LIT

    STRING_LIT      shift and go to state 34

    string_exp                     shift and go to state 143

state 130

    (16) string_cond -> string_exp NOT LIKE string_exp .

    CLOSEPAR        reduce using rule 16 (string_cond -> string_exp NOT LIKE string_exp .)
    SEMICOLON       reduce using rule 16 (string_cond -> string_exp NOT LIKE string_exp .)


state 131

    (50) date_function -> LAST_DAY OPENPAR date_exp CLOSEPAR .

    CLOSEPAR        reduce using rule 50 (date_function -> LAST_DAY OPENPAR date_exp CLOSEPAR .)
    GE              reduce using rule 50 (date_function -> LAST_DAY OPENPAR date_exp CLOSEPAR .)
    GT              reduce using rule 50 (date_function -> LAST_DAY OPENPAR date_exp CLOSEPAR .)
    LE              reduce using rule 50 (date_function -> LAST_DAY OPENPAR date_exp CLOSEPAR .)
    LT              reduce using rule 50 (date_function -> LAST_DAY OPENPAR date_exp CLOSEPAR .)
    NE              reduce using rule 50 (date_function -> LAST_DAY OPENPAR date_exp CLOSEPAR .)
    EQUAL           reduce using rule 50 (date_function -> LAST_DAY OPENPAR date_exp CLOSEPAR .)
    EQUAL_NULL      reduce using rule 50 (date_function -> LAST_DAY OPENPAR date_exp CLOSEPAR .)
    SEMICOLON       reduce using rule 50 (date_function -> LAST_DAY OPENPAR date_exp CLOSEPAR .)
    COMMA           reduce using rule 50 (date_function -> LAST_DAY OPENPAR date_exp CLOSEPAR .)


state 132

    (20) num_cond -> num_exp BETWEEN num_exp AND . num_exp
    (23) num_exp -> . num_exp ADD num_factor
    (24) num_exp -> . num_exp SUBTRACT num_factor
    (25) num_exp -> . num_factor
    (26) num_factor -> . num_factor MULTIPLY num_term
    (27) num_factor -> . num_factor DIVIDE num_term
    (28) num_factor -> . num_factor DIVIDE_INT num_term
    (29) num_factor -> . num_factor MODULO num_term
    (30) num_factor -> . num_term
    (31) num_term -> . OPENPAR num_val CLOSEPAR
    (32) num_term -> . num_val
    (33) num_val -> . INT_LIT
    (34) num_val -> . DOUBLE_LIT
    (35) num_val -> . COLUMN_NAME

    OPENPAR         shift and go to state 43
    INT_LIT         shift and go to state 20
    DOUBLE_LIT      shift and go to state 31
    COLUMN_NAME     shift and go to state 38

    num_factor                     shift and go to state 16
    num_val                        shift and go to state 46
    num_term                       shift and go to state 35
    num_exp                        shift and go to state 144

state 133

    (45) date_function -> DAY OPENPAR date_exp CLOSEPAR .

    CLOSEPAR        reduce using rule 45 (date_function -> DAY OPENPAR date_exp CLOSEPAR .)
    GE              reduce using rule 45 (date_function -> DAY OPENPAR date_exp CLOSEPAR .)
    GT              reduce using rule 45 (date_function -> DAY OPENPAR date_exp CLOSEPAR .)
    LE              reduce using rule 45 (date_function -> DAY OPENPAR date_exp CLOSEPAR .)
    LT              reduce using rule 45 (date_function -> DAY OPENPAR date_exp CLOSEPAR .)
    NE              reduce using rule 45 (date_function -> DAY OPENPAR date_exp CLOSEPAR .)
    EQUAL           reduce using rule 45 (date_function -> DAY OPENPAR date_exp CLOSEPAR .)
    EQUAL_NULL      reduce using rule 45 (date_function -> DAY OPENPAR date_exp CLOSEPAR .)
    SEMICOLON       reduce using rule 45 (date_function -> DAY OPENPAR date_exp CLOSEPAR .)
    COMMA           reduce using rule 45 (date_function -> DAY OPENPAR date_exp CLOSEPAR .)


state 134

    (53) date_function -> MONTHNAME OPENPAR date_exp CLOSEPAR .

    CLOSEPAR        reduce using rule 53 (date_function -> MONTHNAME OPENPAR date_exp CLOSEPAR .)
    GE              reduce using rule 53 (date_function -> MONTHNAME OPENPAR date_exp CLOSEPAR .)
    GT              reduce using rule 53 (date_function -> MONTHNAME OPENPAR date_exp CLOSEPAR .)
    LE              reduce using rule 53 (date_function -> MONTHNAME OPENPAR date_exp CLOSEPAR .)
    LT              reduce using rule 53 (date_function -> MONTHNAME OPENPAR date_exp CLOSEPAR .)
    NE              reduce using rule 53 (date_function -> MONTHNAME OPENPAR date_exp CLOSEPAR .)
    EQUAL           reduce using rule 53 (date_function -> MONTHNAME OPENPAR date_exp CLOSEPAR .)
    EQUAL_NULL      reduce using rule 53 (date_function -> MONTHNAME OPENPAR date_exp CLOSEPAR .)
    SEMICOLON       reduce using rule 53 (date_function -> MONTHNAME OPENPAR date_exp CLOSEPAR .)
    COMMA           reduce using rule 53 (date_function -> MONTHNAME OPENPAR date_exp CLOSEPAR .)


state 135

    (46) date_function -> DAYNAME OPENPAR date_exp CLOSEPAR .

    CLOSEPAR        reduce using rule 46 (date_function -> DAYNAME OPENPAR date_exp CLOSEPAR .)
    GE              reduce using rule 46 (date_function -> DAYNAME OPENPAR date_exp CLOSEPAR .)
    GT              reduce using rule 46 (date_function -> DAYNAME OPENPAR date_exp CLOSEPAR .)
    LE              reduce using rule 46 (date_function -> DAYNAME OPENPAR date_exp CLOSEPAR .)
    LT              reduce using rule 46 (date_function -> DAYNAME OPENPAR date_exp CLOSEPAR .)
    NE              reduce using rule 46 (date_function -> DAYNAME OPENPAR date_exp CLOSEPAR .)
    EQUAL           reduce using rule 46 (date_function -> DAYNAME OPENPAR date_exp CLOSEPAR .)
    EQUAL_NULL      reduce using rule 46 (date_function -> DAYNAME OPENPAR date_exp CLOSEPAR .)
    SEMICOLON       reduce using rule 46 (date_function -> DAYNAME OPENPAR date_exp CLOSEPAR .)
    COMMA           reduce using rule 46 (date_function -> DAYNAME OPENPAR date_exp CLOSEPAR .)


state 136

    (51) date_function -> MAKEDATE OPENPAR num_exp COMMA . num_exp CLOSEPAR
    (23) num_exp -> . num_exp ADD num_factor
    (24) num_exp -> . num_exp SUBTRACT num_factor
    (25) num_exp -> . num_factor
    (26) num_factor -> . num_factor MULTIPLY num_term
    (27) num_factor -> . num_factor DIVIDE num_term
    (28) num_factor -> . num_factor DIVIDE_INT num_term
    (29) num_factor -> . num_factor MODULO num_term
    (30) num_factor -> . num_term
    (31) num_term -> . OPENPAR num_val CLOSEPAR
    (32) num_term -> . num_val
    (33) num_val -> . INT_LIT
    (34) num_val -> . DOUBLE_LIT
    (35) num_val -> . COLUMN_NAME

    OPENPAR         shift and go to state 43
    INT_LIT         shift and go to state 20
    DOUBLE_LIT      shift and go to state 31
    COLUMN_NAME     shift and go to state 38

    num_factor                     shift and go to state 16
    num_val                        shift and go to state 46
    num_term                       shift and go to state 35
    num_exp                        shift and go to state 145

state 137

    (52) date_function -> MONTH OPENPAR date_exp CLOSEPAR .

    CLOSEPAR        reduce using rule 52 (date_function -> MONTH OPENPAR date_exp CLOSEPAR .)
    GE              reduce using rule 52 (date_function -> MONTH OPENPAR date_exp CLOSEPAR .)
    GT              reduce using rule 52 (date_function -> MONTH OPENPAR date_exp CLOSEPAR .)
    LE              reduce using rule 52 (date_function -> MONTH OPENPAR date_exp CLOSEPAR .)
    LT              reduce using rule 52 (date_function -> MONTH OPENPAR date_exp CLOSEPAR .)
    NE              reduce using rule 52 (date_function -> MONTH OPENPAR date_exp CLOSEPAR .)
    EQUAL           reduce using rule 52 (date_function -> MONTH OPENPAR date_exp CLOSEPAR .)
    EQUAL_NULL      reduce using rule 52 (date_function -> MONTH OPENPAR date_exp CLOSEPAR .)
    SEMICOLON       reduce using rule 52 (date_function -> MONTH OPENPAR date_exp CLOSEPAR .)
    COMMA           reduce using rule 52 (date_function -> MONTH OPENPAR date_exp CLOSEPAR .)


state 138

    (49) date_function -> DAYOFYEAR OPENPAR date_exp CLOSEPAR .

    CLOSEPAR        reduce using rule 49 (date_function -> DAYOFYEAR OPENPAR date_exp CLOSEPAR .)
    GE              reduce using rule 49 (date_function -> DAYOFYEAR OPENPAR date_exp CLOSEPAR .)
    GT              reduce using rule 49 (date_function -> DAYOFYEAR OPENPAR date_exp CLOSEPAR .)
    LE              reduce using rule 49 (date_function -> DAYOFYEAR OPENPAR date_exp CLOSEPAR .)
    LT              reduce using rule 49 (date_function -> DAYOFYEAR OPENPAR date_exp CLOSEPAR .)
    NE              reduce using rule 49 (date_function -> DAYOFYEAR OPENPAR date_exp CLOSEPAR .)
    EQUAL           reduce using rule 49 (date_function -> DAYOFYEAR OPENPAR date_exp CLOSEPAR .)
    EQUAL_NULL      reduce using rule 49 (date_function -> DAYOFYEAR OPENPAR date_exp CLOSEPAR .)
    SEMICOLON       reduce using rule 49 (date_function -> DAYOFYEAR OPENPAR date_exp CLOSEPAR .)
    COMMA           reduce using rule 49 (date_function -> DAYOFYEAR OPENPAR date_exp CLOSEPAR .)


state 139

    (48) date_function -> DAYOFWEEK OPENPAR date_exp CLOSEPAR .

    CLOSEPAR        reduce using rule 48 (date_function -> DAYOFWEEK OPENPAR date_exp CLOSEPAR .)
    GE              reduce using rule 48 (date_function -> DAYOFWEEK OPENPAR date_exp CLOSEPAR .)
    GT              reduce using rule 48 (date_function -> DAYOFWEEK OPENPAR date_exp CLOSEPAR .)
    LE              reduce using rule 48 (date_function -> DAYOFWEEK OPENPAR date_exp CLOSEPAR .)
    LT              reduce using rule 48 (date_function -> DAYOFWEEK OPENPAR date_exp CLOSEPAR .)
    NE              reduce using rule 48 (date_function -> DAYOFWEEK OPENPAR date_exp CLOSEPAR .)
    EQUAL           reduce using rule 48 (date_function -> DAYOFWEEK OPENPAR date_exp CLOSEPAR .)
    EQUAL_NULL      reduce using rule 48 (date_function -> DAYOFWEEK OPENPAR date_exp CLOSEPAR .)
    SEMICOLON       reduce using rule 48 (date_function -> DAYOFWEEK OPENPAR date_exp CLOSEPAR .)
    COMMA           reduce using rule 48 (date_function -> DAYOFWEEK OPENPAR date_exp CLOSEPAR .)


state 140

    (40) date_function -> ADDDATE OPENPAR date_exp COMMA . date_exp CLOSEPAR
    (38) date_exp -> . date_function
    (39) date_exp -> . DATE_LIT
    (40) date_function -> . ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR
    (41) date_function -> . CURDATE OPENPAR CLOSEPAR
    (42) date_function -> . CURRENT_DATE OPENPAR CLOSEPAR
    (43) date_function -> . CURRENT_DATE
    (44) date_function -> . DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR
    (45) date_function -> . DAY OPENPAR date_exp CLOSEPAR
    (46) date_function -> . DAYNAME OPENPAR date_exp CLOSEPAR
    (47) date_function -> . DAYOFMONTH OPENPAR date_exp CLOSEPAR
    (48) date_function -> . DAYOFWEEK OPENPAR date_exp CLOSEPAR
    (49) date_function -> . DAYOFYEAR OPENPAR date_exp CLOSEPAR
    (50) date_function -> . LAST_DAY OPENPAR date_exp CLOSEPAR
    (51) date_function -> . MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR
    (52) date_function -> . MONTH OPENPAR date_exp CLOSEPAR
    (53) date_function -> . MONTHNAME OPENPAR date_exp CLOSEPAR
    (54) date_function -> . SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR
    (55) date_function -> . YEAR OPENPAR date_exp CLOSEPAR

    DATE_LIT        shift and go to state 41
    ADDDATE         shift and go to state 48
    CURDATE         shift and go to state 39
    CURRENT_DATE    shift and go to state 49
    DATEDIFF        shift and go to state 23
    DAY             shift and go to state 30
    DAYNAME         shift and go to state 33
    DAYOFMONTH      shift and go to state 18
    DAYOFWEEK       shift and go to state 47
    DAYOFYEAR       shift and go to state 42
    LAST_DAY        shift and go to state 28
    MAKEDATE        shift and go to state 36
    MONTH           shift and go to state 37
    MONTHNAME       shift and go to state 32
    SUBDATE         shift and go to state 22
    YEAR            shift and go to state 17

    date_exp                       shift and go to state 146
    date_function                  shift and go to state 45

state 141

    (54) date_function -> SUBDATE OPENPAR date_exp COMMA INTERVAL . num_exp DATE_UNIT CLOSEPAR
    (23) num_exp -> . num_exp ADD num_factor
    (24) num_exp -> . num_exp SUBTRACT num_factor
    (25) num_exp -> . num_factor
    (26) num_factor -> . num_factor MULTIPLY num_term
    (27) num_factor -> . num_factor DIVIDE num_term
    (28) num_factor -> . num_factor DIVIDE_INT num_term
    (29) num_factor -> . num_factor MODULO num_term
    (30) num_factor -> . num_term
    (31) num_term -> . OPENPAR num_val CLOSEPAR
    (32) num_term -> . num_val
    (33) num_val -> . INT_LIT
    (34) num_val -> . DOUBLE_LIT
    (35) num_val -> . COLUMN_NAME

    OPENPAR         shift and go to state 43
    INT_LIT         shift and go to state 20
    DOUBLE_LIT      shift and go to state 31
    COLUMN_NAME     shift and go to state 38

    num_factor                     shift and go to state 16
    num_val                        shift and go to state 46
    num_term                       shift and go to state 35
    num_exp                        shift and go to state 147

state 142

    (44) date_function -> DATEDIFF OPENPAR date_exp COMMA date_exp . CLOSEPAR

    CLOSEPAR        shift and go to state 148


state 143

    (17) string_cond -> STRCMP OPENPAR string_exp COMMA string_exp . CLOSEPAR

    CLOSEPAR        shift and go to state 149


state 144

    (20) num_cond -> num_exp BETWEEN num_exp AND num_exp .
    (23) num_exp -> num_exp . ADD num_factor
    (24) num_exp -> num_exp . SUBTRACT num_factor

    CLOSEPAR        reduce using rule 20 (num_cond -> num_exp BETWEEN num_exp AND num_exp .)
    SEMICOLON       reduce using rule 20 (num_cond -> num_exp BETWEEN num_exp AND num_exp .)
    ADD             shift and go to state 76
    SUBTRACT        shift and go to state 75


state 145

    (51) date_function -> MAKEDATE OPENPAR num_exp COMMA num_exp . CLOSEPAR
    (23) num_exp -> num_exp . ADD num_factor
    (24) num_exp -> num_exp . SUBTRACT num_factor

    CLOSEPAR        shift and go to state 150
    ADD             shift and go to state 76
    SUBTRACT        shift and go to state 75


state 146

    (40) date_function -> ADDDATE OPENPAR date_exp COMMA date_exp . CLOSEPAR

    CLOSEPAR        shift and go to state 151


state 147

    (54) date_function -> SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp . DATE_UNIT CLOSEPAR
    (23) num_exp -> num_exp . ADD num_factor
    (24) num_exp -> num_exp . SUBTRACT num_factor

    DATE_UNIT       shift and go to state 152
    ADD             shift and go to state 76
    SUBTRACT        shift and go to state 75


state 148

    (44) date_function -> DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR .

    CLOSEPAR        reduce using rule 44 (date_function -> DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR .)
    GE              reduce using rule 44 (date_function -> DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR .)
    GT              reduce using rule 44 (date_function -> DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR .)
    LE              reduce using rule 44 (date_function -> DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR .)
    LT              reduce using rule 44 (date_function -> DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR .)
    NE              reduce using rule 44 (date_function -> DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR .)
    EQUAL           reduce using rule 44 (date_function -> DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR .)
    EQUAL_NULL      reduce using rule 44 (date_function -> DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR .)
    SEMICOLON       reduce using rule 44 (date_function -> DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR .)
    COMMA           reduce using rule 44 (date_function -> DATEDIFF OPENPAR date_exp COMMA date_exp CLOSEPAR .)


state 149

    (17) string_cond -> STRCMP OPENPAR string_exp COMMA string_exp CLOSEPAR .

    CLOSEPAR        reduce using rule 17 (string_cond -> STRCMP OPENPAR string_exp COMMA string_exp CLOSEPAR .)
    SEMICOLON       reduce using rule 17 (string_cond -> STRCMP OPENPAR string_exp COMMA string_exp CLOSEPAR .)


state 150

    (51) date_function -> MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR .

    CLOSEPAR        reduce using rule 51 (date_function -> MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR .)
    GE              reduce using rule 51 (date_function -> MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR .)
    GT              reduce using rule 51 (date_function -> MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR .)
    LE              reduce using rule 51 (date_function -> MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR .)
    LT              reduce using rule 51 (date_function -> MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR .)
    NE              reduce using rule 51 (date_function -> MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR .)
    EQUAL           reduce using rule 51 (date_function -> MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR .)
    EQUAL_NULL      reduce using rule 51 (date_function -> MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR .)
    SEMICOLON       reduce using rule 51 (date_function -> MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR .)
    COMMA           reduce using rule 51 (date_function -> MAKEDATE OPENPAR num_exp COMMA num_exp CLOSEPAR .)


state 151

    (40) date_function -> ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR .

    CLOSEPAR        reduce using rule 40 (date_function -> ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR .)
    GE              reduce using rule 40 (date_function -> ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR .)
    GT              reduce using rule 40 (date_function -> ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR .)
    LE              reduce using rule 40 (date_function -> ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR .)
    LT              reduce using rule 40 (date_function -> ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR .)
    NE              reduce using rule 40 (date_function -> ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR .)
    EQUAL           reduce using rule 40 (date_function -> ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR .)
    EQUAL_NULL      reduce using rule 40 (date_function -> ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR .)
    SEMICOLON       reduce using rule 40 (date_function -> ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR .)
    COMMA           reduce using rule 40 (date_function -> ADDDATE OPENPAR date_exp COMMA date_exp CLOSEPAR .)


state 152

    (54) date_function -> SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT . CLOSEPAR

    CLOSEPAR        shift and go to state 153


state 153

    (54) date_function -> SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR .

    CLOSEPAR        reduce using rule 54 (date_function -> SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR .)
    GE              reduce using rule 54 (date_function -> SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR .)
    GT              reduce using rule 54 (date_function -> SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR .)
    LE              reduce using rule 54 (date_function -> SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR .)
    LT              reduce using rule 54 (date_function -> SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR .)
    NE              reduce using rule 54 (date_function -> SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR .)
    EQUAL           reduce using rule 54 (date_function -> SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR .)
    EQUAL_NULL      reduce using rule 54 (date_function -> SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR .)
    SEMICOLON       reduce using rule 54 (date_function -> SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR .)
    COMMA           reduce using rule 54 (date_function -> SUBDATE OPENPAR date_exp COMMA INTERVAL num_exp DATE_UNIT CLOSEPAR .)

